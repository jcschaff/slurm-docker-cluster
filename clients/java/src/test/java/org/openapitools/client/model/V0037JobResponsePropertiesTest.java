/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V0037JobResources;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for V0037JobResponseProperties
 */
public class V0037JobResponsePropertiesTest {
    private final V0037JobResponseProperties model = new V0037JobResponseProperties();

    /**
     * Model tests for V0037JobResponseProperties
     */
    @Test
    public void testV0037JobResponseProperties() {
        // TODO: test V0037JobResponseProperties
    }

    /**
     * Test the property 'account'
     */
    @Test
    public void accountTest() {
        // TODO: test account
    }

    /**
     * Test the property 'accrueTime'
     */
    @Test
    public void accrueTimeTest() {
        // TODO: test accrueTime
    }

    /**
     * Test the property 'adminComment'
     */
    @Test
    public void adminCommentTest() {
        // TODO: test adminComment
    }

    /**
     * Test the property 'arrayJobId'
     */
    @Test
    public void arrayJobIdTest() {
        // TODO: test arrayJobId
    }

    /**
     * Test the property 'arrayTaskId'
     */
    @Test
    public void arrayTaskIdTest() {
        // TODO: test arrayTaskId
    }

    /**
     * Test the property 'arrayMaxTasks'
     */
    @Test
    public void arrayMaxTasksTest() {
        // TODO: test arrayMaxTasks
    }

    /**
     * Test the property 'arrayTaskString'
     */
    @Test
    public void arrayTaskStringTest() {
        // TODO: test arrayTaskString
    }

    /**
     * Test the property 'associationId'
     */
    @Test
    public void associationIdTest() {
        // TODO: test associationId
    }

    /**
     * Test the property 'batchFeatures'
     */
    @Test
    public void batchFeaturesTest() {
        // TODO: test batchFeatures
    }

    /**
     * Test the property 'batchFlag'
     */
    @Test
    public void batchFlagTest() {
        // TODO: test batchFlag
    }

    /**
     * Test the property 'batchHost'
     */
    @Test
    public void batchHostTest() {
        // TODO: test batchHost
    }

    /**
     * Test the property 'flags'
     */
    @Test
    public void flagsTest() {
        // TODO: test flags
    }

    /**
     * Test the property 'burstBuffer'
     */
    @Test
    public void burstBufferTest() {
        // TODO: test burstBuffer
    }

    /**
     * Test the property 'burstBufferState'
     */
    @Test
    public void burstBufferStateTest() {
        // TODO: test burstBufferState
    }

    /**
     * Test the property 'cluster'
     */
    @Test
    public void clusterTest() {
        // TODO: test cluster
    }

    /**
     * Test the property 'clusterFeatures'
     */
    @Test
    public void clusterFeaturesTest() {
        // TODO: test clusterFeatures
    }

    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'comment'
     */
    @Test
    public void commentTest() {
        // TODO: test comment
    }

    /**
     * Test the property 'contiguous'
     */
    @Test
    public void contiguousTest() {
        // TODO: test contiguous
    }

    /**
     * Test the property 'coreSpec'
     */
    @Test
    public void coreSpecTest() {
        // TODO: test coreSpec
    }

    /**
     * Test the property 'threadSpec'
     */
    @Test
    public void threadSpecTest() {
        // TODO: test threadSpec
    }

    /**
     * Test the property 'coresPerSocket'
     */
    @Test
    public void coresPerSocketTest() {
        // TODO: test coresPerSocket
    }

    /**
     * Test the property 'billableTres'
     */
    @Test
    public void billableTresTest() {
        // TODO: test billableTres
    }

    /**
     * Test the property 'cpusPerTask'
     */
    @Test
    public void cpusPerTaskTest() {
        // TODO: test cpusPerTask
    }

    /**
     * Test the property 'cpuFrequencyMinimum'
     */
    @Test
    public void cpuFrequencyMinimumTest() {
        // TODO: test cpuFrequencyMinimum
    }

    /**
     * Test the property 'cpuFrequencyMaximum'
     */
    @Test
    public void cpuFrequencyMaximumTest() {
        // TODO: test cpuFrequencyMaximum
    }

    /**
     * Test the property 'cpuFrequencyGovernor'
     */
    @Test
    public void cpuFrequencyGovernorTest() {
        // TODO: test cpuFrequencyGovernor
    }

    /**
     * Test the property 'cpusPerTres'
     */
    @Test
    public void cpusPerTresTest() {
        // TODO: test cpusPerTres
    }

    /**
     * Test the property 'deadline'
     */
    @Test
    public void deadlineTest() {
        // TODO: test deadline
    }

    /**
     * Test the property 'delayBoot'
     */
    @Test
    public void delayBootTest() {
        // TODO: test delayBoot
    }

    /**
     * Test the property 'dependency'
     */
    @Test
    public void dependencyTest() {
        // TODO: test dependency
    }

    /**
     * Test the property 'derivedExitCode'
     */
    @Test
    public void derivedExitCodeTest() {
        // TODO: test derivedExitCode
    }

    /**
     * Test the property 'eligibleTime'
     */
    @Test
    public void eligibleTimeTest() {
        // TODO: test eligibleTime
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    public void endTimeTest() {
        // TODO: test endTime
    }

    /**
     * Test the property 'excludedNodes'
     */
    @Test
    public void excludedNodesTest() {
        // TODO: test excludedNodes
    }

    /**
     * Test the property 'exitCode'
     */
    @Test
    public void exitCodeTest() {
        // TODO: test exitCode
    }

    /**
     * Test the property 'features'
     */
    @Test
    public void featuresTest() {
        // TODO: test features
    }

    /**
     * Test the property 'federationOrigin'
     */
    @Test
    public void federationOriginTest() {
        // TODO: test federationOrigin
    }

    /**
     * Test the property 'federationSiblingsActive'
     */
    @Test
    public void federationSiblingsActiveTest() {
        // TODO: test federationSiblingsActive
    }

    /**
     * Test the property 'federationSiblingsViable'
     */
    @Test
    public void federationSiblingsViableTest() {
        // TODO: test federationSiblingsViable
    }

    /**
     * Test the property 'gresDetail'
     */
    @Test
    public void gresDetailTest() {
        // TODO: test gresDetail
    }

    /**
     * Test the property 'groupId'
     */
    @Test
    public void groupIdTest() {
        // TODO: test groupId
    }

    /**
     * Test the property 'jobId'
     */
    @Test
    public void jobIdTest() {
        // TODO: test jobId
    }

    /**
     * Test the property 'jobResources'
     */
    @Test
    public void jobResourcesTest() {
        // TODO: test jobResources
    }

    /**
     * Test the property 'jobState'
     */
    @Test
    public void jobStateTest() {
        // TODO: test jobState
    }

    /**
     * Test the property 'lastSchedEvaluation'
     */
    @Test
    public void lastSchedEvaluationTest() {
        // TODO: test lastSchedEvaluation
    }

    /**
     * Test the property 'licenses'
     */
    @Test
    public void licensesTest() {
        // TODO: test licenses
    }

    /**
     * Test the property 'maxCpus'
     */
    @Test
    public void maxCpusTest() {
        // TODO: test maxCpus
    }

    /**
     * Test the property 'maxNodes'
     */
    @Test
    public void maxNodesTest() {
        // TODO: test maxNodes
    }

    /**
     * Test the property 'mcsLabel'
     */
    @Test
    public void mcsLabelTest() {
        // TODO: test mcsLabel
    }

    /**
     * Test the property 'memoryPerTres'
     */
    @Test
    public void memoryPerTresTest() {
        // TODO: test memoryPerTres
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nodes'
     */
    @Test
    public void nodesTest() {
        // TODO: test nodes
    }

    /**
     * Test the property 'nice'
     */
    @Test
    public void niceTest() {
        // TODO: test nice
    }

    /**
     * Test the property 'tasksPerCore'
     */
    @Test
    public void tasksPerCoreTest() {
        // TODO: test tasksPerCore
    }

    /**
     * Test the property 'tasksPerSocket'
     */
    @Test
    public void tasksPerSocketTest() {
        // TODO: test tasksPerSocket
    }

    /**
     * Test the property 'tasksPerBoard'
     */
    @Test
    public void tasksPerBoardTest() {
        // TODO: test tasksPerBoard
    }

    /**
     * Test the property 'cpus'
     */
    @Test
    public void cpusTest() {
        // TODO: test cpus
    }

    /**
     * Test the property 'nodeCount'
     */
    @Test
    public void nodeCountTest() {
        // TODO: test nodeCount
    }

    /**
     * Test the property 'tasks'
     */
    @Test
    public void tasksTest() {
        // TODO: test tasks
    }

    /**
     * Test the property 'hetJobId'
     */
    @Test
    public void hetJobIdTest() {
        // TODO: test hetJobId
    }

    /**
     * Test the property 'hetJobIdSet'
     */
    @Test
    public void hetJobIdSetTest() {
        // TODO: test hetJobIdSet
    }

    /**
     * Test the property 'hetJobOffset'
     */
    @Test
    public void hetJobOffsetTest() {
        // TODO: test hetJobOffset
    }

    /**
     * Test the property 'partition'
     */
    @Test
    public void partitionTest() {
        // TODO: test partition
    }

    /**
     * Test the property 'memoryPerNode'
     */
    @Test
    public void memoryPerNodeTest() {
        // TODO: test memoryPerNode
    }

    /**
     * Test the property 'memoryPerCpu'
     */
    @Test
    public void memoryPerCpuTest() {
        // TODO: test memoryPerCpu
    }

    /**
     * Test the property 'minimumCpusPerNode'
     */
    @Test
    public void minimumCpusPerNodeTest() {
        // TODO: test minimumCpusPerNode
    }

    /**
     * Test the property 'minimumTmpDiskPerNode'
     */
    @Test
    public void minimumTmpDiskPerNodeTest() {
        // TODO: test minimumTmpDiskPerNode
    }

    /**
     * Test the property 'preemptTime'
     */
    @Test
    public void preemptTimeTest() {
        // TODO: test preemptTime
    }

    /**
     * Test the property 'preSusTime'
     */
    @Test
    public void preSusTimeTest() {
        // TODO: test preSusTime
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'profile'
     */
    @Test
    public void profileTest() {
        // TODO: test profile
    }

    /**
     * Test the property 'qos'
     */
    @Test
    public void qosTest() {
        // TODO: test qos
    }

    /**
     * Test the property 'reboot'
     */
    @Test
    public void rebootTest() {
        // TODO: test reboot
    }

    /**
     * Test the property 'requiredNodes'
     */
    @Test
    public void requiredNodesTest() {
        // TODO: test requiredNodes
    }

    /**
     * Test the property 'requeue'
     */
    @Test
    public void requeueTest() {
        // TODO: test requeue
    }

    /**
     * Test the property 'resizeTime'
     */
    @Test
    public void resizeTimeTest() {
        // TODO: test resizeTime
    }

    /**
     * Test the property 'restartCnt'
     */
    @Test
    public void restartCntTest() {
        // TODO: test restartCnt
    }

    /**
     * Test the property 'resvName'
     */
    @Test
    public void resvNameTest() {
        // TODO: test resvName
    }

    /**
     * Test the property 'shared'
     */
    @Test
    public void sharedTest() {
        // TODO: test shared
    }

    /**
     * Test the property 'showFlags'
     */
    @Test
    public void showFlagsTest() {
        // TODO: test showFlags
    }

    /**
     * Test the property 'socketsPerBoard'
     */
    @Test
    public void socketsPerBoardTest() {
        // TODO: test socketsPerBoard
    }

    /**
     * Test the property 'socketsPerNode'
     */
    @Test
    public void socketsPerNodeTest() {
        // TODO: test socketsPerNode
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'stateDescription'
     */
    @Test
    public void stateDescriptionTest() {
        // TODO: test stateDescription
    }

    /**
     * Test the property 'stateReason'
     */
    @Test
    public void stateReasonTest() {
        // TODO: test stateReason
    }

    /**
     * Test the property 'standardError'
     */
    @Test
    public void standardErrorTest() {
        // TODO: test standardError
    }

    /**
     * Test the property 'standardInput'
     */
    @Test
    public void standardInputTest() {
        // TODO: test standardInput
    }

    /**
     * Test the property 'standardOutput'
     */
    @Test
    public void standardOutputTest() {
        // TODO: test standardOutput
    }

    /**
     * Test the property 'submitTime'
     */
    @Test
    public void submitTimeTest() {
        // TODO: test submitTime
    }

    /**
     * Test the property 'suspendTime'
     */
    @Test
    public void suspendTimeTest() {
        // TODO: test suspendTime
    }

    /**
     * Test the property 'systemComment'
     */
    @Test
    public void systemCommentTest() {
        // TODO: test systemComment
    }

    /**
     * Test the property 'timeLimit'
     */
    @Test
    public void timeLimitTest() {
        // TODO: test timeLimit
    }

    /**
     * Test the property 'timeMinimum'
     */
    @Test
    public void timeMinimumTest() {
        // TODO: test timeMinimum
    }

    /**
     * Test the property 'threadsPerCore'
     */
    @Test
    public void threadsPerCoreTest() {
        // TODO: test threadsPerCore
    }

    /**
     * Test the property 'tresBind'
     */
    @Test
    public void tresBindTest() {
        // TODO: test tresBind
    }

    /**
     * Test the property 'tresFreq'
     */
    @Test
    public void tresFreqTest() {
        // TODO: test tresFreq
    }

    /**
     * Test the property 'tresPerJob'
     */
    @Test
    public void tresPerJobTest() {
        // TODO: test tresPerJob
    }

    /**
     * Test the property 'tresPerNode'
     */
    @Test
    public void tresPerNodeTest() {
        // TODO: test tresPerNode
    }

    /**
     * Test the property 'tresPerSocket'
     */
    @Test
    public void tresPerSocketTest() {
        // TODO: test tresPerSocket
    }

    /**
     * Test the property 'tresPerTask'
     */
    @Test
    public void tresPerTaskTest() {
        // TODO: test tresPerTask
    }

    /**
     * Test the property 'tresReqStr'
     */
    @Test
    public void tresReqStrTest() {
        // TODO: test tresReqStr
    }

    /**
     * Test the property 'tresAllocStr'
     */
    @Test
    public void tresAllocStrTest() {
        // TODO: test tresAllocStr
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'userName'
     */
    @Test
    public void userNameTest() {
        // TODO: test userName
    }

    /**
     * Test the property 'wckey'
     */
    @Test
    public void wckeyTest() {
        // TODO: test wckey
    }

    /**
     * Test the property 'currentWorkingDirectory'
     */
    @Test
    public void currentWorkingDirectoryTest() {
        // TODO: test currentWorkingDirectory
    }

}
