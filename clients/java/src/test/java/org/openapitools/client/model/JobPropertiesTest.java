/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobPropertiesExclusive;
import org.openapitools.client.model.JobPropertiesNodes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for JobProperties
 */
public class JobPropertiesTest {
    private final JobProperties model = new JobProperties();

    /**
     * Model tests for JobProperties
     */
    @Test
    public void testJobProperties() {
        // TODO: test JobProperties
    }

    /**
     * Test the property 'account'
     */
    @Test
    public void accountTest() {
        // TODO: test account
    }

    /**
     * Test the property 'accountGatherFreqency'
     */
    @Test
    public void accountGatherFreqencyTest() {
        // TODO: test accountGatherFreqency
    }

    /**
     * Test the property 'argv'
     */
    @Test
    public void argvTest() {
        // TODO: test argv
    }

    /**
     * Test the property 'array'
     */
    @Test
    public void arrayTest() {
        // TODO: test array
    }

    /**
     * Test the property 'batchFeatures'
     */
    @Test
    public void batchFeaturesTest() {
        // TODO: test batchFeatures
    }

    /**
     * Test the property 'beginTime'
     */
    @Test
    public void beginTimeTest() {
        // TODO: test beginTime
    }

    /**
     * Test the property 'burstBuffer'
     */
    @Test
    public void burstBufferTest() {
        // TODO: test burstBuffer
    }

    /**
     * Test the property 'clusterConstraints'
     */
    @Test
    public void clusterConstraintsTest() {
        // TODO: test clusterConstraints
    }

    /**
     * Test the property 'comment'
     */
    @Test
    public void commentTest() {
        // TODO: test comment
    }

    /**
     * Test the property 'constraints'
     */
    @Test
    public void constraintsTest() {
        // TODO: test constraints
    }

    /**
     * Test the property 'coreSpecification'
     */
    @Test
    public void coreSpecificationTest() {
        // TODO: test coreSpecification
    }

    /**
     * Test the property 'coresPerSocket'
     */
    @Test
    public void coresPerSocketTest() {
        // TODO: test coresPerSocket
    }

    /**
     * Test the property 'cpuBinding'
     */
    @Test
    public void cpuBindingTest() {
        // TODO: test cpuBinding
    }

    /**
     * Test the property 'cpuBindingHint'
     */
    @Test
    public void cpuBindingHintTest() {
        // TODO: test cpuBindingHint
    }

    /**
     * Test the property 'cpuFrequency'
     */
    @Test
    public void cpuFrequencyTest() {
        // TODO: test cpuFrequency
    }

    /**
     * Test the property 'cpusPerGpu'
     */
    @Test
    public void cpusPerGpuTest() {
        // TODO: test cpusPerGpu
    }

    /**
     * Test the property 'cpusPerTask'
     */
    @Test
    public void cpusPerTaskTest() {
        // TODO: test cpusPerTask
    }

    /**
     * Test the property 'currentWorkingDirectory'
     */
    @Test
    public void currentWorkingDirectoryTest() {
        // TODO: test currentWorkingDirectory
    }

    /**
     * Test the property 'deadline'
     */
    @Test
    public void deadlineTest() {
        // TODO: test deadline
    }

    /**
     * Test the property 'delayBoot'
     */
    @Test
    public void delayBootTest() {
        // TODO: test delayBoot
    }

    /**
     * Test the property 'dependency'
     */
    @Test
    public void dependencyTest() {
        // TODO: test dependency
    }

    /**
     * Test the property 'distribution'
     */
    @Test
    public void distributionTest() {
        // TODO: test distribution
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'exclusive'
     */
    @Test
    public void exclusiveTest() {
        // TODO: test exclusive
    }

    /**
     * Test the property 'getUserEnvironment'
     */
    @Test
    public void getUserEnvironmentTest() {
        // TODO: test getUserEnvironment
    }

    /**
     * Test the property 'gres'
     */
    @Test
    public void gresTest() {
        // TODO: test gres
    }

    /**
     * Test the property 'gresFlags'
     */
    @Test
    public void gresFlagsTest() {
        // TODO: test gresFlags
    }

    /**
     * Test the property 'gpuBinding'
     */
    @Test
    public void gpuBindingTest() {
        // TODO: test gpuBinding
    }

    /**
     * Test the property 'gpuFrequency'
     */
    @Test
    public void gpuFrequencyTest() {
        // TODO: test gpuFrequency
    }

    /**
     * Test the property 'gpus'
     */
    @Test
    public void gpusTest() {
        // TODO: test gpus
    }

    /**
     * Test the property 'gpusPerNode'
     */
    @Test
    public void gpusPerNodeTest() {
        // TODO: test gpusPerNode
    }

    /**
     * Test the property 'gpusPerSocket'
     */
    @Test
    public void gpusPerSocketTest() {
        // TODO: test gpusPerSocket
    }

    /**
     * Test the property 'gpusPerTask'
     */
    @Test
    public void gpusPerTaskTest() {
        // TODO: test gpusPerTask
    }

    /**
     * Test the property 'hold'
     */
    @Test
    public void holdTest() {
        // TODO: test hold
    }

    /**
     * Test the property 'killOnInvalidDependency'
     */
    @Test
    public void killOnInvalidDependencyTest() {
        // TODO: test killOnInvalidDependency
    }

    /**
     * Test the property 'licenses'
     */
    @Test
    public void licensesTest() {
        // TODO: test licenses
    }

    /**
     * Test the property 'mailType'
     */
    @Test
    public void mailTypeTest() {
        // TODO: test mailType
    }

    /**
     * Test the property 'mailUser'
     */
    @Test
    public void mailUserTest() {
        // TODO: test mailUser
    }

    /**
     * Test the property 'mcsLabel'
     */
    @Test
    public void mcsLabelTest() {
        // TODO: test mcsLabel
    }

    /**
     * Test the property 'memoryBinding'
     */
    @Test
    public void memoryBindingTest() {
        // TODO: test memoryBinding
    }

    /**
     * Test the property 'memoryPerCpu'
     */
    @Test
    public void memoryPerCpuTest() {
        // TODO: test memoryPerCpu
    }

    /**
     * Test the property 'memoryPerGpu'
     */
    @Test
    public void memoryPerGpuTest() {
        // TODO: test memoryPerGpu
    }

    /**
     * Test the property 'memoryPerNode'
     */
    @Test
    public void memoryPerNodeTest() {
        // TODO: test memoryPerNode
    }

    /**
     * Test the property 'minimumCpusPerNode'
     */
    @Test
    public void minimumCpusPerNodeTest() {
        // TODO: test minimumCpusPerNode
    }

    /**
     * Test the property 'minimumNodes'
     */
    @Test
    public void minimumNodesTest() {
        // TODO: test minimumNodes
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nice'
     */
    @Test
    public void niceTest() {
        // TODO: test nice
    }

    /**
     * Test the property 'noKill'
     */
    @Test
    public void noKillTest() {
        // TODO: test noKill
    }

    /**
     * Test the property 'nodes'
     */
    @Test
    public void nodesTest() {
        // TODO: test nodes
    }

    /**
     * Test the property 'openMode'
     */
    @Test
    public void openModeTest() {
        // TODO: test openMode
    }

    /**
     * Test the property 'partition'
     */
    @Test
    public void partitionTest() {
        // TODO: test partition
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'qos'
     */
    @Test
    public void qosTest() {
        // TODO: test qos
    }

    /**
     * Test the property 'requeue'
     */
    @Test
    public void requeueTest() {
        // TODO: test requeue
    }

    /**
     * Test the property 'reservation'
     */
    @Test
    public void reservationTest() {
        // TODO: test reservation
    }

    /**
     * Test the property 'signal'
     */
    @Test
    public void signalTest() {
        // TODO: test signal
    }

    /**
     * Test the property 'socketsPerNode'
     */
    @Test
    public void socketsPerNodeTest() {
        // TODO: test socketsPerNode
    }

    /**
     * Test the property 'spreadJob'
     */
    @Test
    public void spreadJobTest() {
        // TODO: test spreadJob
    }

    /**
     * Test the property 'standardError'
     */
    @Test
    public void standardErrorTest() {
        // TODO: test standardError
    }

    /**
     * Test the property 'standardIn'
     */
    @Test
    public void standardInTest() {
        // TODO: test standardIn
    }

    /**
     * Test the property 'standardOut'
     */
    @Test
    public void standardOutTest() {
        // TODO: test standardOut
    }

    /**
     * Test the property 'tasks'
     */
    @Test
    public void tasksTest() {
        // TODO: test tasks
    }

    /**
     * Test the property 'tasksPerCore'
     */
    @Test
    public void tasksPerCoreTest() {
        // TODO: test tasksPerCore
    }

    /**
     * Test the property 'tasksPerNode'
     */
    @Test
    public void tasksPerNodeTest() {
        // TODO: test tasksPerNode
    }

    /**
     * Test the property 'tasksPerSocket'
     */
    @Test
    public void tasksPerSocketTest() {
        // TODO: test tasksPerSocket
    }

    /**
     * Test the property 'threadSpecification'
     */
    @Test
    public void threadSpecificationTest() {
        // TODO: test threadSpecification
    }

    /**
     * Test the property 'threadsPerCore'
     */
    @Test
    public void threadsPerCoreTest() {
        // TODO: test threadsPerCore
    }

    /**
     * Test the property 'timeLimit'
     */
    @Test
    public void timeLimitTest() {
        // TODO: test timeLimit
    }

    /**
     * Test the property 'timeMinimum'
     */
    @Test
    public void timeMinimumTest() {
        // TODO: test timeMinimum
    }

    /**
     * Test the property 'waitAllNodes'
     */
    @Test
    public void waitAllNodesTest() {
        // TODO: test waitAllNodes
    }

    /**
     * Test the property 'wckey'
     */
    @Test
    public void wckeyTest() {
        // TODO: test wckey
    }

}
