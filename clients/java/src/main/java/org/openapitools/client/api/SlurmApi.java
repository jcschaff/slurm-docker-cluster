/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Dbv0037AccountInfo;
import org.openapitools.client.model.Dbv0037AccountResponse;
import org.openapitools.client.model.Dbv0037AssociationsInfo;
import org.openapitools.client.model.Dbv0037ClusterInfo;
import org.openapitools.client.model.Dbv0037ConfigInfo;
import org.openapitools.client.model.Dbv0037ConfigResponse;
import org.openapitools.client.model.Dbv0037Diag;
import org.openapitools.client.model.Dbv0037JobInfo;
import org.openapitools.client.model.Dbv0037QosInfo;
import org.openapitools.client.model.Dbv0037ResponseAccountDelete;
import org.openapitools.client.model.Dbv0037ResponseAssociationDelete;
import org.openapitools.client.model.Dbv0037ResponseAssociations;
import org.openapitools.client.model.Dbv0037ResponseClusterAdd;
import org.openapitools.client.model.Dbv0037ResponseClusterDelete;
import org.openapitools.client.model.Dbv0037ResponseQosDelete;
import org.openapitools.client.model.Dbv0037ResponseTres;
import org.openapitools.client.model.Dbv0037ResponseUserDelete;
import org.openapitools.client.model.Dbv0037ResponseUserUpdate;
import org.openapitools.client.model.Dbv0037ResponseWckeyAdd;
import org.openapitools.client.model.Dbv0037ResponseWckeyDelete;
import org.openapitools.client.model.Dbv0037TresInfo;
import org.openapitools.client.model.Dbv0037UserInfo;
import org.openapitools.client.model.Dbv0037WckeyInfo;
import org.openapitools.client.model.V0037Diag;
import org.openapitools.client.model.V0037JobProperties;
import org.openapitools.client.model.V0037JobSubmission;
import org.openapitools.client.model.V0037JobSubmissionResponse;
import org.openapitools.client.model.V0037JobsResponse;
import org.openapitools.client.model.V0037NodesResponse;
import org.openapitools.client.model.V0037PartitionsResponse;
import org.openapitools.client.model.V0037Pings;
import org.openapitools.client.model.V0037ReservationsResponse;
import org.openapitools.client.model.V0037Signal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlurmApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SlurmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SlurmApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for slurmctldCancelJob
     * @param jobId Slurm Job ID (required)
     * @param signal signal to send to job (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job cancelled or sent signal </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldCancelJobCall(String jobId, V0037Signal signal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/job/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (signal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signal", signal));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldCancelJobValidateBeforeCall(String jobId, V0037Signal signal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling slurmctldCancelJob(Async)");
        }

        return slurmctldCancelJobCall(jobId, signal, _callback);

    }

    /**
     * cancel or signal job
     * 
     * @param jobId Slurm Job ID (required)
     * @param signal signal to send to job (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job cancelled or sent signal </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public void slurmctldCancelJob(String jobId, V0037Signal signal) throws ApiException {
        slurmctldCancelJobWithHttpInfo(jobId, signal);
    }

    /**
     * cancel or signal job
     * 
     * @param jobId Slurm Job ID (required)
     * @param signal signal to send to job (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job cancelled or sent signal </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> slurmctldCancelJobWithHttpInfo(String jobId, V0037Signal signal) throws ApiException {
        okhttp3.Call localVarCall = slurmctldCancelJobValidateBeforeCall(jobId, signal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * cancel or signal job (asynchronously)
     * 
     * @param jobId Slurm Job ID (required)
     * @param signal signal to send to job (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job cancelled or sent signal </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldCancelJobAsync(String jobId, V0037Signal signal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldCancelJobValidateBeforeCall(jobId, signal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldDiag
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> diagnostic results </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldDiagCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/diag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldDiagValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmctldDiagCall(_callback);

    }

    /**
     * get diagnostics
     * 
     * @return V0037Diag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> diagnostic results </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public V0037Diag slurmctldDiag() throws ApiException {
        ApiResponse<V0037Diag> localVarResp = slurmctldDiagWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * get diagnostics
     * 
     * @return ApiResponse&lt;V0037Diag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> diagnostic results </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037Diag> slurmctldDiagWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmctldDiagValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<V0037Diag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get diagnostics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> diagnostic results </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldDiagAsync(final ApiCallback<V0037Diag> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldDiagValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<V0037Diag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetJob
     * @param jobId Slurm JobID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job matching JobId not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetJobCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/job/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetJobValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling slurmctldGetJob(Async)");
        }

        return slurmctldGetJobCall(jobId, _callback);

    }

    /**
     * get job info
     * 
     * @param jobId Slurm JobID (required)
     * @return V0037JobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job matching JobId not found </td><td>  -  </td></tr>
     </table>
     */
    public V0037JobsResponse slurmctldGetJob(String jobId) throws ApiException {
        ApiResponse<V0037JobsResponse> localVarResp = slurmctldGetJobWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * get job info
     * 
     * @param jobId Slurm JobID (required)
     * @return ApiResponse&lt;V0037JobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job matching JobId not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037JobsResponse> slurmctldGetJobWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<V0037JobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get job info (asynchronously)
     * 
     * @param jobId Slurm JobID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job matching JobId not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetJobAsync(String jobId, final ApiCallback<V0037JobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<V0037JobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetJobs
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetJobsCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetJobsValidateBeforeCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        return slurmctldGetJobsCall(updateTime, _callback);

    }

    /**
     * get list of jobs
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return V0037JobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public V0037JobsResponse slurmctldGetJobs(Long updateTime) throws ApiException {
        ApiResponse<V0037JobsResponse> localVarResp = slurmctldGetJobsWithHttpInfo(updateTime);
        return localVarResp.getData();
    }

    /**
     * get list of jobs
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return ApiResponse&lt;V0037JobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037JobsResponse> slurmctldGetJobsWithHttpInfo(Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetJobsValidateBeforeCall(updateTime, null);
        Type localVarReturnType = new TypeToken<V0037JobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get list of jobs (asynchronously)
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job(s) information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetJobsAsync(Long updateTime, final ApiCallback<V0037JobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetJobsValidateBeforeCall(updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037JobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetNode
     * @param nodeName Slurm Node Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> node not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetNodeCall(String nodeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/node/{node_name}"
            .replace("{" + "node_name" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetNodeValidateBeforeCall(String nodeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling slurmctldGetNode(Async)");
        }

        return slurmctldGetNodeCall(nodeName, _callback);

    }

    /**
     * get node info
     * 
     * @param nodeName Slurm Node Name (required)
     * @return V0037NodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> node not found </td><td>  -  </td></tr>
     </table>
     */
    public V0037NodesResponse slurmctldGetNode(String nodeName) throws ApiException {
        ApiResponse<V0037NodesResponse> localVarResp = slurmctldGetNodeWithHttpInfo(nodeName);
        return localVarResp.getData();
    }

    /**
     * get node info
     * 
     * @param nodeName Slurm Node Name (required)
     * @return ApiResponse&lt;V0037NodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> node not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037NodesResponse> slurmctldGetNodeWithHttpInfo(String nodeName) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetNodeValidateBeforeCall(nodeName, null);
        Type localVarReturnType = new TypeToken<V0037NodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get node info (asynchronously)
     * 
     * @param nodeName Slurm Node Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> node not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetNodeAsync(String nodeName, final ApiCallback<V0037NodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetNodeValidateBeforeCall(nodeName, _callback);
        Type localVarReturnType = new TypeToken<V0037NodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetNodes
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no nodes in cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetNodesCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetNodesValidateBeforeCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        return slurmctldGetNodesCall(updateTime, _callback);

    }

    /**
     * get all node info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return V0037NodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no nodes in cluster </td><td>  -  </td></tr>
     </table>
     */
    public V0037NodesResponse slurmctldGetNodes(Long updateTime) throws ApiException {
        ApiResponse<V0037NodesResponse> localVarResp = slurmctldGetNodesWithHttpInfo(updateTime);
        return localVarResp.getData();
    }

    /**
     * get all node info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return ApiResponse&lt;V0037NodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no nodes in cluster </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037NodesResponse> slurmctldGetNodesWithHttpInfo(Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetNodesValidateBeforeCall(updateTime, null);
        Type localVarReturnType = new TypeToken<V0037NodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get all node info (asynchronously)
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> node information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no nodes in cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetNodesAsync(Long updateTime, final ApiCallback<V0037NodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetNodesValidateBeforeCall(updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037NodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetPartition
     * @param partitionName Slurm Partition Name (required)
     * @param updateTime Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetPartitionCall(String partitionName, Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/partition/{partition_name}"
            .replace("{" + "partition_name" + "}", localVarApiClient.escapeString(partitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetPartitionValidateBeforeCall(String partitionName, Long updateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionName' is set
        if (partitionName == null) {
            throw new ApiException("Missing the required parameter 'partitionName' when calling slurmctldGetPartition(Async)");
        }

        return slurmctldGetPartitionCall(partitionName, updateTime, _callback);

    }

    /**
     * get partition info
     * 
     * @param partitionName Slurm Partition Name (required)
     * @param updateTime Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time. (optional)
     * @return V0037PartitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public V0037PartitionsResponse slurmctldGetPartition(String partitionName, Long updateTime) throws ApiException {
        ApiResponse<V0037PartitionsResponse> localVarResp = slurmctldGetPartitionWithHttpInfo(partitionName, updateTime);
        return localVarResp.getData();
    }

    /**
     * get partition info
     * 
     * @param partitionName Slurm Partition Name (required)
     * @param updateTime Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time. (optional)
     * @return ApiResponse&lt;V0037PartitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037PartitionsResponse> slurmctldGetPartitionWithHttpInfo(String partitionName, Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetPartitionValidateBeforeCall(partitionName, updateTime, null);
        Type localVarReturnType = new TypeToken<V0037PartitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get partition info (asynchronously)
     * 
     * @param partitionName Slurm Partition Name (required)
     * @param updateTime Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetPartitionAsync(String partitionName, Long updateTime, final ApiCallback<V0037PartitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetPartitionValidateBeforeCall(partitionName, updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037PartitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetPartitions
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetPartitionsCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/partitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetPartitionsValidateBeforeCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        return slurmctldGetPartitionsCall(updateTime, _callback);

    }

    /**
     * get all partition info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return V0037PartitionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public V0037PartitionsResponse slurmctldGetPartitions(Long updateTime) throws ApiException {
        ApiResponse<V0037PartitionsResponse> localVarResp = slurmctldGetPartitionsWithHttpInfo(updateTime);
        return localVarResp.getData();
    }

    /**
     * get all partition info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return ApiResponse&lt;V0037PartitionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037PartitionsResponse> slurmctldGetPartitionsWithHttpInfo(Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetPartitionsValidateBeforeCall(updateTime, null);
        Type localVarReturnType = new TypeToken<V0037PartitionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get all partition info (asynchronously)
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> partition information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no partitions found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetPartitionsAsync(Long updateTime, final ApiCallback<V0037PartitionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetPartitionsValidateBeforeCall(updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037PartitionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetReservation
     * @param reservationName Slurm Reservation Name (required)
     * @param updateTime Filter if no reservation (not limited to reservation in URL) changed since update_time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetReservationCall(String reservationName, Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/reservation/{reservation_name}"
            .replace("{" + "reservation_name" + "}", localVarApiClient.escapeString(reservationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetReservationValidateBeforeCall(String reservationName, Long updateTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationName' is set
        if (reservationName == null) {
            throw new ApiException("Missing the required parameter 'reservationName' when calling slurmctldGetReservation(Async)");
        }

        return slurmctldGetReservationCall(reservationName, updateTime, _callback);

    }

    /**
     * get reservation info
     * 
     * @param reservationName Slurm Reservation Name (required)
     * @param updateTime Filter if no reservation (not limited to reservation in URL) changed since update_time. (optional)
     * @return V0037ReservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public V0037ReservationsResponse slurmctldGetReservation(String reservationName, Long updateTime) throws ApiException {
        ApiResponse<V0037ReservationsResponse> localVarResp = slurmctldGetReservationWithHttpInfo(reservationName, updateTime);
        return localVarResp.getData();
    }

    /**
     * get reservation info
     * 
     * @param reservationName Slurm Reservation Name (required)
     * @param updateTime Filter if no reservation (not limited to reservation in URL) changed since update_time. (optional)
     * @return ApiResponse&lt;V0037ReservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037ReservationsResponse> slurmctldGetReservationWithHttpInfo(String reservationName, Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetReservationValidateBeforeCall(reservationName, updateTime, null);
        Type localVarReturnType = new TypeToken<V0037ReservationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get reservation info (asynchronously)
     * 
     * @param reservationName Slurm Reservation Name (required)
     * @param updateTime Filter if no reservation (not limited to reservation in URL) changed since update_time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetReservationAsync(String reservationName, Long updateTime, final ApiCallback<V0037ReservationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetReservationValidateBeforeCall(reservationName, updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037ReservationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldGetReservations
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetReservationsCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_time", updateTime));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldGetReservationsValidateBeforeCall(Long updateTime, final ApiCallback _callback) throws ApiException {
        return slurmctldGetReservationsCall(updateTime, _callback);

    }

    /**
     * get all reservation info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return V0037ReservationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public V0037ReservationsResponse slurmctldGetReservations(Long updateTime) throws ApiException {
        ApiResponse<V0037ReservationsResponse> localVarResp = slurmctldGetReservationsWithHttpInfo(updateTime);
        return localVarResp.getData();
    }

    /**
     * get all reservation info
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @return ApiResponse&lt;V0037ReservationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037ReservationsResponse> slurmctldGetReservationsWithHttpInfo(Long updateTime) throws ApiException {
        okhttp3.Call localVarCall = slurmctldGetReservationsValidateBeforeCall(updateTime, null);
        Type localVarReturnType = new TypeToken<V0037ReservationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get all reservation info (asynchronously)
     * 
     * @param updateTime Filter if changed since update_time. Use of this parameter can result in faster replies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reservation information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> no reservations found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldGetReservationsAsync(Long updateTime, final ApiCallback<V0037ReservationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldGetReservationsValidateBeforeCall(updateTime, _callback);
        Type localVarReturnType = new TypeToken<V0037ReservationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldPing
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results of ping test </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldPingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldPingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmctldPingCall(_callback);

    }

    /**
     * ping test
     * 
     * @return V0037Pings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results of ping test </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public V0037Pings slurmctldPing() throws ApiException {
        ApiResponse<V0037Pings> localVarResp = slurmctldPingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * ping test
     * 
     * @return ApiResponse&lt;V0037Pings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results of ping test </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037Pings> slurmctldPingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmctldPingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<V0037Pings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ping test (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> results of ping test </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unable to request ping test </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldPingAsync(final ApiCallback<V0037Pings> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldPingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<V0037Pings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldSubmitJob
     * @param v0037JobSubmission submit new job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job submitted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldSubmitJobCall(V0037JobSubmission v0037JobSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v0037JobSubmission;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/job/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldSubmitJobValidateBeforeCall(V0037JobSubmission v0037JobSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'v0037JobSubmission' is set
        if (v0037JobSubmission == null) {
            throw new ApiException("Missing the required parameter 'v0037JobSubmission' when calling slurmctldSubmitJob(Async)");
        }

        return slurmctldSubmitJobCall(v0037JobSubmission, _callback);

    }

    /**
     * submit new job
     * 
     * @param v0037JobSubmission submit new job (required)
     * @return V0037JobSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job submitted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job rejected </td><td>  -  </td></tr>
     </table>
     */
    public V0037JobSubmissionResponse slurmctldSubmitJob(V0037JobSubmission v0037JobSubmission) throws ApiException {
        ApiResponse<V0037JobSubmissionResponse> localVarResp = slurmctldSubmitJobWithHttpInfo(v0037JobSubmission);
        return localVarResp.getData();
    }

    /**
     * submit new job
     * 
     * @param v0037JobSubmission submit new job (required)
     * @return ApiResponse&lt;V0037JobSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job submitted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job rejected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V0037JobSubmissionResponse> slurmctldSubmitJobWithHttpInfo(V0037JobSubmission v0037JobSubmission) throws ApiException {
        okhttp3.Call localVarCall = slurmctldSubmitJobValidateBeforeCall(v0037JobSubmission, null);
        Type localVarReturnType = new TypeToken<V0037JobSubmissionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * submit new job (asynchronously)
     * 
     * @param v0037JobSubmission submit new job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job submitted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> job rejected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldSubmitJobAsync(V0037JobSubmission v0037JobSubmission, final ApiCallback<V0037JobSubmissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldSubmitJobValidateBeforeCall(v0037JobSubmission, _callback);
        Type localVarReturnType = new TypeToken<V0037JobSubmissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmctldUpdateJob
     * @param jobId Slurm Job ID (required)
     * @param v0037JobProperties update job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldUpdateJobCall(String jobId, V0037JobProperties v0037JobProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v0037JobProperties;

        // create path and map variables
        String localVarPath = "/slurm/v0.0.37/job/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmctldUpdateJobValidateBeforeCall(String jobId, V0037JobProperties v0037JobProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling slurmctldUpdateJob(Async)");
        }

        // verify the required parameter 'v0037JobProperties' is set
        if (v0037JobProperties == null) {
            throw new ApiException("Missing the required parameter 'v0037JobProperties' when calling slurmctldUpdateJob(Async)");
        }

        return slurmctldUpdateJobCall(jobId, v0037JobProperties, _callback);

    }

    /**
     * update job
     * 
     * @param jobId Slurm Job ID (required)
     * @param v0037JobProperties update job (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public void slurmctldUpdateJob(String jobId, V0037JobProperties v0037JobProperties) throws ApiException {
        slurmctldUpdateJobWithHttpInfo(jobId, v0037JobProperties);
    }

    /**
     * update job
     * 
     * @param jobId Slurm Job ID (required)
     * @param v0037JobProperties update job (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> slurmctldUpdateJobWithHttpInfo(String jobId, V0037JobProperties v0037JobProperties) throws ApiException {
        okhttp3.Call localVarCall = slurmctldUpdateJobValidateBeforeCall(jobId, v0037JobProperties, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update job (asynchronously)
     * 
     * @param jobId Slurm Job ID (required)
     * @param v0037JobProperties update job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> job information </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmctldUpdateJobAsync(String jobId, V0037JobProperties v0037JobProperties, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmctldUpdateJobValidateBeforeCall(jobId, v0037JobProperties, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdAddClusters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdAddClustersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdAddClustersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdAddClustersCall(_callback);

    }

    /**
     * Add clusters
     * 
     * @return Dbv0037ResponseClusterAdd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add cluster </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseClusterAdd slurmdbdAddClusters() throws ApiException {
        ApiResponse<Dbv0037ResponseClusterAdd> localVarResp = slurmdbdAddClustersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Add clusters
     * 
     * @return ApiResponse&lt;Dbv0037ResponseClusterAdd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add cluster </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseClusterAdd> slurmdbdAddClustersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdAddClustersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseClusterAdd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add clusters (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdAddClustersAsync(final ApiCallback<Dbv0037ResponseClusterAdd> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdAddClustersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseClusterAdd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdAddWckeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add wckey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdAddWckeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/wckeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdAddWckeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdAddWckeysCall(_callback);

    }

    /**
     * Add wckeys
     * 
     * @return Dbv0037ResponseWckeyAdd
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add wckey </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseWckeyAdd slurmdbdAddWckeys() throws ApiException {
        ApiResponse<Dbv0037ResponseWckeyAdd> localVarResp = slurmdbdAddWckeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Add wckeys
     * 
     * @return ApiResponse&lt;Dbv0037ResponseWckeyAdd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add wckey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseWckeyAdd> slurmdbdAddWckeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdAddWckeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseWckeyAdd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add wckeys (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add wckey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdAddWckeysAsync(final ApiCallback<Dbv0037ResponseWckeyAdd> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdAddWckeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseWckeyAdd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteAccount
     * @param accountName Slurm Account Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteAccountCall(String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/account/{account_name}"
            .replace("{" + "account_name" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteAccountValidateBeforeCall(String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling slurmdbdDeleteAccount(Async)");
        }

        return slurmdbdDeleteAccountCall(accountName, _callback);

    }

    /**
     * Delete account
     * 
     * @param accountName Slurm Account Name (required)
     * @return Dbv0037ResponseAccountDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete account </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseAccountDelete slurmdbdDeleteAccount(String accountName) throws ApiException {
        ApiResponse<Dbv0037ResponseAccountDelete> localVarResp = slurmdbdDeleteAccountWithHttpInfo(accountName);
        return localVarResp.getData();
    }

    /**
     * Delete account
     * 
     * @param accountName Slurm Account Name (required)
     * @return ApiResponse&lt;Dbv0037ResponseAccountDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseAccountDelete> slurmdbdDeleteAccountWithHttpInfo(String accountName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteAccountValidateBeforeCall(accountName, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAccountDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete account (asynchronously)
     * 
     * @param accountName Slurm Account Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteAccountAsync(String accountName, final ApiCallback<Dbv0037ResponseAccountDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteAccountValidateBeforeCall(accountName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAccountDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteAssociation
     * @param account Account name (required)
     * @param user User name (required)
     * @param cluster Cluster name (optional)
     * @param partition Partition Name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found or unable to delete association </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteAssociationCall(String account, String user, String cluster, String partition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/association";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteAssociationValidateBeforeCall(String account, String user, String cluster, String partition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling slurmdbdDeleteAssociation(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling slurmdbdDeleteAssociation(Async)");
        }

        return slurmdbdDeleteAssociationCall(account, user, cluster, partition, _callback);

    }

    /**
     * Delete association
     * 
     * @param account Account name (required)
     * @param user User name (required)
     * @param cluster Cluster name (optional)
     * @param partition Partition Name (optional)
     * @return Dbv0037ResponseAssociationDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found or unable to delete association </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseAssociationDelete slurmdbdDeleteAssociation(String account, String user, String cluster, String partition) throws ApiException {
        ApiResponse<Dbv0037ResponseAssociationDelete> localVarResp = slurmdbdDeleteAssociationWithHttpInfo(account, user, cluster, partition);
        return localVarResp.getData();
    }

    /**
     * Delete association
     * 
     * @param account Account name (required)
     * @param user User name (required)
     * @param cluster Cluster name (optional)
     * @param partition Partition Name (optional)
     * @return ApiResponse&lt;Dbv0037ResponseAssociationDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found or unable to delete association </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseAssociationDelete> slurmdbdDeleteAssociationWithHttpInfo(String account, String user, String cluster, String partition) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteAssociationValidateBeforeCall(account, user, cluster, partition, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAssociationDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete association (asynchronously)
     * 
     * @param account Account name (required)
     * @param user User name (required)
     * @param cluster Cluster name (optional)
     * @param partition Partition Name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found or unable to delete association </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteAssociationAsync(String account, String user, String cluster, String partition, final ApiCallback<Dbv0037ResponseAssociationDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteAssociationValidateBeforeCall(account, user, cluster, partition, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAssociationDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteCluster
     * @param clusterName Slurm cluster name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found or unable to delete cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteClusterCall(String clusterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/cluster/{cluster_name}"
            .replace("{" + "cluster_name" + "}", localVarApiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteClusterValidateBeforeCall(String clusterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling slurmdbdDeleteCluster(Async)");
        }

        return slurmdbdDeleteClusterCall(clusterName, _callback);

    }

    /**
     * Delete cluster
     * 
     * @param clusterName Slurm cluster name (required)
     * @return Dbv0037ResponseClusterDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found or unable to delete cluster </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseClusterDelete slurmdbdDeleteCluster(String clusterName) throws ApiException {
        ApiResponse<Dbv0037ResponseClusterDelete> localVarResp = slurmdbdDeleteClusterWithHttpInfo(clusterName);
        return localVarResp.getData();
    }

    /**
     * Delete cluster
     * 
     * @param clusterName Slurm cluster name (required)
     * @return ApiResponse&lt;Dbv0037ResponseClusterDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found or unable to delete cluster </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseClusterDelete> slurmdbdDeleteClusterWithHttpInfo(String clusterName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteClusterValidateBeforeCall(clusterName, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseClusterDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete cluster (asynchronously)
     * 
     * @param clusterName Slurm cluster name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found or unable to delete cluster </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteClusterAsync(String clusterName, final ApiCallback<Dbv0037ResponseClusterDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteClusterValidateBeforeCall(clusterName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseClusterDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteQos
     * @param qosName Slurm QOS Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete qos </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete QOS </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteQosCall(String qosName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/qos/{qos_name}"
            .replace("{" + "qos_name" + "}", localVarApiClient.escapeString(qosName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteQosValidateBeforeCall(String qosName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qosName' is set
        if (qosName == null) {
            throw new ApiException("Missing the required parameter 'qosName' when calling slurmdbdDeleteQos(Async)");
        }

        return slurmdbdDeleteQosCall(qosName, _callback);

    }

    /**
     * Delete QOS
     * 
     * @param qosName Slurm QOS Name (required)
     * @return Dbv0037ResponseQosDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete qos </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete QOS </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseQosDelete slurmdbdDeleteQos(String qosName) throws ApiException {
        ApiResponse<Dbv0037ResponseQosDelete> localVarResp = slurmdbdDeleteQosWithHttpInfo(qosName);
        return localVarResp.getData();
    }

    /**
     * Delete QOS
     * 
     * @param qosName Slurm QOS Name (required)
     * @return ApiResponse&lt;Dbv0037ResponseQosDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete qos </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete QOS </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseQosDelete> slurmdbdDeleteQosWithHttpInfo(String qosName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteQosValidateBeforeCall(qosName, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseQosDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete QOS (asynchronously)
     * 
     * @param qosName Slurm QOS Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete qos </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to delete QOS </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteQosAsync(String qosName, final ApiCallback<Dbv0037ResponseQosDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteQosValidateBeforeCall(qosName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseQosDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteUser
     * @param userName Slurm User Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or unable to delete user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/user/{user_name}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling slurmdbdDeleteUser(Async)");
        }

        return slurmdbdDeleteUserCall(userName, _callback);

    }

    /**
     * Delete user
     * 
     * @param userName Slurm User Name (required)
     * @return Dbv0037ResponseUserDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or unable to delete user </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseUserDelete slurmdbdDeleteUser(String userName) throws ApiException {
        ApiResponse<Dbv0037ResponseUserDelete> localVarResp = slurmdbdDeleteUserWithHttpInfo(userName);
        return localVarResp.getData();
    }

    /**
     * Delete user
     * 
     * @param userName Slurm User Name (required)
     * @return ApiResponse&lt;Dbv0037ResponseUserDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or unable to delete user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseUserDelete> slurmdbdDeleteUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseUserDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete user (asynchronously)
     * 
     * @param userName Slurm User Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or unable to delete user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteUserAsync(String userName, final ApiCallback<Dbv0037ResponseUserDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseUserDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDeleteWckey
     * @param wckey Slurm wckey name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found or unable to delete wckey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteWckeyCall(String wckey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/wckey/{wckey}"
            .replace("{" + "wckey" + "}", localVarApiClient.escapeString(wckey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDeleteWckeyValidateBeforeCall(String wckey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wckey' is set
        if (wckey == null) {
            throw new ApiException("Missing the required parameter 'wckey' when calling slurmdbdDeleteWckey(Async)");
        }

        return slurmdbdDeleteWckeyCall(wckey, _callback);

    }

    /**
     * Delete wckey
     * 
     * @param wckey Slurm wckey name (required)
     * @return Dbv0037ResponseWckeyDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found or unable to delete wckey </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseWckeyDelete slurmdbdDeleteWckey(String wckey) throws ApiException {
        ApiResponse<Dbv0037ResponseWckeyDelete> localVarResp = slurmdbdDeleteWckeyWithHttpInfo(wckey);
        return localVarResp.getData();
    }

    /**
     * Delete wckey
     * 
     * @param wckey Slurm wckey name (required)
     * @return ApiResponse&lt;Dbv0037ResponseWckeyDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found or unable to delete wckey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseWckeyDelete> slurmdbdDeleteWckeyWithHttpInfo(String wckey) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDeleteWckeyValidateBeforeCall(wckey, null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseWckeyDelete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete wckey (asynchronously)
     * 
     * @param wckey Slurm wckey name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found or unable to delete wckey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDeleteWckeyAsync(String wckey, final ApiCallback<Dbv0037ResponseWckeyDelete> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDeleteWckeyValidateBeforeCall(wckey, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseWckeyDelete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdDiag
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dictionary of statistics </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query diagnostics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDiagCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/diag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdDiagValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdDiagCall(_callback);

    }

    /**
     * Get slurmdb diagnostics
     * 
     * @return Dbv0037Diag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dictionary of statistics </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query diagnostics </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037Diag slurmdbdDiag() throws ApiException {
        ApiResponse<Dbv0037Diag> localVarResp = slurmdbdDiagWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get slurmdb diagnostics
     * 
     * @return ApiResponse&lt;Dbv0037Diag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dictionary of statistics </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query diagnostics </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037Diag> slurmdbdDiagWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdDiagValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037Diag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get slurmdb diagnostics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dictionary of statistics </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query diagnostics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdDiagAsync(final ApiCallback<Dbv0037Diag> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdDiagValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037Diag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetAccount
     * @param accountName Slurm Account Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAccountCall(String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/account/{account_name}"
            .replace("{" + "account_name" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetAccountValidateBeforeCall(String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling slurmdbdGetAccount(Async)");
        }

        return slurmdbdGetAccountCall(accountName, _callback);

    }

    /**
     * Get account info
     * 
     * @param accountName Slurm Account Name (required)
     * @return Dbv0037AccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037AccountInfo slurmdbdGetAccount(String accountName) throws ApiException {
        ApiResponse<Dbv0037AccountInfo> localVarResp = slurmdbdGetAccountWithHttpInfo(accountName);
        return localVarResp.getData();
    }

    /**
     * Get account info
     * 
     * @param accountName Slurm Account Name (required)
     * @return ApiResponse&lt;Dbv0037AccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037AccountInfo> slurmdbdGetAccountWithHttpInfo(String accountName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetAccountValidateBeforeCall(accountName, null);
        Type localVarReturnType = new TypeToken<Dbv0037AccountInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account info (asynchronously)
     * 
     * @param accountName Slurm Account Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAccountAsync(String accountName, final ApiCallback<Dbv0037AccountInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetAccountValidateBeforeCall(accountName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037AccountInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetAccountsCall(_callback);

    }

    /**
     * Get account list
     * 
     * @return Dbv0037AccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037AccountInfo slurmdbdGetAccounts() throws ApiException {
        ApiResponse<Dbv0037AccountInfo> localVarResp = slurmdbdGetAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get account list
     * 
     * @return ApiResponse&lt;Dbv0037AccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037AccountInfo> slurmdbdGetAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037AccountInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAccountsAsync(final ApiCallback<Dbv0037AccountInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037AccountInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetAssociation
     * @param cluster Cluster name (optional)
     * @param account Account name (optional)
     * @param user User name (optional)
     * @param partition Partition Name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAssociationCall(String cluster, String account, String user, String partition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/association";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetAssociationValidateBeforeCall(String cluster, String account, String user, String partition, final ApiCallback _callback) throws ApiException {
        return slurmdbdGetAssociationCall(cluster, account, user, partition, _callback);

    }

    /**
     * Get association info
     * 
     * @param cluster Cluster name (optional)
     * @param account Account name (optional)
     * @param user User name (optional)
     * @param partition Partition Name (optional)
     * @return Dbv0037AssociationsInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037AssociationsInfo slurmdbdGetAssociation(String cluster, String account, String user, String partition) throws ApiException {
        ApiResponse<Dbv0037AssociationsInfo> localVarResp = slurmdbdGetAssociationWithHttpInfo(cluster, account, user, partition);
        return localVarResp.getData();
    }

    /**
     * Get association info
     * 
     * @param cluster Cluster name (optional)
     * @param account Account name (optional)
     * @param user User name (optional)
     * @param partition Partition Name (optional)
     * @return ApiResponse&lt;Dbv0037AssociationsInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037AssociationsInfo> slurmdbdGetAssociationWithHttpInfo(String cluster, String account, String user, String partition) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetAssociationValidateBeforeCall(cluster, account, user, partition, null);
        Type localVarReturnType = new TypeToken<Dbv0037AssociationsInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get association info (asynchronously)
     * 
     * @param cluster Cluster name (optional)
     * @param account Account name (optional)
     * @param user User name (optional)
     * @param partition Partition Name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAssociationAsync(String cluster, String account, String user, String partition, final ApiCallback<Dbv0037AssociationsInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetAssociationValidateBeforeCall(cluster, account, user, partition, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037AssociationsInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetAssociations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAssociationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/associations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetAssociationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetAssociationsCall(_callback);

    }

    /**
     * Get association list
     * 
     * @return Dbv0037AssociationsInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037AssociationsInfo slurmdbdGetAssociations() throws ApiException {
        ApiResponse<Dbv0037AssociationsInfo> localVarResp = slurmdbdGetAssociationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get association list
     * 
     * @return ApiResponse&lt;Dbv0037AssociationsInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037AssociationsInfo> slurmdbdGetAssociationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetAssociationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037AssociationsInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get association list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of associations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Association not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetAssociationsAsync(final ApiCallback<Dbv0037AssociationsInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetAssociationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037AssociationsInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetCluster
     * @param clusterName Slurm cluster name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cluster information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetClusterCall(String clusterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/cluster/{cluster_name}"
            .replace("{" + "cluster_name" + "}", localVarApiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetClusterValidateBeforeCall(String clusterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling slurmdbdGetCluster(Async)");
        }

        return slurmdbdGetClusterCall(clusterName, _callback);

    }

    /**
     * Get cluster info
     * 
     * @param clusterName Slurm cluster name (required)
     * @return Dbv0037ClusterInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cluster information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ClusterInfo slurmdbdGetCluster(String clusterName) throws ApiException {
        ApiResponse<Dbv0037ClusterInfo> localVarResp = slurmdbdGetClusterWithHttpInfo(clusterName);
        return localVarResp.getData();
    }

    /**
     * Get cluster info
     * 
     * @param clusterName Slurm cluster name (required)
     * @return ApiResponse&lt;Dbv0037ClusterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cluster information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ClusterInfo> slurmdbdGetClusterWithHttpInfo(String clusterName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetClusterValidateBeforeCall(clusterName, null);
        Type localVarReturnType = new TypeToken<Dbv0037ClusterInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cluster info (asynchronously)
     * 
     * @param clusterName Slurm cluster name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cluster information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetClusterAsync(String clusterName, final ApiCallback<Dbv0037ClusterInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetClusterValidateBeforeCall(clusterName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037ClusterInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetClusters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetClustersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetClustersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetClustersCall(_callback);

    }

    /**
     * Get cluster list
     * 
     * @return Dbv0037ClusterInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ClusterInfo slurmdbdGetClusters() throws ApiException {
        ApiResponse<Dbv0037ClusterInfo> localVarResp = slurmdbdGetClustersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get cluster list
     * 
     * @return ApiResponse&lt;Dbv0037ClusterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ClusterInfo> slurmdbdGetClustersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetClustersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ClusterInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cluster list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Cluster not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetClustersAsync(final ApiCallback<Dbv0037ClusterInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetClustersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ClusterInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetDbConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> slurmdbd configuration </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to dump config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetDbConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetDbConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetDbConfigCall(_callback);

    }

    /**
     * Dump all configuration information
     * 
     * @return Dbv0037ConfigInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> slurmdbd configuration </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to dump config </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ConfigInfo slurmdbdGetDbConfig() throws ApiException {
        ApiResponse<Dbv0037ConfigInfo> localVarResp = slurmdbdGetDbConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Dump all configuration information
     * 
     * @return ApiResponse&lt;Dbv0037ConfigInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> slurmdbd configuration </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to dump config </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ConfigInfo> slurmdbdGetDbConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetDbConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ConfigInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dump all configuration information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> slurmdbd configuration </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to dump config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetDbConfigAsync(final ApiCallback<Dbv0037ConfigInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetDbConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ConfigInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetJob
     * @param jobId Slurm Job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to find job </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetJobCall(Long jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/job/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetJobValidateBeforeCall(Long jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling slurmdbdGetJob(Async)");
        }

        return slurmdbdGetJobCall(jobId, _callback);

    }

    /**
     * Get job info
     * This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
     * @param jobId Slurm Job ID (required)
     * @return Dbv0037JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to find job </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037JobInfo slurmdbdGetJob(Long jobId) throws ApiException {
        ApiResponse<Dbv0037JobInfo> localVarResp = slurmdbdGetJobWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get job info
     * This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
     * @param jobId Slurm Job ID (required)
     * @return ApiResponse&lt;Dbv0037JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to find job </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037JobInfo> slurmdbdGetJobWithHttpInfo(Long jobId) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<Dbv0037JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job info (asynchronously)
     * This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
     * @param jobId Slurm Job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to find job </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetJobAsync(Long jobId, final ApiCallback<Dbv0037JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetJobs
     * @param submitTime Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param startTime Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param endTime Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param account Comma delimited list of accounts to match (optional)
     * @param association Comma delimited list of associations to match (optional)
     * @param cluster Comma delimited list of cluster to match (optional)
     * @param constraints Comma delimited list of constraints to match (optional)
     * @param cpusMax Number of CPUs high range (optional)
     * @param cpusMin Number of CPUs low range (optional)
     * @param skipSteps Report job step information (optional)
     * @param disableWaitForResult Disable waiting for result from slurmdbd (optional)
     * @param exitCode Exit code of job (optional)
     * @param format Comma delimited list of formats to match (optional)
     * @param group Comma delimited list of groups to match (optional)
     * @param jobName Comma delimited list of job names to match (optional)
     * @param nodesMax Number of nodes high range (optional)
     * @param nodesMin Number of nodes low range (optional)
     * @param partition Comma delimited list of partitions to match (optional)
     * @param qos Comma delimited list of QOS to match (optional)
     * @param reason Comma delimited list of job reasons to match (optional)
     * @param reservation Comma delimited list of reservations to match (optional)
     * @param state Comma delimited list of states to match (optional)
     * @param step Comma delimited list of job steps to match (optional)
     * @param node Comma delimited list of used nodes to match (optional)
     * @param wckey Comma delimited list of wckeys to match (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetJobsCall(String submitTime, String startTime, String endTime, String account, String association, String cluster, String constraints, String cpusMax, String cpusMin, Boolean skipSteps, Boolean disableWaitForResult, String exitCode, String format, String group, String jobName, String nodesMax, String nodesMin, String partition, String qos, String reason, String reservation, String state, String step, String node, String wckey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (submitTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submit_time", submitTime));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (association != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("association", association));
        }

        if (cluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster", cluster));
        }

        if (constraints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constraints", constraints));
        }

        if (cpusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cpus_max", cpusMax));
        }

        if (cpusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cpus_min", cpusMin));
        }

        if (skipSteps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_steps", skipSteps));
        }

        if (disableWaitForResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_wait_for_result", disableWaitForResult));
        }

        if (exitCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exit_code", exitCode));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (jobName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_name", jobName));
        }

        if (nodesMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodes_max", nodesMax));
        }

        if (nodesMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodes_min", nodesMin));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (qos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qos", qos));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (reservation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reservation", reservation));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (step != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step", step));
        }

        if (node != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("node", node));
        }

        if (wckey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wckey", wckey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetJobsValidateBeforeCall(String submitTime, String startTime, String endTime, String account, String association, String cluster, String constraints, String cpusMax, String cpusMin, Boolean skipSteps, Boolean disableWaitForResult, String exitCode, String format, String group, String jobName, String nodesMax, String nodesMin, String partition, String qos, String reason, String reservation, String state, String step, String node, String wckey, final ApiCallback _callback) throws ApiException {
        return slurmdbdGetJobsCall(submitTime, startTime, endTime, account, association, cluster, constraints, cpusMax, cpusMin, skipSteps, disableWaitForResult, exitCode, format, group, jobName, nodesMax, nodesMin, partition, qos, reason, reservation, state, step, node, wckey, _callback);

    }

    /**
     * Get job list
     * 
     * @param submitTime Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param startTime Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param endTime Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param account Comma delimited list of accounts to match (optional)
     * @param association Comma delimited list of associations to match (optional)
     * @param cluster Comma delimited list of cluster to match (optional)
     * @param constraints Comma delimited list of constraints to match (optional)
     * @param cpusMax Number of CPUs high range (optional)
     * @param cpusMin Number of CPUs low range (optional)
     * @param skipSteps Report job step information (optional)
     * @param disableWaitForResult Disable waiting for result from slurmdbd (optional)
     * @param exitCode Exit code of job (optional)
     * @param format Comma delimited list of formats to match (optional)
     * @param group Comma delimited list of groups to match (optional)
     * @param jobName Comma delimited list of job names to match (optional)
     * @param nodesMax Number of nodes high range (optional)
     * @param nodesMin Number of nodes low range (optional)
     * @param partition Comma delimited list of partitions to match (optional)
     * @param qos Comma delimited list of QOS to match (optional)
     * @param reason Comma delimited list of job reasons to match (optional)
     * @param reservation Comma delimited list of reservations to match (optional)
     * @param state Comma delimited list of states to match (optional)
     * @param step Comma delimited list of job steps to match (optional)
     * @param node Comma delimited list of used nodes to match (optional)
     * @param wckey Comma delimited list of wckeys to match (optional)
     * @return Dbv0037JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query jobs </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037JobInfo slurmdbdGetJobs(String submitTime, String startTime, String endTime, String account, String association, String cluster, String constraints, String cpusMax, String cpusMin, Boolean skipSteps, Boolean disableWaitForResult, String exitCode, String format, String group, String jobName, String nodesMax, String nodesMin, String partition, String qos, String reason, String reservation, String state, String step, String node, String wckey) throws ApiException {
        ApiResponse<Dbv0037JobInfo> localVarResp = slurmdbdGetJobsWithHttpInfo(submitTime, startTime, endTime, account, association, cluster, constraints, cpusMax, cpusMin, skipSteps, disableWaitForResult, exitCode, format, group, jobName, nodesMax, nodesMin, partition, qos, reason, reservation, state, step, node, wckey);
        return localVarResp.getData();
    }

    /**
     * Get job list
     * 
     * @param submitTime Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param startTime Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param endTime Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param account Comma delimited list of accounts to match (optional)
     * @param association Comma delimited list of associations to match (optional)
     * @param cluster Comma delimited list of cluster to match (optional)
     * @param constraints Comma delimited list of constraints to match (optional)
     * @param cpusMax Number of CPUs high range (optional)
     * @param cpusMin Number of CPUs low range (optional)
     * @param skipSteps Report job step information (optional)
     * @param disableWaitForResult Disable waiting for result from slurmdbd (optional)
     * @param exitCode Exit code of job (optional)
     * @param format Comma delimited list of formats to match (optional)
     * @param group Comma delimited list of groups to match (optional)
     * @param jobName Comma delimited list of job names to match (optional)
     * @param nodesMax Number of nodes high range (optional)
     * @param nodesMin Number of nodes low range (optional)
     * @param partition Comma delimited list of partitions to match (optional)
     * @param qos Comma delimited list of QOS to match (optional)
     * @param reason Comma delimited list of job reasons to match (optional)
     * @param reservation Comma delimited list of reservations to match (optional)
     * @param state Comma delimited list of states to match (optional)
     * @param step Comma delimited list of job steps to match (optional)
     * @param node Comma delimited list of used nodes to match (optional)
     * @param wckey Comma delimited list of wckeys to match (optional)
     * @return ApiResponse&lt;Dbv0037JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query jobs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037JobInfo> slurmdbdGetJobsWithHttpInfo(String submitTime, String startTime, String endTime, String account, String association, String cluster, String constraints, String cpusMax, String cpusMin, Boolean skipSteps, Boolean disableWaitForResult, String exitCode, String format, String group, String jobName, String nodesMax, String nodesMin, String partition, String qos, String reason, String reservation, String state, String step, String node, String wckey) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetJobsValidateBeforeCall(submitTime, startTime, endTime, account, association, cluster, constraints, cpusMax, cpusMin, skipSteps, disableWaitForResult, exitCode, format, group, jobName, nodesMax, nodesMin, partition, qos, reason, reservation, state, step, node, wckey, null);
        Type localVarReturnType = new TypeToken<Dbv0037JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job list (asynchronously)
     * 
     * @param submitTime Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param startTime Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param endTime Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional)
     * @param account Comma delimited list of accounts to match (optional)
     * @param association Comma delimited list of associations to match (optional)
     * @param cluster Comma delimited list of cluster to match (optional)
     * @param constraints Comma delimited list of constraints to match (optional)
     * @param cpusMax Number of CPUs high range (optional)
     * @param cpusMin Number of CPUs low range (optional)
     * @param skipSteps Report job step information (optional)
     * @param disableWaitForResult Disable waiting for result from slurmdbd (optional)
     * @param exitCode Exit code of job (optional)
     * @param format Comma delimited list of formats to match (optional)
     * @param group Comma delimited list of groups to match (optional)
     * @param jobName Comma delimited list of job names to match (optional)
     * @param nodesMax Number of nodes high range (optional)
     * @param nodesMin Number of nodes low range (optional)
     * @param partition Comma delimited list of partitions to match (optional)
     * @param qos Comma delimited list of QOS to match (optional)
     * @param reason Comma delimited list of job reasons to match (optional)
     * @param reservation Comma delimited list of reservations to match (optional)
     * @param state Comma delimited list of states to match (optional)
     * @param step Comma delimited list of job steps to match (optional)
     * @param node Comma delimited list of used nodes to match (optional)
     * @param wckey Comma delimited list of wckeys to match (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to query jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetJobsAsync(String submitTime, String startTime, String endTime, String account, String association, String cluster, String constraints, String cpusMax, String cpusMin, Boolean skipSteps, Boolean disableWaitForResult, String exitCode, String format, String group, String jobName, String nodesMax, String nodesMin, String partition, String qos, String reason, String reservation, String state, String step, String node, String wckey, final ApiCallback<Dbv0037JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetJobsValidateBeforeCall(submitTime, startTime, endTime, account, association, cluster, constraints, cpusMax, cpusMin, skipSteps, disableWaitForResult, exitCode, format, group, jobName, nodesMax, nodesMin, partition, qos, reason, reservation, state, step, node, wckey, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetQos
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QOS&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetQosCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/qos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetQosValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetQosCall(_callback);

    }

    /**
     * Get QOS list
     * 
     * @return Dbv0037QosInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QOS&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037QosInfo slurmdbdGetQos() throws ApiException {
        ApiResponse<Dbv0037QosInfo> localVarResp = slurmdbdGetQosWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get QOS list
     * 
     * @return ApiResponse&lt;Dbv0037QosInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QOS&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037QosInfo> slurmdbdGetQosWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetQosValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037QosInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get QOS list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QOS&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetQosAsync(final ApiCallback<Dbv0037QosInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetQosValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037QosInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetSingleQos
     * @param qosName Slurm QOS Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QOS information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetSingleQosCall(String qosName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/qos/{qos_name}"
            .replace("{" + "qos_name" + "}", localVarApiClient.escapeString(qosName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetSingleQosValidateBeforeCall(String qosName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qosName' is set
        if (qosName == null) {
            throw new ApiException("Missing the required parameter 'qosName' when calling slurmdbdGetSingleQos(Async)");
        }

        return slurmdbdGetSingleQosCall(qosName, _callback);

    }

    /**
     * Get QOS info
     * 
     * @param qosName Slurm QOS Name (required)
     * @return Dbv0037QosInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QOS information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037QosInfo slurmdbdGetSingleQos(String qosName) throws ApiException {
        ApiResponse<Dbv0037QosInfo> localVarResp = slurmdbdGetSingleQosWithHttpInfo(qosName);
        return localVarResp.getData();
    }

    /**
     * Get QOS info
     * 
     * @param qosName Slurm QOS Name (required)
     * @return ApiResponse&lt;Dbv0037QosInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QOS information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037QosInfo> slurmdbdGetSingleQosWithHttpInfo(String qosName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetSingleQosValidateBeforeCall(qosName, null);
        Type localVarReturnType = new TypeToken<Dbv0037QosInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get QOS info (asynchronously)
     * 
     * @param qosName Slurm QOS Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QOS information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> QOS not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetSingleQosAsync(String qosName, final ApiCallback<Dbv0037QosInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetSingleQosValidateBeforeCall(qosName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037QosInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetTres
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to retrieve TRES </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetTresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/tres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetTresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetTresCall(_callback);

    }

    /**
     * Get TRES info
     * 
     * @return Dbv0037TresInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to retrieve TRES </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037TresInfo slurmdbdGetTres() throws ApiException {
        ApiResponse<Dbv0037TresInfo> localVarResp = slurmdbdGetTresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get TRES info
     * 
     * @return ApiResponse&lt;Dbv0037TresInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to retrieve TRES </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037TresInfo> slurmdbdGetTresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetTresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037TresInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TRES info (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to retrieve TRES </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetTresAsync(final ApiCallback<Dbv0037TresInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetTresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037TresInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetUser
     * @param userName Slurm User Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/user/{user_name}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling slurmdbdGetUser(Async)");
        }

        return slurmdbdGetUserCall(userName, _callback);

    }

    /**
     * Get user info
     * 
     * @param userName Slurm User Name (required)
     * @return Dbv0037UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037UserInfo slurmdbdGetUser(String userName) throws ApiException {
        ApiResponse<Dbv0037UserInfo> localVarResp = slurmdbdGetUserWithHttpInfo(userName);
        return localVarResp.getData();
    }

    /**
     * Get user info
     * 
     * @param userName Slurm User Name (required)
     * @return ApiResponse&lt;Dbv0037UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037UserInfo> slurmdbdGetUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<Dbv0037UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user info (asynchronously)
     * 
     * @param userName Slurm User Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetUserAsync(String userName, final ApiCallback<Dbv0037UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetUsersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetUsersCall(_callback);

    }

    /**
     * Get user list
     * 
     * @return Dbv0037UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037UserInfo slurmdbdGetUsers() throws ApiException {
        ApiResponse<Dbv0037UserInfo> localVarResp = slurmdbdGetUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user list
     * 
     * @return ApiResponse&lt;Dbv0037UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037UserInfo> slurmdbdGetUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetUsersAsync(final ApiCallback<Dbv0037UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetWckey
     * @param wckey Slurm wckey name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetWckeyCall(String wckey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/wckey/{wckey}"
            .replace("{" + "wckey" + "}", localVarApiClient.escapeString(wckey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetWckeyValidateBeforeCall(String wckey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wckey' is set
        if (wckey == null) {
            throw new ApiException("Missing the required parameter 'wckey' when calling slurmdbdGetWckey(Async)");
        }

        return slurmdbdGetWckeyCall(wckey, _callback);

    }

    /**
     * Get wckey info
     * 
     * @param wckey Slurm wckey name (required)
     * @return Dbv0037WckeyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037WckeyInfo slurmdbdGetWckey(String wckey) throws ApiException {
        ApiResponse<Dbv0037WckeyInfo> localVarResp = slurmdbdGetWckeyWithHttpInfo(wckey);
        return localVarResp.getData();
    }

    /**
     * Get wckey info
     * 
     * @param wckey Slurm wckey name (required)
     * @return ApiResponse&lt;Dbv0037WckeyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037WckeyInfo> slurmdbdGetWckeyWithHttpInfo(String wckey) throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetWckeyValidateBeforeCall(wckey, null);
        Type localVarReturnType = new TypeToken<Dbv0037WckeyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get wckey info (asynchronously)
     * 
     * @param wckey Slurm wckey name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetWckeyAsync(String wckey, final ApiCallback<Dbv0037WckeyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetWckeyValidateBeforeCall(wckey, _callback);
        Type localVarReturnType = new TypeToken<Dbv0037WckeyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdGetWckeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetWckeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/wckeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdGetWckeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdGetWckeysCall(_callback);

    }

    /**
     * Get wckey list
     * 
     * @return Dbv0037WckeyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037WckeyInfo slurmdbdGetWckeys() throws ApiException {
        ApiResponse<Dbv0037WckeyInfo> localVarResp = slurmdbdGetWckeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get wckey list
     * 
     * @return ApiResponse&lt;Dbv0037WckeyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037WckeyInfo> slurmdbdGetWckeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdGetWckeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037WckeyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get wckey list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of wckeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> wckey not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdGetWckeysAsync(final ApiCallback<Dbv0037WckeyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdGetWckeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037WckeyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdSetDbConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to set config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdSetDbConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdSetDbConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdSetDbConfigCall(_callback);

    }

    /**
     * Load all configuration information
     * 
     * @return Dbv0037ConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to set config </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ConfigResponse slurmdbdSetDbConfig() throws ApiException {
        ApiResponse<Dbv0037ConfigResponse> localVarResp = slurmdbdSetDbConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Load all configuration information
     * 
     * @return ApiResponse&lt;Dbv0037ConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to set config </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ConfigResponse> slurmdbdSetDbConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdSetDbConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load all configuration information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Load config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to set config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdSetDbConfigAsync(final ApiCallback<Dbv0037ConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdSetDbConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdUpdateAccount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add/update list of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add or update accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateAccountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdUpdateAccountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdUpdateAccountCall(_callback);

    }

    /**
     * Update accounts
     * 
     * @return Dbv0037AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add/update list of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add or update accounts </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037AccountResponse slurmdbdUpdateAccount() throws ApiException {
        ApiResponse<Dbv0037AccountResponse> localVarResp = slurmdbdUpdateAccountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Update accounts
     * 
     * @return ApiResponse&lt;Dbv0037AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add/update list of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add or update accounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037AccountResponse> slurmdbdUpdateAccountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdUpdateAccountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update accounts (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Add/update list of accounts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to add or update accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateAccountAsync(final ApiCallback<Dbv0037AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdUpdateAccountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdUpdateAssociations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status of associations update </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update associations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateAssociationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/associations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdUpdateAssociationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdUpdateAssociationsCall(_callback);

    }

    /**
     * Set associations info
     * 
     * @return Dbv0037ResponseAssociations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status of associations update </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update associations </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseAssociations slurmdbdUpdateAssociations() throws ApiException {
        ApiResponse<Dbv0037ResponseAssociations> localVarResp = slurmdbdUpdateAssociationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Set associations info
     * 
     * @return ApiResponse&lt;Dbv0037ResponseAssociations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status of associations update </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update associations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseAssociations> slurmdbdUpdateAssociationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdUpdateAssociationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAssociations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set associations info (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status of associations update </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update associations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateAssociationsAsync(final ApiCallback<Dbv0037ResponseAssociations> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdUpdateAssociationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseAssociations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdUpdateTres
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update TRES </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateTresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/tres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdUpdateTresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdUpdateTresCall(_callback);

    }

    /**
     * Set TRES info
     * 
     * @return Dbv0037ResponseTres
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update TRES </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseTres slurmdbdUpdateTres() throws ApiException {
        ApiResponse<Dbv0037ResponseTres> localVarResp = slurmdbdUpdateTresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Set TRES info
     * 
     * @return ApiResponse&lt;Dbv0037ResponseTres&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update TRES </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseTres> slurmdbdUpdateTresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdUpdateTresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseTres>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set TRES info (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of TRES </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unable to update TRES </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateTresAsync(final ApiCallback<Dbv0037ResponseTres> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdUpdateTresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseTres>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slurmdbdUpdateUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or not able to update user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateUsersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slurmdb/v0.0.37/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user", "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slurmdbdUpdateUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return slurmdbdUpdateUsersCall(_callback);

    }

    /**
     * Update user
     * 
     * @return Dbv0037ResponseUserUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or not able to update user </td><td>  -  </td></tr>
     </table>
     */
    public Dbv0037ResponseUserUpdate slurmdbdUpdateUsers() throws ApiException {
        ApiResponse<Dbv0037ResponseUserUpdate> localVarResp = slurmdbdUpdateUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Update user
     * 
     * @return ApiResponse&lt;Dbv0037ResponseUserUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or not able to update user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dbv0037ResponseUserUpdate> slurmdbdUpdateUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slurmdbdUpdateUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseUserUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> User not found or not able to update user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slurmdbdUpdateUsersAsync(final ApiCallback<Dbv0037ResponseUserUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = slurmdbdUpdateUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dbv0037ResponseUserUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
