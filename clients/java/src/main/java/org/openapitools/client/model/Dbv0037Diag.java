/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dbv0037DiagRPCsInner;
import org.openapitools.client.model.Dbv0037DiagRollupsInner;
import org.openapitools.client.model.Dbv0037DiagUsersInner;
import org.openapitools.client.model.Dbv0037Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dbv0037Diag
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dbv0037Diag {
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Dbv0037Error> errors;

  public static final String SERIALIZED_NAME_TIME_START = "time_start";
  @SerializedName(SERIALIZED_NAME_TIME_START)
  private Integer timeStart;

  public static final String SERIALIZED_NAME_ROLLUPS = "rollups";
  @SerializedName(SERIALIZED_NAME_ROLLUPS)
  private List<Dbv0037DiagRollupsInner> rollups;

  public static final String SERIALIZED_NAME_RP_CS = "RPCs";
  @SerializedName(SERIALIZED_NAME_RP_CS)
  private List<Dbv0037DiagRPCsInner> rpCs;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<Dbv0037DiagUsersInner> users;

  public Dbv0037Diag() {
  }

  public Dbv0037Diag errors(List<Dbv0037Error> errors) {
    
    this.errors = errors;
    return this;
  }

  public Dbv0037Diag addErrorsItem(Dbv0037Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Slurm errors
   * @return errors
  **/
  @javax.annotation.Nullable
  public List<Dbv0037Error> getErrors() {
    return errors;
  }


  public void setErrors(List<Dbv0037Error> errors) {
    this.errors = errors;
  }


  public Dbv0037Diag timeStart(Integer timeStart) {
    
    this.timeStart = timeStart;
    return this;
  }

   /**
   * Unix timestamp of start time
   * @return timeStart
  **/
  @javax.annotation.Nullable
  public Integer getTimeStart() {
    return timeStart;
  }


  public void setTimeStart(Integer timeStart) {
    this.timeStart = timeStart;
  }


  public Dbv0037Diag rollups(List<Dbv0037DiagRollupsInner> rollups) {
    
    this.rollups = rollups;
    return this;
  }

  public Dbv0037Diag addRollupsItem(Dbv0037DiagRollupsInner rollupsItem) {
    if (this.rollups == null) {
      this.rollups = new ArrayList<>();
    }
    this.rollups.add(rollupsItem);
    return this;
  }

   /**
   * Get rollups
   * @return rollups
  **/
  @javax.annotation.Nullable
  public List<Dbv0037DiagRollupsInner> getRollups() {
    return rollups;
  }


  public void setRollups(List<Dbv0037DiagRollupsInner> rollups) {
    this.rollups = rollups;
  }


  public Dbv0037Diag rpCs(List<Dbv0037DiagRPCsInner> rpCs) {
    
    this.rpCs = rpCs;
    return this;
  }

  public Dbv0037Diag addRpCsItem(Dbv0037DiagRPCsInner rpCsItem) {
    if (this.rpCs == null) {
      this.rpCs = new ArrayList<>();
    }
    this.rpCs.add(rpCsItem);
    return this;
  }

   /**
   * Get rpCs
   * @return rpCs
  **/
  @javax.annotation.Nullable
  public List<Dbv0037DiagRPCsInner> getRpCs() {
    return rpCs;
  }


  public void setRpCs(List<Dbv0037DiagRPCsInner> rpCs) {
    this.rpCs = rpCs;
  }


  public Dbv0037Diag users(List<Dbv0037DiagUsersInner> users) {
    
    this.users = users;
    return this;
  }

  public Dbv0037Diag addUsersItem(Dbv0037DiagUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nullable
  public List<Dbv0037DiagUsersInner> getUsers() {
    return users;
  }


  public void setUsers(List<Dbv0037DiagUsersInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbv0037Diag dbv0037Diag = (Dbv0037Diag) o;
    return Objects.equals(this.errors, dbv0037Diag.errors) &&
        Objects.equals(this.timeStart, dbv0037Diag.timeStart) &&
        Objects.equals(this.rollups, dbv0037Diag.rollups) &&
        Objects.equals(this.rpCs, dbv0037Diag.rpCs) &&
        Objects.equals(this.users, dbv0037Diag.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, timeStart, rollups, rpCs, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbv0037Diag {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    timeStart: ").append(toIndentedString(timeStart)).append("\n");
    sb.append("    rollups: ").append(toIndentedString(rollups)).append("\n");
    sb.append("    rpCs: ").append(toIndentedString(rpCs)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errors");
    openapiFields.add("time_start");
    openapiFields.add("rollups");
    openapiFields.add("RPCs");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbv0037Diag
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbv0037Diag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbv0037Diag is not found in the empty JSON string", Dbv0037Diag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbv0037Diag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbv0037Diag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Dbv0037Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("rollups") != null && !jsonObj.get("rollups").isJsonNull()) {
        JsonArray jsonArrayrollups = jsonObj.getAsJsonArray("rollups");
        if (jsonArrayrollups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rollups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rollups` to be an array in the JSON string but got `%s`", jsonObj.get("rollups").toString()));
          }

          // validate the optional field `rollups` (array)
          for (int i = 0; i < jsonArrayrollups.size(); i++) {
            Dbv0037DiagRollupsInner.validateJsonElement(jsonArrayrollups.get(i));
          };
        }
      }
      if (jsonObj.get("RPCs") != null && !jsonObj.get("RPCs").isJsonNull()) {
        JsonArray jsonArrayrpCs = jsonObj.getAsJsonArray("RPCs");
        if (jsonArrayrpCs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RPCs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RPCs` to be an array in the JSON string but got `%s`", jsonObj.get("RPCs").toString()));
          }

          // validate the optional field `RPCs` (array)
          for (int i = 0; i < jsonArrayrpCs.size(); i++) {
            Dbv0037DiagRPCsInner.validateJsonElement(jsonArrayrpCs.get(i));
          };
        }
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            Dbv0037DiagUsersInner.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbv0037Diag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbv0037Diag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbv0037Diag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbv0037Diag.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbv0037Diag>() {
           @Override
           public void write(JsonWriter out, Dbv0037Diag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbv0037Diag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbv0037Diag given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbv0037Diag
  * @throws IOException if the JSON string is invalid with respect to Dbv0037Diag
  */
  public static Dbv0037Diag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbv0037Diag.class);
  }

 /**
  * Convert an instance of Dbv0037Diag to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

