/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dbv0037AssociationShortInfo;
import org.openapitools.client.model.Dbv0037CoordinatorInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account description
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dbv0037Account {
  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private List<Dbv0037AssociationShortInfo> associations;

  public static final String SERIALIZED_NAME_COORDINATORS = "coordinators";
  @SerializedName(SERIALIZED_NAME_COORDINATORS)
  private List<Dbv0037CoordinatorInfo> coordinators;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public Dbv0037Account() {
  }

  public Dbv0037Account associations(List<Dbv0037AssociationShortInfo> associations) {
    
    this.associations = associations;
    return this;
  }

  public Dbv0037Account addAssociationsItem(Dbv0037AssociationShortInfo associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

   /**
   * List of assigned associations
   * @return associations
  **/
  @javax.annotation.Nullable
  public List<Dbv0037AssociationShortInfo> getAssociations() {
    return associations;
  }


  public void setAssociations(List<Dbv0037AssociationShortInfo> associations) {
    this.associations = associations;
  }


  public Dbv0037Account coordinators(List<Dbv0037CoordinatorInfo> coordinators) {
    
    this.coordinators = coordinators;
    return this;
  }

  public Dbv0037Account addCoordinatorsItem(Dbv0037CoordinatorInfo coordinatorsItem) {
    if (this.coordinators == null) {
      this.coordinators = new ArrayList<>();
    }
    this.coordinators.add(coordinatorsItem);
    return this;
  }

   /**
   * List of assigned coordinators
   * @return coordinators
  **/
  @javax.annotation.Nullable
  public List<Dbv0037CoordinatorInfo> getCoordinators() {
    return coordinators;
  }


  public void setCoordinators(List<Dbv0037CoordinatorInfo> coordinators) {
    this.coordinators = coordinators;
  }


  public Dbv0037Account description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of account
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Dbv0037Account name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of account
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Dbv0037Account organization(String organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Assigned organization of account
   * @return organization
  **/
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }


  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public Dbv0037Account flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public Dbv0037Account addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * List of properties of account
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbv0037Account dbv0037Account = (Dbv0037Account) o;
    return Objects.equals(this.associations, dbv0037Account.associations) &&
        Objects.equals(this.coordinators, dbv0037Account.coordinators) &&
        Objects.equals(this.description, dbv0037Account.description) &&
        Objects.equals(this.name, dbv0037Account.name) &&
        Objects.equals(this.organization, dbv0037Account.organization) &&
        Objects.equals(this.flags, dbv0037Account.flags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associations, coordinators, description, name, organization, flags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbv0037Account {\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    coordinators: ").append(toIndentedString(coordinators)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associations");
    openapiFields.add("coordinators");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("organization");
    openapiFields.add("flags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbv0037Account
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbv0037Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbv0037Account is not found in the empty JSON string", Dbv0037Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbv0037Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbv0037Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            Dbv0037AssociationShortInfo.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      if (jsonObj.get("coordinators") != null && !jsonObj.get("coordinators").isJsonNull()) {
        JsonArray jsonArraycoordinators = jsonObj.getAsJsonArray("coordinators");
        if (jsonArraycoordinators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coordinators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coordinators` to be an array in the JSON string but got `%s`", jsonObj.get("coordinators").toString()));
          }

          // validate the optional field `coordinators` (array)
          for (int i = 0; i < jsonArraycoordinators.size(); i++) {
            Dbv0037CoordinatorInfo.validateJsonElement(jsonArraycoordinators.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbv0037Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbv0037Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbv0037Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbv0037Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbv0037Account>() {
           @Override
           public void write(JsonWriter out, Dbv0037Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbv0037Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbv0037Account given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbv0037Account
  * @throws IOException if the JSON string is invalid with respect to Dbv0037Account
  */
  public static Dbv0037Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbv0037Account.class);
  }

 /**
  * Convert an instance of Dbv0037Account to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

