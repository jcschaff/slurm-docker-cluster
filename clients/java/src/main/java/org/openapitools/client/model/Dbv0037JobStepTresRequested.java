/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dbv0037TresListInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TRES requested for job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dbv0037JobStepTresRequested {
  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private List<Dbv0037TresListInner> average;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private List<Dbv0037TresListInner> max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private List<Dbv0037TresListInner> min;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private List<Dbv0037TresListInner> total;

  public Dbv0037JobStepTresRequested() {
  }

  public Dbv0037JobStepTresRequested average(List<Dbv0037TresListInner> average) {
    
    this.average = average;
    return this;
  }

  public Dbv0037JobStepTresRequested addAverageItem(Dbv0037TresListInner averageItem) {
    if (this.average == null) {
      this.average = new ArrayList<>();
    }
    this.average.add(averageItem);
    return this;
  }

   /**
   * TRES list of attributes
   * @return average
  **/
  @javax.annotation.Nullable
  public List<Dbv0037TresListInner> getAverage() {
    return average;
  }


  public void setAverage(List<Dbv0037TresListInner> average) {
    this.average = average;
  }


  public Dbv0037JobStepTresRequested max(List<Dbv0037TresListInner> max) {
    
    this.max = max;
    return this;
  }

  public Dbv0037JobStepTresRequested addMaxItem(Dbv0037TresListInner maxItem) {
    if (this.max == null) {
      this.max = new ArrayList<>();
    }
    this.max.add(maxItem);
    return this;
  }

   /**
   * TRES list of attributes
   * @return max
  **/
  @javax.annotation.Nullable
  public List<Dbv0037TresListInner> getMax() {
    return max;
  }


  public void setMax(List<Dbv0037TresListInner> max) {
    this.max = max;
  }


  public Dbv0037JobStepTresRequested min(List<Dbv0037TresListInner> min) {
    
    this.min = min;
    return this;
  }

  public Dbv0037JobStepTresRequested addMinItem(Dbv0037TresListInner minItem) {
    if (this.min == null) {
      this.min = new ArrayList<>();
    }
    this.min.add(minItem);
    return this;
  }

   /**
   * TRES list of attributes
   * @return min
  **/
  @javax.annotation.Nullable
  public List<Dbv0037TresListInner> getMin() {
    return min;
  }


  public void setMin(List<Dbv0037TresListInner> min) {
    this.min = min;
  }


  public Dbv0037JobStepTresRequested total(List<Dbv0037TresListInner> total) {
    
    this.total = total;
    return this;
  }

  public Dbv0037JobStepTresRequested addTotalItem(Dbv0037TresListInner totalItem) {
    if (this.total == null) {
      this.total = new ArrayList<>();
    }
    this.total.add(totalItem);
    return this;
  }

   /**
   * TRES list of attributes
   * @return total
  **/
  @javax.annotation.Nullable
  public List<Dbv0037TresListInner> getTotal() {
    return total;
  }


  public void setTotal(List<Dbv0037TresListInner> total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbv0037JobStepTresRequested dbv0037JobStepTresRequested = (Dbv0037JobStepTresRequested) o;
    return Objects.equals(this.average, dbv0037JobStepTresRequested.average) &&
        Objects.equals(this.max, dbv0037JobStepTresRequested.max) &&
        Objects.equals(this.min, dbv0037JobStepTresRequested.min) &&
        Objects.equals(this.total, dbv0037JobStepTresRequested.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, max, min, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbv0037JobStepTresRequested {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbv0037JobStepTresRequested
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbv0037JobStepTresRequested.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbv0037JobStepTresRequested is not found in the empty JSON string", Dbv0037JobStepTresRequested.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbv0037JobStepTresRequested.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbv0037JobStepTresRequested` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("average") != null && !jsonObj.get("average").isJsonNull()) {
        JsonArray jsonArrayaverage = jsonObj.getAsJsonArray("average");
        if (jsonArrayaverage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("average").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `average` to be an array in the JSON string but got `%s`", jsonObj.get("average").toString()));
          }

          // validate the optional field `average` (array)
          for (int i = 0; i < jsonArrayaverage.size(); i++) {
            Dbv0037TresListInner.validateJsonElement(jsonArrayaverage.get(i));
          };
        }
      }
      if (jsonObj.get("max") != null && !jsonObj.get("max").isJsonNull()) {
        JsonArray jsonArraymax = jsonObj.getAsJsonArray("max");
        if (jsonArraymax != null) {
          // ensure the json data is an array
          if (!jsonObj.get("max").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `max` to be an array in the JSON string but got `%s`", jsonObj.get("max").toString()));
          }

          // validate the optional field `max` (array)
          for (int i = 0; i < jsonArraymax.size(); i++) {
            Dbv0037TresListInner.validateJsonElement(jsonArraymax.get(i));
          };
        }
      }
      if (jsonObj.get("min") != null && !jsonObj.get("min").isJsonNull()) {
        JsonArray jsonArraymin = jsonObj.getAsJsonArray("min");
        if (jsonArraymin != null) {
          // ensure the json data is an array
          if (!jsonObj.get("min").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `min` to be an array in the JSON string but got `%s`", jsonObj.get("min").toString()));
          }

          // validate the optional field `min` (array)
          for (int i = 0; i < jsonArraymin.size(); i++) {
            Dbv0037TresListInner.validateJsonElement(jsonArraymin.get(i));
          };
        }
      }
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        JsonArray jsonArraytotal = jsonObj.getAsJsonArray("total");
        if (jsonArraytotal != null) {
          // ensure the json data is an array
          if (!jsonObj.get("total").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `total` to be an array in the JSON string but got `%s`", jsonObj.get("total").toString()));
          }

          // validate the optional field `total` (array)
          for (int i = 0; i < jsonArraytotal.size(); i++) {
            Dbv0037TresListInner.validateJsonElement(jsonArraytotal.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbv0037JobStepTresRequested.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbv0037JobStepTresRequested' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbv0037JobStepTresRequested> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbv0037JobStepTresRequested.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbv0037JobStepTresRequested>() {
           @Override
           public void write(JsonWriter out, Dbv0037JobStepTresRequested value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbv0037JobStepTresRequested read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbv0037JobStepTresRequested given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbv0037JobStepTresRequested
  * @throws IOException if the JSON string is invalid with respect to Dbv0037JobStepTresRequested
  */
  public static Dbv0037JobStepTresRequested fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbv0037JobStepTresRequested.class);
  }

 /**
  * Convert an instance of Dbv0037JobStepTresRequested to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

