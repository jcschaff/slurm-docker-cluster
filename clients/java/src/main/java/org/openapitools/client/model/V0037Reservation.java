/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V0037ReservationPurgeCompleted;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V0037Reservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V0037Reservation {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private String accounts;

  public static final String SERIALIZED_NAME_BURST_BUFFER = "burst_buffer";
  @SerializedName(SERIALIZED_NAME_BURST_BUFFER)
  private String burstBuffer;

  public static final String SERIALIZED_NAME_CORE_COUNT = "core_count";
  @SerializedName(SERIALIZED_NAME_CORE_COUNT)
  private Integer coreCount;

  public static final String SERIALIZED_NAME_CORE_SPEC_CNT = "core_spec_cnt";
  @SerializedName(SERIALIZED_NAME_CORE_SPEC_CNT)
  private Integer coreSpecCnt;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Integer endTime;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private String features;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private String groups;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private String licenses;

  public static final String SERIALIZED_NAME_MAX_START_DELAY = "max_start_delay";
  @SerializedName(SERIALIZED_NAME_MAX_START_DELAY)
  private Integer maxStartDelay;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_COUNT = "node_count";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Integer nodeCount;

  public static final String SERIALIZED_NAME_NODE_LIST = "node_list";
  @SerializedName(SERIALIZED_NAME_NODE_LIST)
  private String nodeList;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_PURGE_COMPLETED = "purge_completed";
  @SerializedName(SERIALIZED_NAME_PURGE_COMPLETED)
  private V0037ReservationPurgeCompleted purgeCompleted;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Integer startTime;

  public static final String SERIALIZED_NAME_WATTS = "watts";
  @SerializedName(SERIALIZED_NAME_WATTS)
  private Integer watts;

  public static final String SERIALIZED_NAME_TRES = "tres";
  @SerializedName(SERIALIZED_NAME_TRES)
  private String tres;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private String users;

  public V0037Reservation() {
  }

  public V0037Reservation accounts(String accounts) {
    
    this.accounts = accounts;
    return this;
  }

   /**
   * Allowed accounts
   * @return accounts
  **/
  @javax.annotation.Nullable
  public String getAccounts() {
    return accounts;
  }


  public void setAccounts(String accounts) {
    this.accounts = accounts;
  }


  public V0037Reservation burstBuffer(String burstBuffer) {
    
    this.burstBuffer = burstBuffer;
    return this;
  }

   /**
   * Reserved burst buffer
   * @return burstBuffer
  **/
  @javax.annotation.Nullable
  public String getBurstBuffer() {
    return burstBuffer;
  }


  public void setBurstBuffer(String burstBuffer) {
    this.burstBuffer = burstBuffer;
  }


  public V0037Reservation coreCount(Integer coreCount) {
    
    this.coreCount = coreCount;
    return this;
  }

   /**
   * Number of reserved cores
   * @return coreCount
  **/
  @javax.annotation.Nullable
  public Integer getCoreCount() {
    return coreCount;
  }


  public void setCoreCount(Integer coreCount) {
    this.coreCount = coreCount;
  }


  public V0037Reservation coreSpecCnt(Integer coreSpecCnt) {
    
    this.coreSpecCnt = coreSpecCnt;
    return this;
  }

   /**
   * Number of reserved specialized cores
   * @return coreSpecCnt
  **/
  @javax.annotation.Nullable
  public Integer getCoreSpecCnt() {
    return coreSpecCnt;
  }


  public void setCoreSpecCnt(Integer coreSpecCnt) {
    this.coreSpecCnt = coreSpecCnt;
  }


  public V0037Reservation endTime(Integer endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * End time of the reservation
   * @return endTime
  **/
  @javax.annotation.Nullable
  public Integer getEndTime() {
    return endTime;
  }


  public void setEndTime(Integer endTime) {
    this.endTime = endTime;
  }


  public V0037Reservation features(String features) {
    
    this.features = features;
    return this;
  }

   /**
   * List of features
   * @return features
  **/
  @javax.annotation.Nullable
  public String getFeatures() {
    return features;
  }


  public void setFeatures(String features) {
    this.features = features;
  }


  public V0037Reservation flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public V0037Reservation addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * Reservation options
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public V0037Reservation groups(String groups) {
    
    this.groups = groups;
    return this;
  }

   /**
   * List of groups permitted to use the reserved nodes
   * @return groups
  **/
  @javax.annotation.Nullable
  public String getGroups() {
    return groups;
  }


  public void setGroups(String groups) {
    this.groups = groups;
  }


  public V0037Reservation licenses(String licenses) {
    
    this.licenses = licenses;
    return this;
  }

   /**
   * List of licenses
   * @return licenses
  **/
  @javax.annotation.Nullable
  public String getLicenses() {
    return licenses;
  }


  public void setLicenses(String licenses) {
    this.licenses = licenses;
  }


  public V0037Reservation maxStartDelay(Integer maxStartDelay) {
    
    this.maxStartDelay = maxStartDelay;
    return this;
  }

   /**
   * Maximum delay in which jobs outside of the reservation will be permitted to overlap once any jobs are queued for the reservation
   * @return maxStartDelay
  **/
  @javax.annotation.Nullable
  public Integer getMaxStartDelay() {
    return maxStartDelay;
  }


  public void setMaxStartDelay(Integer maxStartDelay) {
    this.maxStartDelay = maxStartDelay;
  }


  public V0037Reservation name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Reservationn name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V0037Reservation nodeCount(Integer nodeCount) {
    
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * Count of nodes reserved
   * @return nodeCount
  **/
  @javax.annotation.Nullable
  public Integer getNodeCount() {
    return nodeCount;
  }


  public void setNodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
  }


  public V0037Reservation nodeList(String nodeList) {
    
    this.nodeList = nodeList;
    return this;
  }

   /**
   * List of reserved nodes
   * @return nodeList
  **/
  @javax.annotation.Nullable
  public String getNodeList() {
    return nodeList;
  }


  public void setNodeList(String nodeList) {
    this.nodeList = nodeList;
  }


  public V0037Reservation partition(String partition) {
    
    this.partition = partition;
    return this;
  }

   /**
   * Partition
   * @return partition
  **/
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }


  public void setPartition(String partition) {
    this.partition = partition;
  }


  public V0037Reservation purgeCompleted(V0037ReservationPurgeCompleted purgeCompleted) {
    
    this.purgeCompleted = purgeCompleted;
    return this;
  }

   /**
   * Get purgeCompleted
   * @return purgeCompleted
  **/
  @javax.annotation.Nullable
  public V0037ReservationPurgeCompleted getPurgeCompleted() {
    return purgeCompleted;
  }


  public void setPurgeCompleted(V0037ReservationPurgeCompleted purgeCompleted) {
    this.purgeCompleted = purgeCompleted;
  }


  public V0037Reservation startTime(Integer startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Start time of reservation
   * @return startTime
  **/
  @javax.annotation.Nullable
  public Integer getStartTime() {
    return startTime;
  }


  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }


  public V0037Reservation watts(Integer watts) {
    
    this.watts = watts;
    return this;
  }

   /**
   * amount of power to reserve in watts
   * @return watts
  **/
  @javax.annotation.Nullable
  public Integer getWatts() {
    return watts;
  }


  public void setWatts(Integer watts) {
    this.watts = watts;
  }


  public V0037Reservation tres(String tres) {
    
    this.tres = tres;
    return this;
  }

   /**
   * List of TRES
   * @return tres
  **/
  @javax.annotation.Nullable
  public String getTres() {
    return tres;
  }


  public void setTres(String tres) {
    this.tres = tres;
  }


  public V0037Reservation users(String users) {
    
    this.users = users;
    return this;
  }

   /**
   * List of users
   * @return users
  **/
  @javax.annotation.Nullable
  public String getUsers() {
    return users;
  }


  public void setUsers(String users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V0037Reservation v0037Reservation = (V0037Reservation) o;
    return Objects.equals(this.accounts, v0037Reservation.accounts) &&
        Objects.equals(this.burstBuffer, v0037Reservation.burstBuffer) &&
        Objects.equals(this.coreCount, v0037Reservation.coreCount) &&
        Objects.equals(this.coreSpecCnt, v0037Reservation.coreSpecCnt) &&
        Objects.equals(this.endTime, v0037Reservation.endTime) &&
        Objects.equals(this.features, v0037Reservation.features) &&
        Objects.equals(this.flags, v0037Reservation.flags) &&
        Objects.equals(this.groups, v0037Reservation.groups) &&
        Objects.equals(this.licenses, v0037Reservation.licenses) &&
        Objects.equals(this.maxStartDelay, v0037Reservation.maxStartDelay) &&
        Objects.equals(this.name, v0037Reservation.name) &&
        Objects.equals(this.nodeCount, v0037Reservation.nodeCount) &&
        Objects.equals(this.nodeList, v0037Reservation.nodeList) &&
        Objects.equals(this.partition, v0037Reservation.partition) &&
        Objects.equals(this.purgeCompleted, v0037Reservation.purgeCompleted) &&
        Objects.equals(this.startTime, v0037Reservation.startTime) &&
        Objects.equals(this.watts, v0037Reservation.watts) &&
        Objects.equals(this.tres, v0037Reservation.tres) &&
        Objects.equals(this.users, v0037Reservation.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, burstBuffer, coreCount, coreSpecCnt, endTime, features, flags, groups, licenses, maxStartDelay, name, nodeCount, nodeList, partition, purgeCompleted, startTime, watts, tres, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V0037Reservation {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    burstBuffer: ").append(toIndentedString(burstBuffer)).append("\n");
    sb.append("    coreCount: ").append(toIndentedString(coreCount)).append("\n");
    sb.append("    coreSpecCnt: ").append(toIndentedString(coreSpecCnt)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    maxStartDelay: ").append(toIndentedString(maxStartDelay)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    nodeList: ").append(toIndentedString(nodeList)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    purgeCompleted: ").append(toIndentedString(purgeCompleted)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    watts: ").append(toIndentedString(watts)).append("\n");
    sb.append("    tres: ").append(toIndentedString(tres)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("burst_buffer");
    openapiFields.add("core_count");
    openapiFields.add("core_spec_cnt");
    openapiFields.add("end_time");
    openapiFields.add("features");
    openapiFields.add("flags");
    openapiFields.add("groups");
    openapiFields.add("licenses");
    openapiFields.add("max_start_delay");
    openapiFields.add("name");
    openapiFields.add("node_count");
    openapiFields.add("node_list");
    openapiFields.add("partition");
    openapiFields.add("purge_completed");
    openapiFields.add("start_time");
    openapiFields.add("watts");
    openapiFields.add("tres");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V0037Reservation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V0037Reservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V0037Reservation is not found in the empty JSON string", V0037Reservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V0037Reservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V0037Reservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) && !jsonObj.get("accounts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
      }
      if ((jsonObj.get("burst_buffer") != null && !jsonObj.get("burst_buffer").isJsonNull()) && !jsonObj.get("burst_buffer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `burst_buffer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("burst_buffer").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) && !jsonObj.get("groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      if ((jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) && !jsonObj.get("licenses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("node_list") != null && !jsonObj.get("node_list").isJsonNull()) && !jsonObj.get("node_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_list").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      // validate the optional field `purge_completed`
      if (jsonObj.get("purge_completed") != null && !jsonObj.get("purge_completed").isJsonNull()) {
        V0037ReservationPurgeCompleted.validateJsonElement(jsonObj.get("purge_completed"));
      }
      if ((jsonObj.get("tres") != null && !jsonObj.get("tres").isJsonNull()) && !jsonObj.get("tres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres").toString()));
      }
      if ((jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) && !jsonObj.get("users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V0037Reservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V0037Reservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V0037Reservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V0037Reservation.class));

       return (TypeAdapter<T>) new TypeAdapter<V0037Reservation>() {
           @Override
           public void write(JsonWriter out, V0037Reservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V0037Reservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V0037Reservation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V0037Reservation
  * @throws IOException if the JSON string is invalid with respect to V0037Reservation
  */
  public static V0037Reservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V0037Reservation.class);
  }

 /**
  * Convert an instance of V0037Reservation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

