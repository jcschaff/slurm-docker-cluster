/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V0037Node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V0037Node {
  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private String architecture;

  public static final String SERIALIZED_NAME_BURSTBUFFER_NETWORK_ADDRESS = "burstbuffer_network_address";
  @SerializedName(SERIALIZED_NAME_BURSTBUFFER_NETWORK_ADDRESS)
  private String burstbufferNetworkAddress;

  public static final String SERIALIZED_NAME_BOARDS = "boards";
  @SerializedName(SERIALIZED_NAME_BOARDS)
  private Integer boards;

  public static final String SERIALIZED_NAME_BOOT_TIME = "boot_time";
  @SerializedName(SERIALIZED_NAME_BOOT_TIME)
  private Long bootTime;

  public static final String SERIALIZED_NAME_CORES = "cores";
  @SerializedName(SERIALIZED_NAME_CORES)
  private Integer cores;

  public static final String SERIALIZED_NAME_CPU_BINDING = "cpu_binding";
  @SerializedName(SERIALIZED_NAME_CPU_BINDING)
  private Integer cpuBinding;

  public static final String SERIALIZED_NAME_CPU_LOAD = "cpu_load";
  @SerializedName(SERIALIZED_NAME_CPU_LOAD)
  private Long cpuLoad;

  public static final String SERIALIZED_NAME_FREE_MEMORY = "free_memory";
  @SerializedName(SERIALIZED_NAME_FREE_MEMORY)
  private Integer freeMemory;

  public static final String SERIALIZED_NAME_CPUS = "cpus";
  @SerializedName(SERIALIZED_NAME_CPUS)
  private Integer cpus;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private String features;

  public static final String SERIALIZED_NAME_ACTIVE_FEATURES = "active_features";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FEATURES)
  private String activeFeatures;

  public static final String SERIALIZED_NAME_GRES = "gres";
  @SerializedName(SERIALIZED_NAME_GRES)
  private String gres;

  public static final String SERIALIZED_NAME_GRES_DRAINED = "gres_drained";
  @SerializedName(SERIALIZED_NAME_GRES_DRAINED)
  private String gresDrained;

  public static final String SERIALIZED_NAME_GRES_USED = "gres_used";
  @SerializedName(SERIALIZED_NAME_GRES_USED)
  private String gresUsed;

  public static final String SERIALIZED_NAME_MCS_LABEL = "mcs_label";
  @SerializedName(SERIALIZED_NAME_MCS_LABEL)
  private String mcsLabel;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_STATE_AFTER_REBOOT = "next_state_after_reboot";
  @SerializedName(SERIALIZED_NAME_NEXT_STATE_AFTER_REBOOT)
  private String nextStateAfterReboot;

  public static final String SERIALIZED_NAME_NEXT_STATE_AFTER_REBOOT_FLAGS = "next_state_after_reboot_flags";
  @SerializedName(SERIALIZED_NAME_NEXT_STATE_AFTER_REBOOT_FLAGS)
  private List<String> nextStateAfterRebootFlags;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_FLAGS = "state_flags";
  @SerializedName(SERIALIZED_NAME_STATE_FLAGS)
  private List<String> stateFlags;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PARTITIONS = "partitions";
  @SerializedName(SERIALIZED_NAME_PARTITIONS)
  private List<String> partitions;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_REAL_MEMORY = "real_memory";
  @SerializedName(SERIALIZED_NAME_REAL_MEMORY)
  private Integer realMemory;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REASON_CHANGED_AT = "reason_changed_at";
  @SerializedName(SERIALIZED_NAME_REASON_CHANGED_AT)
  private Integer reasonChangedAt;

  public static final String SERIALIZED_NAME_REASON_SET_BY_USER = "reason_set_by_user";
  @SerializedName(SERIALIZED_NAME_REASON_SET_BY_USER)
  private String reasonSetByUser;

  public static final String SERIALIZED_NAME_SLURMD_START_TIME = "slurmd_start_time";
  @SerializedName(SERIALIZED_NAME_SLURMD_START_TIME)
  private Long slurmdStartTime;

  public static final String SERIALIZED_NAME_SOCKETS = "sockets";
  @SerializedName(SERIALIZED_NAME_SOCKETS)
  private Integer sockets;

  public static final String SERIALIZED_NAME_THREADS = "threads";
  @SerializedName(SERIALIZED_NAME_THREADS)
  private Integer threads;

  public static final String SERIALIZED_NAME_TEMPORARY_DISK = "temporary_disk";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DISK)
  private Integer temporaryDisk;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_TRES = "tres";
  @SerializedName(SERIALIZED_NAME_TRES)
  private String tres;

  public static final String SERIALIZED_NAME_TRES_USED = "tres_used";
  @SerializedName(SERIALIZED_NAME_TRES_USED)
  private String tresUsed;

  public static final String SERIALIZED_NAME_TRES_WEIGHTED = "tres_weighted";
  @SerializedName(SERIALIZED_NAME_TRES_WEIGHTED)
  private Double tresWeighted;

  public static final String SERIALIZED_NAME_SLURMD_VERSION = "slurmd_version";
  @SerializedName(SERIALIZED_NAME_SLURMD_VERSION)
  private String slurmdVersion;

  public static final String SERIALIZED_NAME_ALLOC_CPUS = "alloc_cpus";
  @SerializedName(SERIALIZED_NAME_ALLOC_CPUS)
  private Long allocCpus;

  public static final String SERIALIZED_NAME_IDLE_CPUS = "idle_cpus";
  @SerializedName(SERIALIZED_NAME_IDLE_CPUS)
  private Long idleCpus;

  public static final String SERIALIZED_NAME_ALLOC_MEMORY = "alloc_memory";
  @SerializedName(SERIALIZED_NAME_ALLOC_MEMORY)
  private Long allocMemory;

  public V0037Node() {
  }

  public V0037Node architecture(String architecture) {
    
    this.architecture = architecture;
    return this;
  }

   /**
   * computer architecture
   * @return architecture
  **/
  @javax.annotation.Nullable
  public String getArchitecture() {
    return architecture;
  }


  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public V0037Node burstbufferNetworkAddress(String burstbufferNetworkAddress) {
    
    this.burstbufferNetworkAddress = burstbufferNetworkAddress;
    return this;
  }

   /**
   * BcastAddr
   * @return burstbufferNetworkAddress
  **/
  @javax.annotation.Nullable
  public String getBurstbufferNetworkAddress() {
    return burstbufferNetworkAddress;
  }


  public void setBurstbufferNetworkAddress(String burstbufferNetworkAddress) {
    this.burstbufferNetworkAddress = burstbufferNetworkAddress;
  }


  public V0037Node boards(Integer boards) {
    
    this.boards = boards;
    return this;
  }

   /**
   * total number of boards per node
   * @return boards
  **/
  @javax.annotation.Nullable
  public Integer getBoards() {
    return boards;
  }


  public void setBoards(Integer boards) {
    this.boards = boards;
  }


  public V0037Node bootTime(Long bootTime) {
    
    this.bootTime = bootTime;
    return this;
  }

   /**
   * timestamp of node boot
   * @return bootTime
  **/
  @javax.annotation.Nullable
  public Long getBootTime() {
    return bootTime;
  }


  public void setBootTime(Long bootTime) {
    this.bootTime = bootTime;
  }


  public V0037Node cores(Integer cores) {
    
    this.cores = cores;
    return this;
  }

   /**
   * number of cores per socket
   * @return cores
  **/
  @javax.annotation.Nullable
  public Integer getCores() {
    return cores;
  }


  public void setCores(Integer cores) {
    this.cores = cores;
  }


  public V0037Node cpuBinding(Integer cpuBinding) {
    
    this.cpuBinding = cpuBinding;
    return this;
  }

   /**
   * Default task binding
   * @return cpuBinding
  **/
  @javax.annotation.Nullable
  public Integer getCpuBinding() {
    return cpuBinding;
  }


  public void setCpuBinding(Integer cpuBinding) {
    this.cpuBinding = cpuBinding;
  }


  public V0037Node cpuLoad(Long cpuLoad) {
    
    this.cpuLoad = cpuLoad;
    return this;
  }

   /**
   * CPU load * 100
   * @return cpuLoad
  **/
  @javax.annotation.Nullable
  public Long getCpuLoad() {
    return cpuLoad;
  }


  public void setCpuLoad(Long cpuLoad) {
    this.cpuLoad = cpuLoad;
  }


  public V0037Node freeMemory(Integer freeMemory) {
    
    this.freeMemory = freeMemory;
    return this;
  }

   /**
   * free memory in MiB
   * @return freeMemory
  **/
  @javax.annotation.Nullable
  public Integer getFreeMemory() {
    return freeMemory;
  }


  public void setFreeMemory(Integer freeMemory) {
    this.freeMemory = freeMemory;
  }


  public V0037Node cpus(Integer cpus) {
    
    this.cpus = cpus;
    return this;
  }

   /**
   * configured count of cpus running on the node
   * @return cpus
  **/
  @javax.annotation.Nullable
  public Integer getCpus() {
    return cpus;
  }


  public void setCpus(Integer cpus) {
    this.cpus = cpus;
  }


  public V0037Node features(String features) {
    
    this.features = features;
    return this;
  }

   /**
   * 
   * @return features
  **/
  @javax.annotation.Nullable
  public String getFeatures() {
    return features;
  }


  public void setFeatures(String features) {
    this.features = features;
  }


  public V0037Node activeFeatures(String activeFeatures) {
    
    this.activeFeatures = activeFeatures;
    return this;
  }

   /**
   * list of a node&#39;s available features
   * @return activeFeatures
  **/
  @javax.annotation.Nullable
  public String getActiveFeatures() {
    return activeFeatures;
  }


  public void setActiveFeatures(String activeFeatures) {
    this.activeFeatures = activeFeatures;
  }


  public V0037Node gres(String gres) {
    
    this.gres = gres;
    return this;
  }

   /**
   * list of a node&#39;s generic resources
   * @return gres
  **/
  @javax.annotation.Nullable
  public String getGres() {
    return gres;
  }


  public void setGres(String gres) {
    this.gres = gres;
  }


  public V0037Node gresDrained(String gresDrained) {
    
    this.gresDrained = gresDrained;
    return this;
  }

   /**
   * list of drained GRES
   * @return gresDrained
  **/
  @javax.annotation.Nullable
  public String getGresDrained() {
    return gresDrained;
  }


  public void setGresDrained(String gresDrained) {
    this.gresDrained = gresDrained;
  }


  public V0037Node gresUsed(String gresUsed) {
    
    this.gresUsed = gresUsed;
    return this;
  }

   /**
   * list of GRES in current use
   * @return gresUsed
  **/
  @javax.annotation.Nullable
  public String getGresUsed() {
    return gresUsed;
  }


  public void setGresUsed(String gresUsed) {
    this.gresUsed = gresUsed;
  }


  public V0037Node mcsLabel(String mcsLabel) {
    
    this.mcsLabel = mcsLabel;
    return this;
  }

   /**
   * mcs label if mcs plugin in use
   * @return mcsLabel
  **/
  @javax.annotation.Nullable
  public String getMcsLabel() {
    return mcsLabel;
  }


  public void setMcsLabel(String mcsLabel) {
    this.mcsLabel = mcsLabel;
  }


  public V0037Node name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * node name to slurm
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V0037Node nextStateAfterReboot(String nextStateAfterReboot) {
    
    this.nextStateAfterReboot = nextStateAfterReboot;
    return this;
  }

   /**
   * state after reboot
   * @return nextStateAfterReboot
  **/
  @javax.annotation.Nullable
  public String getNextStateAfterReboot() {
    return nextStateAfterReboot;
  }


  public void setNextStateAfterReboot(String nextStateAfterReboot) {
    this.nextStateAfterReboot = nextStateAfterReboot;
  }


  public V0037Node nextStateAfterRebootFlags(List<String> nextStateAfterRebootFlags) {
    
    this.nextStateAfterRebootFlags = nextStateAfterRebootFlags;
    return this;
  }

  public V0037Node addNextStateAfterRebootFlagsItem(String nextStateAfterRebootFlagsItem) {
    if (this.nextStateAfterRebootFlags == null) {
      this.nextStateAfterRebootFlags = new ArrayList<>();
    }
    this.nextStateAfterRebootFlags.add(nextStateAfterRebootFlagsItem);
    return this;
  }

   /**
   * node state flags
   * @return nextStateAfterRebootFlags
  **/
  @javax.annotation.Nullable
  public List<String> getNextStateAfterRebootFlags() {
    return nextStateAfterRebootFlags;
  }


  public void setNextStateAfterRebootFlags(List<String> nextStateAfterRebootFlags) {
    this.nextStateAfterRebootFlags = nextStateAfterRebootFlags;
  }


  public V0037Node address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * state after reboot
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public V0037Node hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * node&#39;s hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public V0037Node state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * current node state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public V0037Node stateFlags(List<String> stateFlags) {
    
    this.stateFlags = stateFlags;
    return this;
  }

  public V0037Node addStateFlagsItem(String stateFlagsItem) {
    if (this.stateFlags == null) {
      this.stateFlags = new ArrayList<>();
    }
    this.stateFlags.add(stateFlagsItem);
    return this;
  }

   /**
   * node state flags
   * @return stateFlags
  **/
  @javax.annotation.Nullable
  public List<String> getStateFlags() {
    return stateFlags;
  }


  public void setStateFlags(List<String> stateFlags) {
    this.stateFlags = stateFlags;
  }


  public V0037Node operatingSystem(String operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * operating system
   * @return operatingSystem
  **/
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public V0037Node owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * User allowed to use this node
   * @return owner
  **/
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public V0037Node partitions(List<String> partitions) {
    
    this.partitions = partitions;
    return this;
  }

  public V0037Node addPartitionsItem(String partitionsItem) {
    if (this.partitions == null) {
      this.partitions = new ArrayList<>();
    }
    this.partitions.add(partitionsItem);
    return this;
  }

   /**
   * assigned partitions
   * @return partitions
  **/
  @javax.annotation.Nullable
  public List<String> getPartitions() {
    return partitions;
  }


  public void setPartitions(List<String> partitions) {
    this.partitions = partitions;
  }


  public V0037Node port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * TCP port number of the slurmd
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public V0037Node realMemory(Integer realMemory) {
    
    this.realMemory = realMemory;
    return this;
  }

   /**
   * configured MB of real memory on the node
   * @return realMemory
  **/
  @javax.annotation.Nullable
  public Integer getRealMemory() {
    return realMemory;
  }


  public void setRealMemory(Integer realMemory) {
    this.realMemory = realMemory;
  }


  public V0037Node reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * reason for node being DOWN or DRAINING
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public V0037Node reasonChangedAt(Integer reasonChangedAt) {
    
    this.reasonChangedAt = reasonChangedAt;
    return this;
  }

   /**
   * Time stamp when reason was set
   * @return reasonChangedAt
  **/
  @javax.annotation.Nullable
  public Integer getReasonChangedAt() {
    return reasonChangedAt;
  }


  public void setReasonChangedAt(Integer reasonChangedAt) {
    this.reasonChangedAt = reasonChangedAt;
  }


  public V0037Node reasonSetByUser(String reasonSetByUser) {
    
    this.reasonSetByUser = reasonSetByUser;
    return this;
  }

   /**
   * User that set the reason
   * @return reasonSetByUser
  **/
  @javax.annotation.Nullable
  public String getReasonSetByUser() {
    return reasonSetByUser;
  }


  public void setReasonSetByUser(String reasonSetByUser) {
    this.reasonSetByUser = reasonSetByUser;
  }


  public V0037Node slurmdStartTime(Long slurmdStartTime) {
    
    this.slurmdStartTime = slurmdStartTime;
    return this;
  }

   /**
   * timestamp of slurmd startup
   * @return slurmdStartTime
  **/
  @javax.annotation.Nullable
  public Long getSlurmdStartTime() {
    return slurmdStartTime;
  }


  public void setSlurmdStartTime(Long slurmdStartTime) {
    this.slurmdStartTime = slurmdStartTime;
  }


  public V0037Node sockets(Integer sockets) {
    
    this.sockets = sockets;
    return this;
  }

   /**
   * total number of sockets per node
   * @return sockets
  **/
  @javax.annotation.Nullable
  public Integer getSockets() {
    return sockets;
  }


  public void setSockets(Integer sockets) {
    this.sockets = sockets;
  }


  public V0037Node threads(Integer threads) {
    
    this.threads = threads;
    return this;
  }

   /**
   * number of threads per core
   * @return threads
  **/
  @javax.annotation.Nullable
  public Integer getThreads() {
    return threads;
  }


  public void setThreads(Integer threads) {
    this.threads = threads;
  }


  public V0037Node temporaryDisk(Integer temporaryDisk) {
    
    this.temporaryDisk = temporaryDisk;
    return this;
  }

   /**
   * configured MB of total disk in TMP_FS
   * @return temporaryDisk
  **/
  @javax.annotation.Nullable
  public Integer getTemporaryDisk() {
    return temporaryDisk;
  }


  public void setTemporaryDisk(Integer temporaryDisk) {
    this.temporaryDisk = temporaryDisk;
  }


  public V0037Node weight(Integer weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * arbitrary priority of node for scheduling
   * @return weight
  **/
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }


  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public V0037Node tres(String tres) {
    
    this.tres = tres;
    return this;
  }

   /**
   * TRES on node
   * @return tres
  **/
  @javax.annotation.Nullable
  public String getTres() {
    return tres;
  }


  public void setTres(String tres) {
    this.tres = tres;
  }


  public V0037Node tresUsed(String tresUsed) {
    
    this.tresUsed = tresUsed;
    return this;
  }

   /**
   * TRES used on node
   * @return tresUsed
  **/
  @javax.annotation.Nullable
  public String getTresUsed() {
    return tresUsed;
  }


  public void setTresUsed(String tresUsed) {
    this.tresUsed = tresUsed;
  }


  public V0037Node tresWeighted(Double tresWeighted) {
    
    this.tresWeighted = tresWeighted;
    return this;
  }

   /**
   * TRES weight used on node
   * @return tresWeighted
  **/
  @javax.annotation.Nullable
  public Double getTresWeighted() {
    return tresWeighted;
  }


  public void setTresWeighted(Double tresWeighted) {
    this.tresWeighted = tresWeighted;
  }


  public V0037Node slurmdVersion(String slurmdVersion) {
    
    this.slurmdVersion = slurmdVersion;
    return this;
  }

   /**
   * Slurmd version
   * @return slurmdVersion
  **/
  @javax.annotation.Nullable
  public String getSlurmdVersion() {
    return slurmdVersion;
  }


  public void setSlurmdVersion(String slurmdVersion) {
    this.slurmdVersion = slurmdVersion;
  }


  public V0037Node allocCpus(Long allocCpus) {
    
    this.allocCpus = allocCpus;
    return this;
  }

   /**
   * Allocated CPUs
   * @return allocCpus
  **/
  @javax.annotation.Nullable
  public Long getAllocCpus() {
    return allocCpus;
  }


  public void setAllocCpus(Long allocCpus) {
    this.allocCpus = allocCpus;
  }


  public V0037Node idleCpus(Long idleCpus) {
    
    this.idleCpus = idleCpus;
    return this;
  }

   /**
   * Idle CPUs
   * @return idleCpus
  **/
  @javax.annotation.Nullable
  public Long getIdleCpus() {
    return idleCpus;
  }


  public void setIdleCpus(Long idleCpus) {
    this.idleCpus = idleCpus;
  }


  public V0037Node allocMemory(Long allocMemory) {
    
    this.allocMemory = allocMemory;
    return this;
  }

   /**
   * Allocated memory (MB)
   * @return allocMemory
  **/
  @javax.annotation.Nullable
  public Long getAllocMemory() {
    return allocMemory;
  }


  public void setAllocMemory(Long allocMemory) {
    this.allocMemory = allocMemory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V0037Node v0037Node = (V0037Node) o;
    return Objects.equals(this.architecture, v0037Node.architecture) &&
        Objects.equals(this.burstbufferNetworkAddress, v0037Node.burstbufferNetworkAddress) &&
        Objects.equals(this.boards, v0037Node.boards) &&
        Objects.equals(this.bootTime, v0037Node.bootTime) &&
        Objects.equals(this.cores, v0037Node.cores) &&
        Objects.equals(this.cpuBinding, v0037Node.cpuBinding) &&
        Objects.equals(this.cpuLoad, v0037Node.cpuLoad) &&
        Objects.equals(this.freeMemory, v0037Node.freeMemory) &&
        Objects.equals(this.cpus, v0037Node.cpus) &&
        Objects.equals(this.features, v0037Node.features) &&
        Objects.equals(this.activeFeatures, v0037Node.activeFeatures) &&
        Objects.equals(this.gres, v0037Node.gres) &&
        Objects.equals(this.gresDrained, v0037Node.gresDrained) &&
        Objects.equals(this.gresUsed, v0037Node.gresUsed) &&
        Objects.equals(this.mcsLabel, v0037Node.mcsLabel) &&
        Objects.equals(this.name, v0037Node.name) &&
        Objects.equals(this.nextStateAfterReboot, v0037Node.nextStateAfterReboot) &&
        Objects.equals(this.nextStateAfterRebootFlags, v0037Node.nextStateAfterRebootFlags) &&
        Objects.equals(this.address, v0037Node.address) &&
        Objects.equals(this.hostname, v0037Node.hostname) &&
        Objects.equals(this.state, v0037Node.state) &&
        Objects.equals(this.stateFlags, v0037Node.stateFlags) &&
        Objects.equals(this.operatingSystem, v0037Node.operatingSystem) &&
        Objects.equals(this.owner, v0037Node.owner) &&
        Objects.equals(this.partitions, v0037Node.partitions) &&
        Objects.equals(this.port, v0037Node.port) &&
        Objects.equals(this.realMemory, v0037Node.realMemory) &&
        Objects.equals(this.reason, v0037Node.reason) &&
        Objects.equals(this.reasonChangedAt, v0037Node.reasonChangedAt) &&
        Objects.equals(this.reasonSetByUser, v0037Node.reasonSetByUser) &&
        Objects.equals(this.slurmdStartTime, v0037Node.slurmdStartTime) &&
        Objects.equals(this.sockets, v0037Node.sockets) &&
        Objects.equals(this.threads, v0037Node.threads) &&
        Objects.equals(this.temporaryDisk, v0037Node.temporaryDisk) &&
        Objects.equals(this.weight, v0037Node.weight) &&
        Objects.equals(this.tres, v0037Node.tres) &&
        Objects.equals(this.tresUsed, v0037Node.tresUsed) &&
        Objects.equals(this.tresWeighted, v0037Node.tresWeighted) &&
        Objects.equals(this.slurmdVersion, v0037Node.slurmdVersion) &&
        Objects.equals(this.allocCpus, v0037Node.allocCpus) &&
        Objects.equals(this.idleCpus, v0037Node.idleCpus) &&
        Objects.equals(this.allocMemory, v0037Node.allocMemory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, burstbufferNetworkAddress, boards, bootTime, cores, cpuBinding, cpuLoad, freeMemory, cpus, features, activeFeatures, gres, gresDrained, gresUsed, mcsLabel, name, nextStateAfterReboot, nextStateAfterRebootFlags, address, hostname, state, stateFlags, operatingSystem, owner, partitions, port, realMemory, reason, reasonChangedAt, reasonSetByUser, slurmdStartTime, sockets, threads, temporaryDisk, weight, tres, tresUsed, tresWeighted, slurmdVersion, allocCpus, idleCpus, allocMemory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V0037Node {\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    burstbufferNetworkAddress: ").append(toIndentedString(burstbufferNetworkAddress)).append("\n");
    sb.append("    boards: ").append(toIndentedString(boards)).append("\n");
    sb.append("    bootTime: ").append(toIndentedString(bootTime)).append("\n");
    sb.append("    cores: ").append(toIndentedString(cores)).append("\n");
    sb.append("    cpuBinding: ").append(toIndentedString(cpuBinding)).append("\n");
    sb.append("    cpuLoad: ").append(toIndentedString(cpuLoad)).append("\n");
    sb.append("    freeMemory: ").append(toIndentedString(freeMemory)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    activeFeatures: ").append(toIndentedString(activeFeatures)).append("\n");
    sb.append("    gres: ").append(toIndentedString(gres)).append("\n");
    sb.append("    gresDrained: ").append(toIndentedString(gresDrained)).append("\n");
    sb.append("    gresUsed: ").append(toIndentedString(gresUsed)).append("\n");
    sb.append("    mcsLabel: ").append(toIndentedString(mcsLabel)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextStateAfterReboot: ").append(toIndentedString(nextStateAfterReboot)).append("\n");
    sb.append("    nextStateAfterRebootFlags: ").append(toIndentedString(nextStateAfterRebootFlags)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateFlags: ").append(toIndentedString(stateFlags)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    realMemory: ").append(toIndentedString(realMemory)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonChangedAt: ").append(toIndentedString(reasonChangedAt)).append("\n");
    sb.append("    reasonSetByUser: ").append(toIndentedString(reasonSetByUser)).append("\n");
    sb.append("    slurmdStartTime: ").append(toIndentedString(slurmdStartTime)).append("\n");
    sb.append("    sockets: ").append(toIndentedString(sockets)).append("\n");
    sb.append("    threads: ").append(toIndentedString(threads)).append("\n");
    sb.append("    temporaryDisk: ").append(toIndentedString(temporaryDisk)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    tres: ").append(toIndentedString(tres)).append("\n");
    sb.append("    tresUsed: ").append(toIndentedString(tresUsed)).append("\n");
    sb.append("    tresWeighted: ").append(toIndentedString(tresWeighted)).append("\n");
    sb.append("    slurmdVersion: ").append(toIndentedString(slurmdVersion)).append("\n");
    sb.append("    allocCpus: ").append(toIndentedString(allocCpus)).append("\n");
    sb.append("    idleCpus: ").append(toIndentedString(idleCpus)).append("\n");
    sb.append("    allocMemory: ").append(toIndentedString(allocMemory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("architecture");
    openapiFields.add("burstbuffer_network_address");
    openapiFields.add("boards");
    openapiFields.add("boot_time");
    openapiFields.add("cores");
    openapiFields.add("cpu_binding");
    openapiFields.add("cpu_load");
    openapiFields.add("free_memory");
    openapiFields.add("cpus");
    openapiFields.add("features");
    openapiFields.add("active_features");
    openapiFields.add("gres");
    openapiFields.add("gres_drained");
    openapiFields.add("gres_used");
    openapiFields.add("mcs_label");
    openapiFields.add("name");
    openapiFields.add("next_state_after_reboot");
    openapiFields.add("next_state_after_reboot_flags");
    openapiFields.add("address");
    openapiFields.add("hostname");
    openapiFields.add("state");
    openapiFields.add("state_flags");
    openapiFields.add("operating_system");
    openapiFields.add("owner");
    openapiFields.add("partitions");
    openapiFields.add("port");
    openapiFields.add("real_memory");
    openapiFields.add("reason");
    openapiFields.add("reason_changed_at");
    openapiFields.add("reason_set_by_user");
    openapiFields.add("slurmd_start_time");
    openapiFields.add("sockets");
    openapiFields.add("threads");
    openapiFields.add("temporary_disk");
    openapiFields.add("weight");
    openapiFields.add("tres");
    openapiFields.add("tres_used");
    openapiFields.add("tres_weighted");
    openapiFields.add("slurmd_version");
    openapiFields.add("alloc_cpus");
    openapiFields.add("idle_cpus");
    openapiFields.add("alloc_memory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V0037Node
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V0037Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V0037Node is not found in the empty JSON string", V0037Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V0037Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V0037Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) && !jsonObj.get("architecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architecture").toString()));
      }
      if ((jsonObj.get("burstbuffer_network_address") != null && !jsonObj.get("burstbuffer_network_address").isJsonNull()) && !jsonObj.get("burstbuffer_network_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `burstbuffer_network_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("burstbuffer_network_address").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("active_features") != null && !jsonObj.get("active_features").isJsonNull()) && !jsonObj.get("active_features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_features").toString()));
      }
      if ((jsonObj.get("gres") != null && !jsonObj.get("gres").isJsonNull()) && !jsonObj.get("gres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gres").toString()));
      }
      if ((jsonObj.get("gres_drained") != null && !jsonObj.get("gres_drained").isJsonNull()) && !jsonObj.get("gres_drained").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gres_drained` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gres_drained").toString()));
      }
      if ((jsonObj.get("gres_used") != null && !jsonObj.get("gres_used").isJsonNull()) && !jsonObj.get("gres_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gres_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gres_used").toString()));
      }
      if ((jsonObj.get("mcs_label") != null && !jsonObj.get("mcs_label").isJsonNull()) && !jsonObj.get("mcs_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcs_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcs_label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("next_state_after_reboot") != null && !jsonObj.get("next_state_after_reboot").isJsonNull()) && !jsonObj.get("next_state_after_reboot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_state_after_reboot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_state_after_reboot").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("next_state_after_reboot_flags") != null && !jsonObj.get("next_state_after_reboot_flags").isJsonNull() && !jsonObj.get("next_state_after_reboot_flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_state_after_reboot_flags` to be an array in the JSON string but got `%s`", jsonObj.get("next_state_after_reboot_flags").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("state_flags") != null && !jsonObj.get("state_flags").isJsonNull() && !jsonObj.get("state_flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_flags` to be an array in the JSON string but got `%s`", jsonObj.get("state_flags").toString()));
      }
      if ((jsonObj.get("operating_system") != null && !jsonObj.get("operating_system").isJsonNull()) && !jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("partitions") != null && !jsonObj.get("partitions").isJsonNull() && !jsonObj.get("partitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitions` to be an array in the JSON string but got `%s`", jsonObj.get("partitions").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reason_set_by_user") != null && !jsonObj.get("reason_set_by_user").isJsonNull()) && !jsonObj.get("reason_set_by_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason_set_by_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason_set_by_user").toString()));
      }
      if ((jsonObj.get("tres") != null && !jsonObj.get("tres").isJsonNull()) && !jsonObj.get("tres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres").toString()));
      }
      if ((jsonObj.get("tres_used") != null && !jsonObj.get("tres_used").isJsonNull()) && !jsonObj.get("tres_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_used").toString()));
      }
      if ((jsonObj.get("slurmd_version") != null && !jsonObj.get("slurmd_version").isJsonNull()) && !jsonObj.get("slurmd_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slurmd_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slurmd_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V0037Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V0037Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V0037Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V0037Node.class));

       return (TypeAdapter<T>) new TypeAdapter<V0037Node>() {
           @Override
           public void write(JsonWriter out, V0037Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V0037Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V0037Node given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V0037Node
  * @throws IOException if the JSON string is invalid with respect to V0037Node
  */
  public static V0037Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V0037Node.class);
  }

 /**
  * Convert an instance of V0037Node to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

