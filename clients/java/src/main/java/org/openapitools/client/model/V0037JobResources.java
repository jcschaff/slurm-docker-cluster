/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V0037NodeAllocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V0037JobResources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V0037JobResources {
  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private String nodes;

  public static final String SERIALIZED_NAME_ALLOCATED_CPUS = "allocated_cpus";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_CPUS)
  private Integer allocatedCpus;

  public static final String SERIALIZED_NAME_ALLOCATED_HOSTS = "allocated_hosts";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_HOSTS)
  private Integer allocatedHosts;

  public static final String SERIALIZED_NAME_ALLOCATED_NODES = "allocated_nodes";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_NODES)
  private List<V0037NodeAllocation> allocatedNodes;

  public V0037JobResources() {
  }

  public V0037JobResources nodes(String nodes) {
    
    this.nodes = nodes;
    return this;
  }

   /**
   * list of assigned job nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  public String getNodes() {
    return nodes;
  }


  public void setNodes(String nodes) {
    this.nodes = nodes;
  }


  public V0037JobResources allocatedCpus(Integer allocatedCpus) {
    
    this.allocatedCpus = allocatedCpus;
    return this;
  }

   /**
   * number of assigned job cpus
   * @return allocatedCpus
  **/
  @javax.annotation.Nullable
  public Integer getAllocatedCpus() {
    return allocatedCpus;
  }


  public void setAllocatedCpus(Integer allocatedCpus) {
    this.allocatedCpus = allocatedCpus;
  }


  public V0037JobResources allocatedHosts(Integer allocatedHosts) {
    
    this.allocatedHosts = allocatedHosts;
    return this;
  }

   /**
   * number of assigned job hosts
   * @return allocatedHosts
  **/
  @javax.annotation.Nullable
  public Integer getAllocatedHosts() {
    return allocatedHosts;
  }


  public void setAllocatedHosts(Integer allocatedHosts) {
    this.allocatedHosts = allocatedHosts;
  }


  public V0037JobResources allocatedNodes(List<V0037NodeAllocation> allocatedNodes) {
    
    this.allocatedNodes = allocatedNodes;
    return this;
  }

  public V0037JobResources addAllocatedNodesItem(V0037NodeAllocation allocatedNodesItem) {
    if (this.allocatedNodes == null) {
      this.allocatedNodes = new ArrayList<>();
    }
    this.allocatedNodes.add(allocatedNodesItem);
    return this;
  }

   /**
   * node allocations
   * @return allocatedNodes
  **/
  @javax.annotation.Nullable
  public List<V0037NodeAllocation> getAllocatedNodes() {
    return allocatedNodes;
  }


  public void setAllocatedNodes(List<V0037NodeAllocation> allocatedNodes) {
    this.allocatedNodes = allocatedNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V0037JobResources v0037JobResources = (V0037JobResources) o;
    return Objects.equals(this.nodes, v0037JobResources.nodes) &&
        Objects.equals(this.allocatedCpus, v0037JobResources.allocatedCpus) &&
        Objects.equals(this.allocatedHosts, v0037JobResources.allocatedHosts) &&
        Objects.equals(this.allocatedNodes, v0037JobResources.allocatedNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, allocatedCpus, allocatedHosts, allocatedNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V0037JobResources {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    allocatedCpus: ").append(toIndentedString(allocatedCpus)).append("\n");
    sb.append("    allocatedHosts: ").append(toIndentedString(allocatedHosts)).append("\n");
    sb.append("    allocatedNodes: ").append(toIndentedString(allocatedNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodes");
    openapiFields.add("allocated_cpus");
    openapiFields.add("allocated_hosts");
    openapiFields.add("allocated_nodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V0037JobResources
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V0037JobResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V0037JobResources is not found in the empty JSON string", V0037JobResources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V0037JobResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V0037JobResources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) && !jsonObj.get("nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if (jsonObj.get("allocated_nodes") != null && !jsonObj.get("allocated_nodes").isJsonNull()) {
        JsonArray jsonArrayallocatedNodes = jsonObj.getAsJsonArray("allocated_nodes");
        if (jsonArrayallocatedNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allocated_nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allocated_nodes` to be an array in the JSON string but got `%s`", jsonObj.get("allocated_nodes").toString()));
          }

          // validate the optional field `allocated_nodes` (array)
          for (int i = 0; i < jsonArrayallocatedNodes.size(); i++) {
            V0037NodeAllocation.validateJsonElement(jsonArrayallocatedNodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V0037JobResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V0037JobResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V0037JobResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V0037JobResources.class));

       return (TypeAdapter<T>) new TypeAdapter<V0037JobResources>() {
           @Override
           public void write(JsonWriter out, V0037JobResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V0037JobResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V0037JobResources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V0037JobResources
  * @throws IOException if the JSON string is invalid with respect to V0037JobResources
  */
  public static V0037JobResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V0037JobResources.class);
  }

 /**
  * Convert an instance of V0037JobResources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

