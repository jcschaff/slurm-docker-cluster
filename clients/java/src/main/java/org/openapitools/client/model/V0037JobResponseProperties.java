/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V0037JobResources;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V0037JobResponseProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V0037JobResponseProperties {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ACCRUE_TIME = "accrue_time";
  @SerializedName(SERIALIZED_NAME_ACCRUE_TIME)
  private Long accrueTime;

  public static final String SERIALIZED_NAME_ADMIN_COMMENT = "admin_comment";
  @SerializedName(SERIALIZED_NAME_ADMIN_COMMENT)
  private String adminComment;

  public static final String SERIALIZED_NAME_ARRAY_JOB_ID = "array_job_id";
  @SerializedName(SERIALIZED_NAME_ARRAY_JOB_ID)
  private String arrayJobId;

  public static final String SERIALIZED_NAME_ARRAY_TASK_ID = "array_task_id";
  @SerializedName(SERIALIZED_NAME_ARRAY_TASK_ID)
  private String arrayTaskId;

  public static final String SERIALIZED_NAME_ARRAY_MAX_TASKS = "array_max_tasks";
  @SerializedName(SERIALIZED_NAME_ARRAY_MAX_TASKS)
  private String arrayMaxTasks;

  public static final String SERIALIZED_NAME_ARRAY_TASK_STRING = "array_task_string";
  @SerializedName(SERIALIZED_NAME_ARRAY_TASK_STRING)
  private String arrayTaskString;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "association_id";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_BATCH_FEATURES = "batch_features";
  @SerializedName(SERIALIZED_NAME_BATCH_FEATURES)
  private String batchFeatures;

  public static final String SERIALIZED_NAME_BATCH_FLAG = "batch_flag";
  @SerializedName(SERIALIZED_NAME_BATCH_FLAG)
  private Boolean batchFlag;

  public static final String SERIALIZED_NAME_BATCH_HOST = "batch_host";
  @SerializedName(SERIALIZED_NAME_BATCH_HOST)
  private String batchHost;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public static final String SERIALIZED_NAME_BURST_BUFFER = "burst_buffer";
  @SerializedName(SERIALIZED_NAME_BURST_BUFFER)
  private String burstBuffer;

  public static final String SERIALIZED_NAME_BURST_BUFFER_STATE = "burst_buffer_state";
  @SerializedName(SERIALIZED_NAME_BURST_BUFFER_STATE)
  private String burstBufferState;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CLUSTER_FEATURES = "cluster_features";
  @SerializedName(SERIALIZED_NAME_CLUSTER_FEATURES)
  private String clusterFeatures;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private String command;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONTIGUOUS = "contiguous";
  @SerializedName(SERIALIZED_NAME_CONTIGUOUS)
  private Boolean contiguous;

  public static final String SERIALIZED_NAME_CORE_SPEC = "core_spec";
  @SerializedName(SERIALIZED_NAME_CORE_SPEC)
  private String coreSpec;

  public static final String SERIALIZED_NAME_THREAD_SPEC = "thread_spec";
  @SerializedName(SERIALIZED_NAME_THREAD_SPEC)
  private String threadSpec;

  public static final String SERIALIZED_NAME_CORES_PER_SOCKET = "cores_per_socket";
  @SerializedName(SERIALIZED_NAME_CORES_PER_SOCKET)
  private String coresPerSocket;

  public static final String SERIALIZED_NAME_BILLABLE_TRES = "billable_tres";
  @SerializedName(SERIALIZED_NAME_BILLABLE_TRES)
  private String billableTres;

  public static final String SERIALIZED_NAME_CPUS_PER_TASK = "cpus_per_task";
  @SerializedName(SERIALIZED_NAME_CPUS_PER_TASK)
  private String cpusPerTask;

  public static final String SERIALIZED_NAME_CPU_FREQUENCY_MINIMUM = "cpu_frequency_minimum";
  @SerializedName(SERIALIZED_NAME_CPU_FREQUENCY_MINIMUM)
  private String cpuFrequencyMinimum;

  public static final String SERIALIZED_NAME_CPU_FREQUENCY_MAXIMUM = "cpu_frequency_maximum";
  @SerializedName(SERIALIZED_NAME_CPU_FREQUENCY_MAXIMUM)
  private String cpuFrequencyMaximum;

  public static final String SERIALIZED_NAME_CPU_FREQUENCY_GOVERNOR = "cpu_frequency_governor";
  @SerializedName(SERIALIZED_NAME_CPU_FREQUENCY_GOVERNOR)
  private String cpuFrequencyGovernor;

  public static final String SERIALIZED_NAME_CPUS_PER_TRES = "cpus_per_tres";
  @SerializedName(SERIALIZED_NAME_CPUS_PER_TRES)
  private String cpusPerTres;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private String deadline;

  public static final String SERIALIZED_NAME_DELAY_BOOT = "delay_boot";
  @SerializedName(SERIALIZED_NAME_DELAY_BOOT)
  private String delayBoot;

  public static final String SERIALIZED_NAME_DEPENDENCY = "dependency";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY)
  private String dependency;

  public static final String SERIALIZED_NAME_DERIVED_EXIT_CODE = "derived_exit_code";
  @SerializedName(SERIALIZED_NAME_DERIVED_EXIT_CODE)
  private String derivedExitCode;

  public static final String SERIALIZED_NAME_ELIGIBLE_TIME = "eligible_time";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_TIME)
  private Long eligibleTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_EXCLUDED_NODES = "excluded_nodes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_NODES)
  private String excludedNodes;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exit_code";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private String features;

  public static final String SERIALIZED_NAME_FEDERATION_ORIGIN = "federation_origin";
  @SerializedName(SERIALIZED_NAME_FEDERATION_ORIGIN)
  private String federationOrigin;

  public static final String SERIALIZED_NAME_FEDERATION_SIBLINGS_ACTIVE = "federation_siblings_active";
  @SerializedName(SERIALIZED_NAME_FEDERATION_SIBLINGS_ACTIVE)
  private String federationSiblingsActive;

  public static final String SERIALIZED_NAME_FEDERATION_SIBLINGS_VIABLE = "federation_siblings_viable";
  @SerializedName(SERIALIZED_NAME_FEDERATION_SIBLINGS_VIABLE)
  private String federationSiblingsViable;

  public static final String SERIALIZED_NAME_GRES_DETAIL = "gres_detail";
  @SerializedName(SERIALIZED_NAME_GRES_DETAIL)
  private List<String> gresDetail;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_RESOURCES = "job_resources";
  @SerializedName(SERIALIZED_NAME_JOB_RESOURCES)
  private V0037JobResources jobResources;

  public static final String SERIALIZED_NAME_JOB_STATE = "job_state";
  @SerializedName(SERIALIZED_NAME_JOB_STATE)
  private String jobState;

  public static final String SERIALIZED_NAME_LAST_SCHED_EVALUATION = "last_sched_evaluation";
  @SerializedName(SERIALIZED_NAME_LAST_SCHED_EVALUATION)
  private String lastSchedEvaluation;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private String licenses;

  public static final String SERIALIZED_NAME_MAX_CPUS = "max_cpus";
  @SerializedName(SERIALIZED_NAME_MAX_CPUS)
  private String maxCpus;

  public static final String SERIALIZED_NAME_MAX_NODES = "max_nodes";
  @SerializedName(SERIALIZED_NAME_MAX_NODES)
  private String maxNodes;

  public static final String SERIALIZED_NAME_MCS_LABEL = "mcs_label";
  @SerializedName(SERIALIZED_NAME_MCS_LABEL)
  private String mcsLabel;

  public static final String SERIALIZED_NAME_MEMORY_PER_TRES = "memory_per_tres";
  @SerializedName(SERIALIZED_NAME_MEMORY_PER_TRES)
  private String memoryPerTres;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private String nodes;

  public static final String SERIALIZED_NAME_NICE = "nice";
  @SerializedName(SERIALIZED_NAME_NICE)
  private String nice;

  public static final String SERIALIZED_NAME_TASKS_PER_CORE = "tasks_per_core";
  @SerializedName(SERIALIZED_NAME_TASKS_PER_CORE)
  private String tasksPerCore;

  public static final String SERIALIZED_NAME_TASKS_PER_SOCKET = "tasks_per_socket";
  @SerializedName(SERIALIZED_NAME_TASKS_PER_SOCKET)
  private String tasksPerSocket;

  public static final String SERIALIZED_NAME_TASKS_PER_BOARD = "tasks_per_board";
  @SerializedName(SERIALIZED_NAME_TASKS_PER_BOARD)
  private String tasksPerBoard;

  public static final String SERIALIZED_NAME_CPUS = "cpus";
  @SerializedName(SERIALIZED_NAME_CPUS)
  private String cpus;

  public static final String SERIALIZED_NAME_NODE_COUNT = "node_count";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private String nodeCount;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private String tasks;

  public static final String SERIALIZED_NAME_HET_JOB_ID = "het_job_id";
  @SerializedName(SERIALIZED_NAME_HET_JOB_ID)
  private String hetJobId;

  public static final String SERIALIZED_NAME_HET_JOB_ID_SET = "het_job_id_set";
  @SerializedName(SERIALIZED_NAME_HET_JOB_ID_SET)
  private String hetJobIdSet;

  public static final String SERIALIZED_NAME_HET_JOB_OFFSET = "het_job_offset";
  @SerializedName(SERIALIZED_NAME_HET_JOB_OFFSET)
  private String hetJobOffset;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_MEMORY_PER_NODE = "memory_per_node";
  @SerializedName(SERIALIZED_NAME_MEMORY_PER_NODE)
  private String memoryPerNode;

  public static final String SERIALIZED_NAME_MEMORY_PER_CPU = "memory_per_cpu";
  @SerializedName(SERIALIZED_NAME_MEMORY_PER_CPU)
  private String memoryPerCpu;

  public static final String SERIALIZED_NAME_MINIMUM_CPUS_PER_NODE = "minimum_cpus_per_node";
  @SerializedName(SERIALIZED_NAME_MINIMUM_CPUS_PER_NODE)
  private String minimumCpusPerNode;

  public static final String SERIALIZED_NAME_MINIMUM_TMP_DISK_PER_NODE = "minimum_tmp_disk_per_node";
  @SerializedName(SERIALIZED_NAME_MINIMUM_TMP_DISK_PER_NODE)
  private String minimumTmpDiskPerNode;

  public static final String SERIALIZED_NAME_PREEMPT_TIME = "preempt_time";
  @SerializedName(SERIALIZED_NAME_PREEMPT_TIME)
  private Long preemptTime;

  public static final String SERIALIZED_NAME_PRE_SUS_TIME = "pre_sus_time";
  @SerializedName(SERIALIZED_NAME_PRE_SUS_TIME)
  private Long preSusTime;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private List<String> profile;

  public static final String SERIALIZED_NAME_QOS = "qos";
  @SerializedName(SERIALIZED_NAME_QOS)
  private String qos;

  public static final String SERIALIZED_NAME_REBOOT = "reboot";
  @SerializedName(SERIALIZED_NAME_REBOOT)
  private Boolean reboot;

  public static final String SERIALIZED_NAME_REQUIRED_NODES = "required_nodes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_NODES)
  private String requiredNodes;

  public static final String SERIALIZED_NAME_REQUEUE = "requeue";
  @SerializedName(SERIALIZED_NAME_REQUEUE)
  private Boolean requeue;

  public static final String SERIALIZED_NAME_RESIZE_TIME = "resize_time";
  @SerializedName(SERIALIZED_NAME_RESIZE_TIME)
  private Long resizeTime;

  public static final String SERIALIZED_NAME_RESTART_CNT = "restart_cnt";
  @SerializedName(SERIALIZED_NAME_RESTART_CNT)
  private String restartCnt;

  public static final String SERIALIZED_NAME_RESV_NAME = "resv_name";
  @SerializedName(SERIALIZED_NAME_RESV_NAME)
  private String resvName;

  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private String shared;

  public static final String SERIALIZED_NAME_SHOW_FLAGS = "show_flags";
  @SerializedName(SERIALIZED_NAME_SHOW_FLAGS)
  private List<String> showFlags;

  public static final String SERIALIZED_NAME_SOCKETS_PER_BOARD = "sockets_per_board";
  @SerializedName(SERIALIZED_NAME_SOCKETS_PER_BOARD)
  private String socketsPerBoard;

  public static final String SERIALIZED_NAME_SOCKETS_PER_NODE = "sockets_per_node";
  @SerializedName(SERIALIZED_NAME_SOCKETS_PER_NODE)
  private String socketsPerNode;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Long startTime;

  public static final String SERIALIZED_NAME_STATE_DESCRIPTION = "state_description";
  @SerializedName(SERIALIZED_NAME_STATE_DESCRIPTION)
  private String stateDescription;

  public static final String SERIALIZED_NAME_STATE_REASON = "state_reason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_STANDARD_ERROR = "standard_error";
  @SerializedName(SERIALIZED_NAME_STANDARD_ERROR)
  private String standardError;

  public static final String SERIALIZED_NAME_STANDARD_INPUT = "standard_input";
  @SerializedName(SERIALIZED_NAME_STANDARD_INPUT)
  private String standardInput;

  public static final String SERIALIZED_NAME_STANDARD_OUTPUT = "standard_output";
  @SerializedName(SERIALIZED_NAME_STANDARD_OUTPUT)
  private String standardOutput;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "submit_time";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private Long submitTime;

  public static final String SERIALIZED_NAME_SUSPEND_TIME = "suspend_time";
  @SerializedName(SERIALIZED_NAME_SUSPEND_TIME)
  private Long suspendTime;

  public static final String SERIALIZED_NAME_SYSTEM_COMMENT = "system_comment";
  @SerializedName(SERIALIZED_NAME_SYSTEM_COMMENT)
  private String systemComment;

  public static final String SERIALIZED_NAME_TIME_LIMIT = "time_limit";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT)
  private String timeLimit;

  public static final String SERIALIZED_NAME_TIME_MINIMUM = "time_minimum";
  @SerializedName(SERIALIZED_NAME_TIME_MINIMUM)
  private String timeMinimum;

  public static final String SERIALIZED_NAME_THREADS_PER_CORE = "threads_per_core";
  @SerializedName(SERIALIZED_NAME_THREADS_PER_CORE)
  private String threadsPerCore;

  public static final String SERIALIZED_NAME_TRES_BIND = "tres_bind";
  @SerializedName(SERIALIZED_NAME_TRES_BIND)
  private String tresBind;

  public static final String SERIALIZED_NAME_TRES_FREQ = "tres_freq";
  @SerializedName(SERIALIZED_NAME_TRES_FREQ)
  private String tresFreq;

  public static final String SERIALIZED_NAME_TRES_PER_JOB = "tres_per_job";
  @SerializedName(SERIALIZED_NAME_TRES_PER_JOB)
  private String tresPerJob;

  public static final String SERIALIZED_NAME_TRES_PER_NODE = "tres_per_node";
  @SerializedName(SERIALIZED_NAME_TRES_PER_NODE)
  private String tresPerNode;

  public static final String SERIALIZED_NAME_TRES_PER_SOCKET = "tres_per_socket";
  @SerializedName(SERIALIZED_NAME_TRES_PER_SOCKET)
  private String tresPerSocket;

  public static final String SERIALIZED_NAME_TRES_PER_TASK = "tres_per_task";
  @SerializedName(SERIALIZED_NAME_TRES_PER_TASK)
  private String tresPerTask;

  public static final String SERIALIZED_NAME_TRES_REQ_STR = "tres_req_str";
  @SerializedName(SERIALIZED_NAME_TRES_REQ_STR)
  private String tresReqStr;

  public static final String SERIALIZED_NAME_TRES_ALLOC_STR = "tres_alloc_str";
  @SerializedName(SERIALIZED_NAME_TRES_ALLOC_STR)
  private String tresAllocStr;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_WCKEY = "wckey";
  @SerializedName(SERIALIZED_NAME_WCKEY)
  private String wckey;

  public static final String SERIALIZED_NAME_CURRENT_WORKING_DIRECTORY = "current_working_directory";
  @SerializedName(SERIALIZED_NAME_CURRENT_WORKING_DIRECTORY)
  private String currentWorkingDirectory;

  public V0037JobResponseProperties() {
  }

  public V0037JobResponseProperties account(String account) {
    
    this.account = account;
    return this;
  }

   /**
   * Charge resources used by this job to specified account
   * @return account
  **/
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    this.account = account;
  }


  public V0037JobResponseProperties accrueTime(Long accrueTime) {
    
    this.accrueTime = accrueTime;
    return this;
  }

   /**
   * time job is eligible for running
   * @return accrueTime
  **/
  @javax.annotation.Nullable
  public Long getAccrueTime() {
    return accrueTime;
  }


  public void setAccrueTime(Long accrueTime) {
    this.accrueTime = accrueTime;
  }


  public V0037JobResponseProperties adminComment(String adminComment) {
    
    this.adminComment = adminComment;
    return this;
  }

   /**
   * administrator&#39;s arbitrary comment
   * @return adminComment
  **/
  @javax.annotation.Nullable
  public String getAdminComment() {
    return adminComment;
  }


  public void setAdminComment(String adminComment) {
    this.adminComment = adminComment;
  }


  public V0037JobResponseProperties arrayJobId(String arrayJobId) {
    
    this.arrayJobId = arrayJobId;
    return this;
  }

   /**
   * job_id of a job array or 0 if N/A
   * @return arrayJobId
  **/
  @javax.annotation.Nullable
  public String getArrayJobId() {
    return arrayJobId;
  }


  public void setArrayJobId(String arrayJobId) {
    this.arrayJobId = arrayJobId;
  }


  public V0037JobResponseProperties arrayTaskId(String arrayTaskId) {
    
    this.arrayTaskId = arrayTaskId;
    return this;
  }

   /**
   * task_id of a job array
   * @return arrayTaskId
  **/
  @javax.annotation.Nullable
  public String getArrayTaskId() {
    return arrayTaskId;
  }


  public void setArrayTaskId(String arrayTaskId) {
    this.arrayTaskId = arrayTaskId;
  }


  public V0037JobResponseProperties arrayMaxTasks(String arrayMaxTasks) {
    
    this.arrayMaxTasks = arrayMaxTasks;
    return this;
  }

   /**
   * Maximum number of running array tasks
   * @return arrayMaxTasks
  **/
  @javax.annotation.Nullable
  public String getArrayMaxTasks() {
    return arrayMaxTasks;
  }


  public void setArrayMaxTasks(String arrayMaxTasks) {
    this.arrayMaxTasks = arrayMaxTasks;
  }


  public V0037JobResponseProperties arrayTaskString(String arrayTaskString) {
    
    this.arrayTaskString = arrayTaskString;
    return this;
  }

   /**
   * string expression of task IDs in this record
   * @return arrayTaskString
  **/
  @javax.annotation.Nullable
  public String getArrayTaskString() {
    return arrayTaskString;
  }


  public void setArrayTaskString(String arrayTaskString) {
    this.arrayTaskString = arrayTaskString;
  }


  public V0037JobResponseProperties associationId(String associationId) {
    
    this.associationId = associationId;
    return this;
  }

   /**
   * association id for job
   * @return associationId
  **/
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public V0037JobResponseProperties batchFeatures(String batchFeatures) {
    
    this.batchFeatures = batchFeatures;
    return this;
  }

   /**
   * features required for batch script&#39;s node
   * @return batchFeatures
  **/
  @javax.annotation.Nullable
  public String getBatchFeatures() {
    return batchFeatures;
  }


  public void setBatchFeatures(String batchFeatures) {
    this.batchFeatures = batchFeatures;
  }


  public V0037JobResponseProperties batchFlag(Boolean batchFlag) {
    
    this.batchFlag = batchFlag;
    return this;
  }

   /**
   * if batch: queued job with script
   * @return batchFlag
  **/
  @javax.annotation.Nullable
  public Boolean getBatchFlag() {
    return batchFlag;
  }


  public void setBatchFlag(Boolean batchFlag) {
    this.batchFlag = batchFlag;
  }


  public V0037JobResponseProperties batchHost(String batchHost) {
    
    this.batchHost = batchHost;
    return this;
  }

   /**
   * name of host running batch script
   * @return batchHost
  **/
  @javax.annotation.Nullable
  public String getBatchHost() {
    return batchHost;
  }


  public void setBatchHost(String batchHost) {
    this.batchHost = batchHost;
  }


  public V0037JobResponseProperties flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public V0037JobResponseProperties addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * Job flags
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public V0037JobResponseProperties burstBuffer(String burstBuffer) {
    
    this.burstBuffer = burstBuffer;
    return this;
  }

   /**
   * burst buffer specifications
   * @return burstBuffer
  **/
  @javax.annotation.Nullable
  public String getBurstBuffer() {
    return burstBuffer;
  }


  public void setBurstBuffer(String burstBuffer) {
    this.burstBuffer = burstBuffer;
  }


  public V0037JobResponseProperties burstBufferState(String burstBufferState) {
    
    this.burstBufferState = burstBufferState;
    return this;
  }

   /**
   * burst buffer state info
   * @return burstBufferState
  **/
  @javax.annotation.Nullable
  public String getBurstBufferState() {
    return burstBufferState;
  }


  public void setBurstBufferState(String burstBufferState) {
    this.burstBufferState = burstBufferState;
  }


  public V0037JobResponseProperties cluster(String cluster) {
    
    this.cluster = cluster;
    return this;
  }

   /**
   * name of cluster that the job is on
   * @return cluster
  **/
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }


  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public V0037JobResponseProperties clusterFeatures(String clusterFeatures) {
    
    this.clusterFeatures = clusterFeatures;
    return this;
  }

   /**
   * comma separated list of required cluster features
   * @return clusterFeatures
  **/
  @javax.annotation.Nullable
  public String getClusterFeatures() {
    return clusterFeatures;
  }


  public void setClusterFeatures(String clusterFeatures) {
    this.clusterFeatures = clusterFeatures;
  }


  public V0037JobResponseProperties command(String command) {
    
    this.command = command;
    return this;
  }

   /**
   * command to be executed
   * @return command
  **/
  @javax.annotation.Nullable
  public String getCommand() {
    return command;
  }


  public void setCommand(String command) {
    this.command = command;
  }


  public V0037JobResponseProperties comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * arbitrary comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public V0037JobResponseProperties contiguous(Boolean contiguous) {
    
    this.contiguous = contiguous;
    return this;
  }

   /**
   * job requires contiguous nodes
   * @return contiguous
  **/
  @javax.annotation.Nullable
  public Boolean getContiguous() {
    return contiguous;
  }


  public void setContiguous(Boolean contiguous) {
    this.contiguous = contiguous;
  }


  public V0037JobResponseProperties coreSpec(String coreSpec) {
    
    this.coreSpec = coreSpec;
    return this;
  }

   /**
   * specialized core count
   * @return coreSpec
  **/
  @javax.annotation.Nullable
  public String getCoreSpec() {
    return coreSpec;
  }


  public void setCoreSpec(String coreSpec) {
    this.coreSpec = coreSpec;
  }


  public V0037JobResponseProperties threadSpec(String threadSpec) {
    
    this.threadSpec = threadSpec;
    return this;
  }

   /**
   * specialized thread count
   * @return threadSpec
  **/
  @javax.annotation.Nullable
  public String getThreadSpec() {
    return threadSpec;
  }


  public void setThreadSpec(String threadSpec) {
    this.threadSpec = threadSpec;
  }


  public V0037JobResponseProperties coresPerSocket(String coresPerSocket) {
    
    this.coresPerSocket = coresPerSocket;
    return this;
  }

   /**
   * cores per socket required by job
   * @return coresPerSocket
  **/
  @javax.annotation.Nullable
  public String getCoresPerSocket() {
    return coresPerSocket;
  }


  public void setCoresPerSocket(String coresPerSocket) {
    this.coresPerSocket = coresPerSocket;
  }


  public V0037JobResponseProperties billableTres(String billableTres) {
    
    this.billableTres = billableTres;
    return this;
  }

   /**
   * billable TRES
   * @return billableTres
  **/
  @javax.annotation.Nullable
  public String getBillableTres() {
    return billableTres;
  }


  public void setBillableTres(String billableTres) {
    this.billableTres = billableTres;
  }


  public V0037JobResponseProperties cpusPerTask(String cpusPerTask) {
    
    this.cpusPerTask = cpusPerTask;
    return this;
  }

   /**
   * number of processors required for each task
   * @return cpusPerTask
  **/
  @javax.annotation.Nullable
  public String getCpusPerTask() {
    return cpusPerTask;
  }


  public void setCpusPerTask(String cpusPerTask) {
    this.cpusPerTask = cpusPerTask;
  }


  public V0037JobResponseProperties cpuFrequencyMinimum(String cpuFrequencyMinimum) {
    
    this.cpuFrequencyMinimum = cpuFrequencyMinimum;
    return this;
  }

   /**
   * Minimum cpu frequency
   * @return cpuFrequencyMinimum
  **/
  @javax.annotation.Nullable
  public String getCpuFrequencyMinimum() {
    return cpuFrequencyMinimum;
  }


  public void setCpuFrequencyMinimum(String cpuFrequencyMinimum) {
    this.cpuFrequencyMinimum = cpuFrequencyMinimum;
  }


  public V0037JobResponseProperties cpuFrequencyMaximum(String cpuFrequencyMaximum) {
    
    this.cpuFrequencyMaximum = cpuFrequencyMaximum;
    return this;
  }

   /**
   * Maximum cpu frequency
   * @return cpuFrequencyMaximum
  **/
  @javax.annotation.Nullable
  public String getCpuFrequencyMaximum() {
    return cpuFrequencyMaximum;
  }


  public void setCpuFrequencyMaximum(String cpuFrequencyMaximum) {
    this.cpuFrequencyMaximum = cpuFrequencyMaximum;
  }


  public V0037JobResponseProperties cpuFrequencyGovernor(String cpuFrequencyGovernor) {
    
    this.cpuFrequencyGovernor = cpuFrequencyGovernor;
    return this;
  }

   /**
   * cpu frequency governor
   * @return cpuFrequencyGovernor
  **/
  @javax.annotation.Nullable
  public String getCpuFrequencyGovernor() {
    return cpuFrequencyGovernor;
  }


  public void setCpuFrequencyGovernor(String cpuFrequencyGovernor) {
    this.cpuFrequencyGovernor = cpuFrequencyGovernor;
  }


  public V0037JobResponseProperties cpusPerTres(String cpusPerTres) {
    
    this.cpusPerTres = cpusPerTres;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return cpusPerTres
  **/
  @javax.annotation.Nullable
  public String getCpusPerTres() {
    return cpusPerTres;
  }


  public void setCpusPerTres(String cpusPerTres) {
    this.cpusPerTres = cpusPerTres;
  }


  public V0037JobResponseProperties deadline(String deadline) {
    
    this.deadline = deadline;
    return this;
  }

   /**
   * job start deadline 
   * @return deadline
  **/
  @javax.annotation.Nullable
  public String getDeadline() {
    return deadline;
  }


  public void setDeadline(String deadline) {
    this.deadline = deadline;
  }


  public V0037JobResponseProperties delayBoot(String delayBoot) {
    
    this.delayBoot = delayBoot;
    return this;
  }

   /**
   * command to be executed
   * @return delayBoot
  **/
  @javax.annotation.Nullable
  public String getDelayBoot() {
    return delayBoot;
  }


  public void setDelayBoot(String delayBoot) {
    this.delayBoot = delayBoot;
  }


  public V0037JobResponseProperties dependency(String dependency) {
    
    this.dependency = dependency;
    return this;
  }

   /**
   * synchronize job execution with other jobs
   * @return dependency
  **/
  @javax.annotation.Nullable
  public String getDependency() {
    return dependency;
  }


  public void setDependency(String dependency) {
    this.dependency = dependency;
  }


  public V0037JobResponseProperties derivedExitCode(String derivedExitCode) {
    
    this.derivedExitCode = derivedExitCode;
    return this;
  }

   /**
   * highest exit code of all job steps
   * @return derivedExitCode
  **/
  @javax.annotation.Nullable
  public String getDerivedExitCode() {
    return derivedExitCode;
  }


  public void setDerivedExitCode(String derivedExitCode) {
    this.derivedExitCode = derivedExitCode;
  }


  public V0037JobResponseProperties eligibleTime(Long eligibleTime) {
    
    this.eligibleTime = eligibleTime;
    return this;
  }

   /**
   * time job is eligible for running
   * @return eligibleTime
  **/
  @javax.annotation.Nullable
  public Long getEligibleTime() {
    return eligibleTime;
  }


  public void setEligibleTime(Long eligibleTime) {
    this.eligibleTime = eligibleTime;
  }


  public V0037JobResponseProperties endTime(Long endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * time of termination, actual or expected
   * @return endTime
  **/
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }


  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public V0037JobResponseProperties excludedNodes(String excludedNodes) {
    
    this.excludedNodes = excludedNodes;
    return this;
  }

   /**
   * comma separated list of excluded nodes
   * @return excludedNodes
  **/
  @javax.annotation.Nullable
  public String getExcludedNodes() {
    return excludedNodes;
  }


  public void setExcludedNodes(String excludedNodes) {
    this.excludedNodes = excludedNodes;
  }


  public V0037JobResponseProperties exitCode(Integer exitCode) {
    
    this.exitCode = exitCode;
    return this;
  }

   /**
   * exit code for job
   * @return exitCode
  **/
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }


  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public V0037JobResponseProperties features(String features) {
    
    this.features = features;
    return this;
  }

   /**
   * comma separated list of required features
   * @return features
  **/
  @javax.annotation.Nullable
  public String getFeatures() {
    return features;
  }


  public void setFeatures(String features) {
    this.features = features;
  }


  public V0037JobResponseProperties federationOrigin(String federationOrigin) {
    
    this.federationOrigin = federationOrigin;
    return this;
  }

   /**
   * Origin cluster&#39;s name
   * @return federationOrigin
  **/
  @javax.annotation.Nullable
  public String getFederationOrigin() {
    return federationOrigin;
  }


  public void setFederationOrigin(String federationOrigin) {
    this.federationOrigin = federationOrigin;
  }


  public V0037JobResponseProperties federationSiblingsActive(String federationSiblingsActive) {
    
    this.federationSiblingsActive = federationSiblingsActive;
    return this;
  }

   /**
   * string of active sibling names
   * @return federationSiblingsActive
  **/
  @javax.annotation.Nullable
  public String getFederationSiblingsActive() {
    return federationSiblingsActive;
  }


  public void setFederationSiblingsActive(String federationSiblingsActive) {
    this.federationSiblingsActive = federationSiblingsActive;
  }


  public V0037JobResponseProperties federationSiblingsViable(String federationSiblingsViable) {
    
    this.federationSiblingsViable = federationSiblingsViable;
    return this;
  }

   /**
   * string of viable sibling names
   * @return federationSiblingsViable
  **/
  @javax.annotation.Nullable
  public String getFederationSiblingsViable() {
    return federationSiblingsViable;
  }


  public void setFederationSiblingsViable(String federationSiblingsViable) {
    this.federationSiblingsViable = federationSiblingsViable;
  }


  public V0037JobResponseProperties gresDetail(List<String> gresDetail) {
    
    this.gresDetail = gresDetail;
    return this;
  }

  public V0037JobResponseProperties addGresDetailItem(String gresDetailItem) {
    if (this.gresDetail == null) {
      this.gresDetail = new ArrayList<>();
    }
    this.gresDetail.add(gresDetailItem);
    return this;
  }

   /**
   * Job flags
   * @return gresDetail
  **/
  @javax.annotation.Nullable
  public List<String> getGresDetail() {
    return gresDetail;
  }


  public void setGresDetail(List<String> gresDetail) {
    this.gresDetail = gresDetail;
  }


  public V0037JobResponseProperties groupId(String groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * group job submitted as
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }


  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public V0037JobResponseProperties jobId(String jobId) {
    
    this.jobId = jobId;
    return this;
  }

   /**
   * job ID
   * @return jobId
  **/
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public V0037JobResponseProperties jobResources(V0037JobResources jobResources) {
    
    this.jobResources = jobResources;
    return this;
  }

   /**
   * Get jobResources
   * @return jobResources
  **/
  @javax.annotation.Nullable
  public V0037JobResources getJobResources() {
    return jobResources;
  }


  public void setJobResources(V0037JobResources jobResources) {
    this.jobResources = jobResources;
  }


  public V0037JobResponseProperties jobState(String jobState) {
    
    this.jobState = jobState;
    return this;
  }

   /**
   * state of the job
   * @return jobState
  **/
  @javax.annotation.Nullable
  public String getJobState() {
    return jobState;
  }


  public void setJobState(String jobState) {
    this.jobState = jobState;
  }


  public V0037JobResponseProperties lastSchedEvaluation(String lastSchedEvaluation) {
    
    this.lastSchedEvaluation = lastSchedEvaluation;
    return this;
  }

   /**
   * last time job was evaluated for scheduling
   * @return lastSchedEvaluation
  **/
  @javax.annotation.Nullable
  public String getLastSchedEvaluation() {
    return lastSchedEvaluation;
  }


  public void setLastSchedEvaluation(String lastSchedEvaluation) {
    this.lastSchedEvaluation = lastSchedEvaluation;
  }


  public V0037JobResponseProperties licenses(String licenses) {
    
    this.licenses = licenses;
    return this;
  }

   /**
   * licenses required by the job
   * @return licenses
  **/
  @javax.annotation.Nullable
  public String getLicenses() {
    return licenses;
  }


  public void setLicenses(String licenses) {
    this.licenses = licenses;
  }


  public V0037JobResponseProperties maxCpus(String maxCpus) {
    
    this.maxCpus = maxCpus;
    return this;
  }

   /**
   * maximum number of cpus usable by job
   * @return maxCpus
  **/
  @javax.annotation.Nullable
  public String getMaxCpus() {
    return maxCpus;
  }


  public void setMaxCpus(String maxCpus) {
    this.maxCpus = maxCpus;
  }


  public V0037JobResponseProperties maxNodes(String maxNodes) {
    
    this.maxNodes = maxNodes;
    return this;
  }

   /**
   * maximum number of nodes usable by job
   * @return maxNodes
  **/
  @javax.annotation.Nullable
  public String getMaxNodes() {
    return maxNodes;
  }


  public void setMaxNodes(String maxNodes) {
    this.maxNodes = maxNodes;
  }


  public V0037JobResponseProperties mcsLabel(String mcsLabel) {
    
    this.mcsLabel = mcsLabel;
    return this;
  }

   /**
   * mcs_label if mcs plugin in use
   * @return mcsLabel
  **/
  @javax.annotation.Nullable
  public String getMcsLabel() {
    return mcsLabel;
  }


  public void setMcsLabel(String mcsLabel) {
    this.mcsLabel = mcsLabel;
  }


  public V0037JobResponseProperties memoryPerTres(String memoryPerTres) {
    
    this.memoryPerTres = memoryPerTres;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return memoryPerTres
  **/
  @javax.annotation.Nullable
  public String getMemoryPerTres() {
    return memoryPerTres;
  }


  public void setMemoryPerTres(String memoryPerTres) {
    this.memoryPerTres = memoryPerTres;
  }


  public V0037JobResponseProperties name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * name of the job
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V0037JobResponseProperties nodes(String nodes) {
    
    this.nodes = nodes;
    return this;
  }

   /**
   * list of nodes allocated to job
   * @return nodes
  **/
  @javax.annotation.Nullable
  public String getNodes() {
    return nodes;
  }


  public void setNodes(String nodes) {
    this.nodes = nodes;
  }


  public V0037JobResponseProperties nice(String nice) {
    
    this.nice = nice;
    return this;
  }

   /**
   * requested priority change
   * @return nice
  **/
  @javax.annotation.Nullable
  public String getNice() {
    return nice;
  }


  public void setNice(String nice) {
    this.nice = nice;
  }


  public V0037JobResponseProperties tasksPerCore(String tasksPerCore) {
    
    this.tasksPerCore = tasksPerCore;
    return this;
  }

   /**
   * number of tasks to invoke on each core
   * @return tasksPerCore
  **/
  @javax.annotation.Nullable
  public String getTasksPerCore() {
    return tasksPerCore;
  }


  public void setTasksPerCore(String tasksPerCore) {
    this.tasksPerCore = tasksPerCore;
  }


  public V0037JobResponseProperties tasksPerSocket(String tasksPerSocket) {
    
    this.tasksPerSocket = tasksPerSocket;
    return this;
  }

   /**
   * number of tasks to invoke on each socket
   * @return tasksPerSocket
  **/
  @javax.annotation.Nullable
  public String getTasksPerSocket() {
    return tasksPerSocket;
  }


  public void setTasksPerSocket(String tasksPerSocket) {
    this.tasksPerSocket = tasksPerSocket;
  }


  public V0037JobResponseProperties tasksPerBoard(String tasksPerBoard) {
    
    this.tasksPerBoard = tasksPerBoard;
    return this;
  }

   /**
   * number of tasks to invoke on each board
   * @return tasksPerBoard
  **/
  @javax.annotation.Nullable
  public String getTasksPerBoard() {
    return tasksPerBoard;
  }


  public void setTasksPerBoard(String tasksPerBoard) {
    this.tasksPerBoard = tasksPerBoard;
  }


  public V0037JobResponseProperties cpus(String cpus) {
    
    this.cpus = cpus;
    return this;
  }

   /**
   * minimum number of cpus required by job
   * @return cpus
  **/
  @javax.annotation.Nullable
  public String getCpus() {
    return cpus;
  }


  public void setCpus(String cpus) {
    this.cpus = cpus;
  }


  public V0037JobResponseProperties nodeCount(String nodeCount) {
    
    this.nodeCount = nodeCount;
    return this;
  }

   /**
   * minimum number of nodes required by job
   * @return nodeCount
  **/
  @javax.annotation.Nullable
  public String getNodeCount() {
    return nodeCount;
  }


  public void setNodeCount(String nodeCount) {
    this.nodeCount = nodeCount;
  }


  public V0037JobResponseProperties tasks(String tasks) {
    
    this.tasks = tasks;
    return this;
  }

   /**
   * requested task count
   * @return tasks
  **/
  @javax.annotation.Nullable
  public String getTasks() {
    return tasks;
  }


  public void setTasks(String tasks) {
    this.tasks = tasks;
  }


  public V0037JobResponseProperties hetJobId(String hetJobId) {
    
    this.hetJobId = hetJobId;
    return this;
  }

   /**
   * job ID of hetjob leader
   * @return hetJobId
  **/
  @javax.annotation.Nullable
  public String getHetJobId() {
    return hetJobId;
  }


  public void setHetJobId(String hetJobId) {
    this.hetJobId = hetJobId;
  }


  public V0037JobResponseProperties hetJobIdSet(String hetJobIdSet) {
    
    this.hetJobIdSet = hetJobIdSet;
    return this;
  }

   /**
   * job IDs for all components
   * @return hetJobIdSet
  **/
  @javax.annotation.Nullable
  public String getHetJobIdSet() {
    return hetJobIdSet;
  }


  public void setHetJobIdSet(String hetJobIdSet) {
    this.hetJobIdSet = hetJobIdSet;
  }


  public V0037JobResponseProperties hetJobOffset(String hetJobOffset) {
    
    this.hetJobOffset = hetJobOffset;
    return this;
  }

   /**
   * HetJob component offset from leader
   * @return hetJobOffset
  **/
  @javax.annotation.Nullable
  public String getHetJobOffset() {
    return hetJobOffset;
  }


  public void setHetJobOffset(String hetJobOffset) {
    this.hetJobOffset = hetJobOffset;
  }


  public V0037JobResponseProperties partition(String partition) {
    
    this.partition = partition;
    return this;
  }

   /**
   * name of assigned partition
   * @return partition
  **/
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }


  public void setPartition(String partition) {
    this.partition = partition;
  }


  public V0037JobResponseProperties memoryPerNode(String memoryPerNode) {
    
    this.memoryPerNode = memoryPerNode;
    return this;
  }

   /**
   * minimum real memory per node
   * @return memoryPerNode
  **/
  @javax.annotation.Nullable
  public String getMemoryPerNode() {
    return memoryPerNode;
  }


  public void setMemoryPerNode(String memoryPerNode) {
    this.memoryPerNode = memoryPerNode;
  }


  public V0037JobResponseProperties memoryPerCpu(String memoryPerCpu) {
    
    this.memoryPerCpu = memoryPerCpu;
    return this;
  }

   /**
   * minimum real memory per cpu
   * @return memoryPerCpu
  **/
  @javax.annotation.Nullable
  public String getMemoryPerCpu() {
    return memoryPerCpu;
  }


  public void setMemoryPerCpu(String memoryPerCpu) {
    this.memoryPerCpu = memoryPerCpu;
  }


  public V0037JobResponseProperties minimumCpusPerNode(String minimumCpusPerNode) {
    
    this.minimumCpusPerNode = minimumCpusPerNode;
    return this;
  }

   /**
   * minimum # CPUs per node
   * @return minimumCpusPerNode
  **/
  @javax.annotation.Nullable
  public String getMinimumCpusPerNode() {
    return minimumCpusPerNode;
  }


  public void setMinimumCpusPerNode(String minimumCpusPerNode) {
    this.minimumCpusPerNode = minimumCpusPerNode;
  }


  public V0037JobResponseProperties minimumTmpDiskPerNode(String minimumTmpDiskPerNode) {
    
    this.minimumTmpDiskPerNode = minimumTmpDiskPerNode;
    return this;
  }

   /**
   * minimum tmp disk per node
   * @return minimumTmpDiskPerNode
  **/
  @javax.annotation.Nullable
  public String getMinimumTmpDiskPerNode() {
    return minimumTmpDiskPerNode;
  }


  public void setMinimumTmpDiskPerNode(String minimumTmpDiskPerNode) {
    this.minimumTmpDiskPerNode = minimumTmpDiskPerNode;
  }


  public V0037JobResponseProperties preemptTime(Long preemptTime) {
    
    this.preemptTime = preemptTime;
    return this;
  }

   /**
   * preemption signal time
   * @return preemptTime
  **/
  @javax.annotation.Nullable
  public Long getPreemptTime() {
    return preemptTime;
  }


  public void setPreemptTime(Long preemptTime) {
    this.preemptTime = preemptTime;
  }


  public V0037JobResponseProperties preSusTime(Long preSusTime) {
    
    this.preSusTime = preSusTime;
    return this;
  }

   /**
   * time job ran prior to last suspend
   * @return preSusTime
  **/
  @javax.annotation.Nullable
  public Long getPreSusTime() {
    return preSusTime;
  }


  public void setPreSusTime(Long preSusTime) {
    this.preSusTime = preSusTime;
  }


  public V0037JobResponseProperties priority(String priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * relative priority of the job
   * @return priority
  **/
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }


  public void setPriority(String priority) {
    this.priority = priority;
  }


  public V0037JobResponseProperties profile(List<String> profile) {
    
    this.profile = profile;
    return this;
  }

  public V0037JobResponseProperties addProfileItem(String profileItem) {
    if (this.profile == null) {
      this.profile = new ArrayList<>();
    }
    this.profile.add(profileItem);
    return this;
  }

   /**
   * Job profiling requested
   * @return profile
  **/
  @javax.annotation.Nullable
  public List<String> getProfile() {
    return profile;
  }


  public void setProfile(List<String> profile) {
    this.profile = profile;
  }


  public V0037JobResponseProperties qos(String qos) {
    
    this.qos = qos;
    return this;
  }

   /**
   * Quality of Service
   * @return qos
  **/
  @javax.annotation.Nullable
  public String getQos() {
    return qos;
  }


  public void setQos(String qos) {
    this.qos = qos;
  }


  public V0037JobResponseProperties reboot(Boolean reboot) {
    
    this.reboot = reboot;
    return this;
  }

   /**
   * node reboot requested before start
   * @return reboot
  **/
  @javax.annotation.Nullable
  public Boolean getReboot() {
    return reboot;
  }


  public void setReboot(Boolean reboot) {
    this.reboot = reboot;
  }


  public V0037JobResponseProperties requiredNodes(String requiredNodes) {
    
    this.requiredNodes = requiredNodes;
    return this;
  }

   /**
   * comma separated list of required nodes
   * @return requiredNodes
  **/
  @javax.annotation.Nullable
  public String getRequiredNodes() {
    return requiredNodes;
  }


  public void setRequiredNodes(String requiredNodes) {
    this.requiredNodes = requiredNodes;
  }


  public V0037JobResponseProperties requeue(Boolean requeue) {
    
    this.requeue = requeue;
    return this;
  }

   /**
   * enable or disable job requeue option
   * @return requeue
  **/
  @javax.annotation.Nullable
  public Boolean getRequeue() {
    return requeue;
  }


  public void setRequeue(Boolean requeue) {
    this.requeue = requeue;
  }


  public V0037JobResponseProperties resizeTime(Long resizeTime) {
    
    this.resizeTime = resizeTime;
    return this;
  }

   /**
   * time of latest size change
   * @return resizeTime
  **/
  @javax.annotation.Nullable
  public Long getResizeTime() {
    return resizeTime;
  }


  public void setResizeTime(Long resizeTime) {
    this.resizeTime = resizeTime;
  }


  public V0037JobResponseProperties restartCnt(String restartCnt) {
    
    this.restartCnt = restartCnt;
    return this;
  }

   /**
   * count of job restarts
   * @return restartCnt
  **/
  @javax.annotation.Nullable
  public String getRestartCnt() {
    return restartCnt;
  }


  public void setRestartCnt(String restartCnt) {
    this.restartCnt = restartCnt;
  }


  public V0037JobResponseProperties resvName(String resvName) {
    
    this.resvName = resvName;
    return this;
  }

   /**
   * reservation name
   * @return resvName
  **/
  @javax.annotation.Nullable
  public String getResvName() {
    return resvName;
  }


  public void setResvName(String resvName) {
    this.resvName = resvName;
  }


  public V0037JobResponseProperties shared(String shared) {
    
    this.shared = shared;
    return this;
  }

   /**
   * type and if job can share nodes with other jobs
   * @return shared
  **/
  @javax.annotation.Nullable
  public String getShared() {
    return shared;
  }


  public void setShared(String shared) {
    this.shared = shared;
  }


  public V0037JobResponseProperties showFlags(List<String> showFlags) {
    
    this.showFlags = showFlags;
    return this;
  }

  public V0037JobResponseProperties addShowFlagsItem(String showFlagsItem) {
    if (this.showFlags == null) {
      this.showFlags = new ArrayList<>();
    }
    this.showFlags.add(showFlagsItem);
    return this;
  }

   /**
   * details requested
   * @return showFlags
  **/
  @javax.annotation.Nullable
  public List<String> getShowFlags() {
    return showFlags;
  }


  public void setShowFlags(List<String> showFlags) {
    this.showFlags = showFlags;
  }


  public V0037JobResponseProperties socketsPerBoard(String socketsPerBoard) {
    
    this.socketsPerBoard = socketsPerBoard;
    return this;
  }

   /**
   * sockets per board required by job
   * @return socketsPerBoard
  **/
  @javax.annotation.Nullable
  public String getSocketsPerBoard() {
    return socketsPerBoard;
  }


  public void setSocketsPerBoard(String socketsPerBoard) {
    this.socketsPerBoard = socketsPerBoard;
  }


  public V0037JobResponseProperties socketsPerNode(String socketsPerNode) {
    
    this.socketsPerNode = socketsPerNode;
    return this;
  }

   /**
   * sockets per node required by job
   * @return socketsPerNode
  **/
  @javax.annotation.Nullable
  public String getSocketsPerNode() {
    return socketsPerNode;
  }


  public void setSocketsPerNode(String socketsPerNode) {
    this.socketsPerNode = socketsPerNode;
  }


  public V0037JobResponseProperties startTime(Long startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * time execution begins, actual or expected
   * @return startTime
  **/
  @javax.annotation.Nullable
  public Long getStartTime() {
    return startTime;
  }


  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public V0037JobResponseProperties stateDescription(String stateDescription) {
    
    this.stateDescription = stateDescription;
    return this;
  }

   /**
   * optional details for state_reason
   * @return stateDescription
  **/
  @javax.annotation.Nullable
  public String getStateDescription() {
    return stateDescription;
  }


  public void setStateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
  }


  public V0037JobResponseProperties stateReason(String stateReason) {
    
    this.stateReason = stateReason;
    return this;
  }

   /**
   * reason job still pending or failed
   * @return stateReason
  **/
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }


  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public V0037JobResponseProperties standardError(String standardError) {
    
    this.standardError = standardError;
    return this;
  }

   /**
   * pathname of job&#39;s stderr file
   * @return standardError
  **/
  @javax.annotation.Nullable
  public String getStandardError() {
    return standardError;
  }


  public void setStandardError(String standardError) {
    this.standardError = standardError;
  }


  public V0037JobResponseProperties standardInput(String standardInput) {
    
    this.standardInput = standardInput;
    return this;
  }

   /**
   * pathname of job&#39;s stdin file
   * @return standardInput
  **/
  @javax.annotation.Nullable
  public String getStandardInput() {
    return standardInput;
  }


  public void setStandardInput(String standardInput) {
    this.standardInput = standardInput;
  }


  public V0037JobResponseProperties standardOutput(String standardOutput) {
    
    this.standardOutput = standardOutput;
    return this;
  }

   /**
   * pathname of job&#39;s stdout file
   * @return standardOutput
  **/
  @javax.annotation.Nullable
  public String getStandardOutput() {
    return standardOutput;
  }


  public void setStandardOutput(String standardOutput) {
    this.standardOutput = standardOutput;
  }


  public V0037JobResponseProperties submitTime(Long submitTime) {
    
    this.submitTime = submitTime;
    return this;
  }

   /**
   * time of job submission
   * @return submitTime
  **/
  @javax.annotation.Nullable
  public Long getSubmitTime() {
    return submitTime;
  }


  public void setSubmitTime(Long submitTime) {
    this.submitTime = submitTime;
  }


  public V0037JobResponseProperties suspendTime(Long suspendTime) {
    
    this.suspendTime = suspendTime;
    return this;
  }

   /**
   * time job last suspended or resumed
   * @return suspendTime
  **/
  @javax.annotation.Nullable
  public Long getSuspendTime() {
    return suspendTime;
  }


  public void setSuspendTime(Long suspendTime) {
    this.suspendTime = suspendTime;
  }


  public V0037JobResponseProperties systemComment(String systemComment) {
    
    this.systemComment = systemComment;
    return this;
  }

   /**
   * slurmctld&#39;s arbitrary comment
   * @return systemComment
  **/
  @javax.annotation.Nullable
  public String getSystemComment() {
    return systemComment;
  }


  public void setSystemComment(String systemComment) {
    this.systemComment = systemComment;
  }


  public V0037JobResponseProperties timeLimit(String timeLimit) {
    
    this.timeLimit = timeLimit;
    return this;
  }

   /**
   * maximum run time in minutes
   * @return timeLimit
  **/
  @javax.annotation.Nullable
  public String getTimeLimit() {
    return timeLimit;
  }


  public void setTimeLimit(String timeLimit) {
    this.timeLimit = timeLimit;
  }


  public V0037JobResponseProperties timeMinimum(String timeMinimum) {
    
    this.timeMinimum = timeMinimum;
    return this;
  }

   /**
   * minimum run time in minutes
   * @return timeMinimum
  **/
  @javax.annotation.Nullable
  public String getTimeMinimum() {
    return timeMinimum;
  }


  public void setTimeMinimum(String timeMinimum) {
    this.timeMinimum = timeMinimum;
  }


  public V0037JobResponseProperties threadsPerCore(String threadsPerCore) {
    
    this.threadsPerCore = threadsPerCore;
    return this;
  }

   /**
   * threads per core required by job
   * @return threadsPerCore
  **/
  @javax.annotation.Nullable
  public String getThreadsPerCore() {
    return threadsPerCore;
  }


  public void setThreadsPerCore(String threadsPerCore) {
    this.threadsPerCore = threadsPerCore;
  }


  public V0037JobResponseProperties tresBind(String tresBind) {
    
    this.tresBind = tresBind;
    return this;
  }

   /**
   * Task to TRES binding directives
   * @return tresBind
  **/
  @javax.annotation.Nullable
  public String getTresBind() {
    return tresBind;
  }


  public void setTresBind(String tresBind) {
    this.tresBind = tresBind;
  }


  public V0037JobResponseProperties tresFreq(String tresFreq) {
    
    this.tresFreq = tresFreq;
    return this;
  }

   /**
   * TRES frequency directives
   * @return tresFreq
  **/
  @javax.annotation.Nullable
  public String getTresFreq() {
    return tresFreq;
  }


  public void setTresFreq(String tresFreq) {
    this.tresFreq = tresFreq;
  }


  public V0037JobResponseProperties tresPerJob(String tresPerJob) {
    
    this.tresPerJob = tresPerJob;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return tresPerJob
  **/
  @javax.annotation.Nullable
  public String getTresPerJob() {
    return tresPerJob;
  }


  public void setTresPerJob(String tresPerJob) {
    this.tresPerJob = tresPerJob;
  }


  public V0037JobResponseProperties tresPerNode(String tresPerNode) {
    
    this.tresPerNode = tresPerNode;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return tresPerNode
  **/
  @javax.annotation.Nullable
  public String getTresPerNode() {
    return tresPerNode;
  }


  public void setTresPerNode(String tresPerNode) {
    this.tresPerNode = tresPerNode;
  }


  public V0037JobResponseProperties tresPerSocket(String tresPerSocket) {
    
    this.tresPerSocket = tresPerSocket;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return tresPerSocket
  **/
  @javax.annotation.Nullable
  public String getTresPerSocket() {
    return tresPerSocket;
  }


  public void setTresPerSocket(String tresPerSocket) {
    this.tresPerSocket = tresPerSocket;
  }


  public V0037JobResponseProperties tresPerTask(String tresPerTask) {
    
    this.tresPerTask = tresPerTask;
    return this;
  }

   /**
   * semicolon delimited list of TRES&#x3D;# values
   * @return tresPerTask
  **/
  @javax.annotation.Nullable
  public String getTresPerTask() {
    return tresPerTask;
  }


  public void setTresPerTask(String tresPerTask) {
    this.tresPerTask = tresPerTask;
  }


  public V0037JobResponseProperties tresReqStr(String tresReqStr) {
    
    this.tresReqStr = tresReqStr;
    return this;
  }

   /**
   * tres reqeusted in the job
   * @return tresReqStr
  **/
  @javax.annotation.Nullable
  public String getTresReqStr() {
    return tresReqStr;
  }


  public void setTresReqStr(String tresReqStr) {
    this.tresReqStr = tresReqStr;
  }


  public V0037JobResponseProperties tresAllocStr(String tresAllocStr) {
    
    this.tresAllocStr = tresAllocStr;
    return this;
  }

   /**
   * tres used in the job
   * @return tresAllocStr
  **/
  @javax.annotation.Nullable
  public String getTresAllocStr() {
    return tresAllocStr;
  }


  public void setTresAllocStr(String tresAllocStr) {
    this.tresAllocStr = tresAllocStr;
  }


  public V0037JobResponseProperties userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * user id the job runs as
   * @return userId
  **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public V0037JobResponseProperties userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * user the job runs as
   * @return userName
  **/
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public V0037JobResponseProperties wckey(String wckey) {
    
    this.wckey = wckey;
    return this;
  }

   /**
   * wckey for job
   * @return wckey
  **/
  @javax.annotation.Nullable
  public String getWckey() {
    return wckey;
  }


  public void setWckey(String wckey) {
    this.wckey = wckey;
  }


  public V0037JobResponseProperties currentWorkingDirectory(String currentWorkingDirectory) {
    
    this.currentWorkingDirectory = currentWorkingDirectory;
    return this;
  }

   /**
   * pathname of working directory
   * @return currentWorkingDirectory
  **/
  @javax.annotation.Nullable
  public String getCurrentWorkingDirectory() {
    return currentWorkingDirectory;
  }


  public void setCurrentWorkingDirectory(String currentWorkingDirectory) {
    this.currentWorkingDirectory = currentWorkingDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V0037JobResponseProperties v0037JobResponseProperties = (V0037JobResponseProperties) o;
    return Objects.equals(this.account, v0037JobResponseProperties.account) &&
        Objects.equals(this.accrueTime, v0037JobResponseProperties.accrueTime) &&
        Objects.equals(this.adminComment, v0037JobResponseProperties.adminComment) &&
        Objects.equals(this.arrayJobId, v0037JobResponseProperties.arrayJobId) &&
        Objects.equals(this.arrayTaskId, v0037JobResponseProperties.arrayTaskId) &&
        Objects.equals(this.arrayMaxTasks, v0037JobResponseProperties.arrayMaxTasks) &&
        Objects.equals(this.arrayTaskString, v0037JobResponseProperties.arrayTaskString) &&
        Objects.equals(this.associationId, v0037JobResponseProperties.associationId) &&
        Objects.equals(this.batchFeatures, v0037JobResponseProperties.batchFeatures) &&
        Objects.equals(this.batchFlag, v0037JobResponseProperties.batchFlag) &&
        Objects.equals(this.batchHost, v0037JobResponseProperties.batchHost) &&
        Objects.equals(this.flags, v0037JobResponseProperties.flags) &&
        Objects.equals(this.burstBuffer, v0037JobResponseProperties.burstBuffer) &&
        Objects.equals(this.burstBufferState, v0037JobResponseProperties.burstBufferState) &&
        Objects.equals(this.cluster, v0037JobResponseProperties.cluster) &&
        Objects.equals(this.clusterFeatures, v0037JobResponseProperties.clusterFeatures) &&
        Objects.equals(this.command, v0037JobResponseProperties.command) &&
        Objects.equals(this.comment, v0037JobResponseProperties.comment) &&
        Objects.equals(this.contiguous, v0037JobResponseProperties.contiguous) &&
        Objects.equals(this.coreSpec, v0037JobResponseProperties.coreSpec) &&
        Objects.equals(this.threadSpec, v0037JobResponseProperties.threadSpec) &&
        Objects.equals(this.coresPerSocket, v0037JobResponseProperties.coresPerSocket) &&
        Objects.equals(this.billableTres, v0037JobResponseProperties.billableTres) &&
        Objects.equals(this.cpusPerTask, v0037JobResponseProperties.cpusPerTask) &&
        Objects.equals(this.cpuFrequencyMinimum, v0037JobResponseProperties.cpuFrequencyMinimum) &&
        Objects.equals(this.cpuFrequencyMaximum, v0037JobResponseProperties.cpuFrequencyMaximum) &&
        Objects.equals(this.cpuFrequencyGovernor, v0037JobResponseProperties.cpuFrequencyGovernor) &&
        Objects.equals(this.cpusPerTres, v0037JobResponseProperties.cpusPerTres) &&
        Objects.equals(this.deadline, v0037JobResponseProperties.deadline) &&
        Objects.equals(this.delayBoot, v0037JobResponseProperties.delayBoot) &&
        Objects.equals(this.dependency, v0037JobResponseProperties.dependency) &&
        Objects.equals(this.derivedExitCode, v0037JobResponseProperties.derivedExitCode) &&
        Objects.equals(this.eligibleTime, v0037JobResponseProperties.eligibleTime) &&
        Objects.equals(this.endTime, v0037JobResponseProperties.endTime) &&
        Objects.equals(this.excludedNodes, v0037JobResponseProperties.excludedNodes) &&
        Objects.equals(this.exitCode, v0037JobResponseProperties.exitCode) &&
        Objects.equals(this.features, v0037JobResponseProperties.features) &&
        Objects.equals(this.federationOrigin, v0037JobResponseProperties.federationOrigin) &&
        Objects.equals(this.federationSiblingsActive, v0037JobResponseProperties.federationSiblingsActive) &&
        Objects.equals(this.federationSiblingsViable, v0037JobResponseProperties.federationSiblingsViable) &&
        Objects.equals(this.gresDetail, v0037JobResponseProperties.gresDetail) &&
        Objects.equals(this.groupId, v0037JobResponseProperties.groupId) &&
        Objects.equals(this.jobId, v0037JobResponseProperties.jobId) &&
        Objects.equals(this.jobResources, v0037JobResponseProperties.jobResources) &&
        Objects.equals(this.jobState, v0037JobResponseProperties.jobState) &&
        Objects.equals(this.lastSchedEvaluation, v0037JobResponseProperties.lastSchedEvaluation) &&
        Objects.equals(this.licenses, v0037JobResponseProperties.licenses) &&
        Objects.equals(this.maxCpus, v0037JobResponseProperties.maxCpus) &&
        Objects.equals(this.maxNodes, v0037JobResponseProperties.maxNodes) &&
        Objects.equals(this.mcsLabel, v0037JobResponseProperties.mcsLabel) &&
        Objects.equals(this.memoryPerTres, v0037JobResponseProperties.memoryPerTres) &&
        Objects.equals(this.name, v0037JobResponseProperties.name) &&
        Objects.equals(this.nodes, v0037JobResponseProperties.nodes) &&
        Objects.equals(this.nice, v0037JobResponseProperties.nice) &&
        Objects.equals(this.tasksPerCore, v0037JobResponseProperties.tasksPerCore) &&
        Objects.equals(this.tasksPerSocket, v0037JobResponseProperties.tasksPerSocket) &&
        Objects.equals(this.tasksPerBoard, v0037JobResponseProperties.tasksPerBoard) &&
        Objects.equals(this.cpus, v0037JobResponseProperties.cpus) &&
        Objects.equals(this.nodeCount, v0037JobResponseProperties.nodeCount) &&
        Objects.equals(this.tasks, v0037JobResponseProperties.tasks) &&
        Objects.equals(this.hetJobId, v0037JobResponseProperties.hetJobId) &&
        Objects.equals(this.hetJobIdSet, v0037JobResponseProperties.hetJobIdSet) &&
        Objects.equals(this.hetJobOffset, v0037JobResponseProperties.hetJobOffset) &&
        Objects.equals(this.partition, v0037JobResponseProperties.partition) &&
        Objects.equals(this.memoryPerNode, v0037JobResponseProperties.memoryPerNode) &&
        Objects.equals(this.memoryPerCpu, v0037JobResponseProperties.memoryPerCpu) &&
        Objects.equals(this.minimumCpusPerNode, v0037JobResponseProperties.minimumCpusPerNode) &&
        Objects.equals(this.minimumTmpDiskPerNode, v0037JobResponseProperties.minimumTmpDiskPerNode) &&
        Objects.equals(this.preemptTime, v0037JobResponseProperties.preemptTime) &&
        Objects.equals(this.preSusTime, v0037JobResponseProperties.preSusTime) &&
        Objects.equals(this.priority, v0037JobResponseProperties.priority) &&
        Objects.equals(this.profile, v0037JobResponseProperties.profile) &&
        Objects.equals(this.qos, v0037JobResponseProperties.qos) &&
        Objects.equals(this.reboot, v0037JobResponseProperties.reboot) &&
        Objects.equals(this.requiredNodes, v0037JobResponseProperties.requiredNodes) &&
        Objects.equals(this.requeue, v0037JobResponseProperties.requeue) &&
        Objects.equals(this.resizeTime, v0037JobResponseProperties.resizeTime) &&
        Objects.equals(this.restartCnt, v0037JobResponseProperties.restartCnt) &&
        Objects.equals(this.resvName, v0037JobResponseProperties.resvName) &&
        Objects.equals(this.shared, v0037JobResponseProperties.shared) &&
        Objects.equals(this.showFlags, v0037JobResponseProperties.showFlags) &&
        Objects.equals(this.socketsPerBoard, v0037JobResponseProperties.socketsPerBoard) &&
        Objects.equals(this.socketsPerNode, v0037JobResponseProperties.socketsPerNode) &&
        Objects.equals(this.startTime, v0037JobResponseProperties.startTime) &&
        Objects.equals(this.stateDescription, v0037JobResponseProperties.stateDescription) &&
        Objects.equals(this.stateReason, v0037JobResponseProperties.stateReason) &&
        Objects.equals(this.standardError, v0037JobResponseProperties.standardError) &&
        Objects.equals(this.standardInput, v0037JobResponseProperties.standardInput) &&
        Objects.equals(this.standardOutput, v0037JobResponseProperties.standardOutput) &&
        Objects.equals(this.submitTime, v0037JobResponseProperties.submitTime) &&
        Objects.equals(this.suspendTime, v0037JobResponseProperties.suspendTime) &&
        Objects.equals(this.systemComment, v0037JobResponseProperties.systemComment) &&
        Objects.equals(this.timeLimit, v0037JobResponseProperties.timeLimit) &&
        Objects.equals(this.timeMinimum, v0037JobResponseProperties.timeMinimum) &&
        Objects.equals(this.threadsPerCore, v0037JobResponseProperties.threadsPerCore) &&
        Objects.equals(this.tresBind, v0037JobResponseProperties.tresBind) &&
        Objects.equals(this.tresFreq, v0037JobResponseProperties.tresFreq) &&
        Objects.equals(this.tresPerJob, v0037JobResponseProperties.tresPerJob) &&
        Objects.equals(this.tresPerNode, v0037JobResponseProperties.tresPerNode) &&
        Objects.equals(this.tresPerSocket, v0037JobResponseProperties.tresPerSocket) &&
        Objects.equals(this.tresPerTask, v0037JobResponseProperties.tresPerTask) &&
        Objects.equals(this.tresReqStr, v0037JobResponseProperties.tresReqStr) &&
        Objects.equals(this.tresAllocStr, v0037JobResponseProperties.tresAllocStr) &&
        Objects.equals(this.userId, v0037JobResponseProperties.userId) &&
        Objects.equals(this.userName, v0037JobResponseProperties.userName) &&
        Objects.equals(this.wckey, v0037JobResponseProperties.wckey) &&
        Objects.equals(this.currentWorkingDirectory, v0037JobResponseProperties.currentWorkingDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, accrueTime, adminComment, arrayJobId, arrayTaskId, arrayMaxTasks, arrayTaskString, associationId, batchFeatures, batchFlag, batchHost, flags, burstBuffer, burstBufferState, cluster, clusterFeatures, command, comment, contiguous, coreSpec, threadSpec, coresPerSocket, billableTres, cpusPerTask, cpuFrequencyMinimum, cpuFrequencyMaximum, cpuFrequencyGovernor, cpusPerTres, deadline, delayBoot, dependency, derivedExitCode, eligibleTime, endTime, excludedNodes, exitCode, features, federationOrigin, federationSiblingsActive, federationSiblingsViable, gresDetail, groupId, jobId, jobResources, jobState, lastSchedEvaluation, licenses, maxCpus, maxNodes, mcsLabel, memoryPerTres, name, nodes, nice, tasksPerCore, tasksPerSocket, tasksPerBoard, cpus, nodeCount, tasks, hetJobId, hetJobIdSet, hetJobOffset, partition, memoryPerNode, memoryPerCpu, minimumCpusPerNode, minimumTmpDiskPerNode, preemptTime, preSusTime, priority, profile, qos, reboot, requiredNodes, requeue, resizeTime, restartCnt, resvName, shared, showFlags, socketsPerBoard, socketsPerNode, startTime, stateDescription, stateReason, standardError, standardInput, standardOutput, submitTime, suspendTime, systemComment, timeLimit, timeMinimum, threadsPerCore, tresBind, tresFreq, tresPerJob, tresPerNode, tresPerSocket, tresPerTask, tresReqStr, tresAllocStr, userId, userName, wckey, currentWorkingDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V0037JobResponseProperties {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accrueTime: ").append(toIndentedString(accrueTime)).append("\n");
    sb.append("    adminComment: ").append(toIndentedString(adminComment)).append("\n");
    sb.append("    arrayJobId: ").append(toIndentedString(arrayJobId)).append("\n");
    sb.append("    arrayTaskId: ").append(toIndentedString(arrayTaskId)).append("\n");
    sb.append("    arrayMaxTasks: ").append(toIndentedString(arrayMaxTasks)).append("\n");
    sb.append("    arrayTaskString: ").append(toIndentedString(arrayTaskString)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    batchFeatures: ").append(toIndentedString(batchFeatures)).append("\n");
    sb.append("    batchFlag: ").append(toIndentedString(batchFlag)).append("\n");
    sb.append("    batchHost: ").append(toIndentedString(batchHost)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    burstBuffer: ").append(toIndentedString(burstBuffer)).append("\n");
    sb.append("    burstBufferState: ").append(toIndentedString(burstBufferState)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    clusterFeatures: ").append(toIndentedString(clusterFeatures)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    contiguous: ").append(toIndentedString(contiguous)).append("\n");
    sb.append("    coreSpec: ").append(toIndentedString(coreSpec)).append("\n");
    sb.append("    threadSpec: ").append(toIndentedString(threadSpec)).append("\n");
    sb.append("    coresPerSocket: ").append(toIndentedString(coresPerSocket)).append("\n");
    sb.append("    billableTres: ").append(toIndentedString(billableTres)).append("\n");
    sb.append("    cpusPerTask: ").append(toIndentedString(cpusPerTask)).append("\n");
    sb.append("    cpuFrequencyMinimum: ").append(toIndentedString(cpuFrequencyMinimum)).append("\n");
    sb.append("    cpuFrequencyMaximum: ").append(toIndentedString(cpuFrequencyMaximum)).append("\n");
    sb.append("    cpuFrequencyGovernor: ").append(toIndentedString(cpuFrequencyGovernor)).append("\n");
    sb.append("    cpusPerTres: ").append(toIndentedString(cpusPerTres)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    delayBoot: ").append(toIndentedString(delayBoot)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    derivedExitCode: ").append(toIndentedString(derivedExitCode)).append("\n");
    sb.append("    eligibleTime: ").append(toIndentedString(eligibleTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    excludedNodes: ").append(toIndentedString(excludedNodes)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    federationOrigin: ").append(toIndentedString(federationOrigin)).append("\n");
    sb.append("    federationSiblingsActive: ").append(toIndentedString(federationSiblingsActive)).append("\n");
    sb.append("    federationSiblingsViable: ").append(toIndentedString(federationSiblingsViable)).append("\n");
    sb.append("    gresDetail: ").append(toIndentedString(gresDetail)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobResources: ").append(toIndentedString(jobResources)).append("\n");
    sb.append("    jobState: ").append(toIndentedString(jobState)).append("\n");
    sb.append("    lastSchedEvaluation: ").append(toIndentedString(lastSchedEvaluation)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    maxCpus: ").append(toIndentedString(maxCpus)).append("\n");
    sb.append("    maxNodes: ").append(toIndentedString(maxNodes)).append("\n");
    sb.append("    mcsLabel: ").append(toIndentedString(mcsLabel)).append("\n");
    sb.append("    memoryPerTres: ").append(toIndentedString(memoryPerTres)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    nice: ").append(toIndentedString(nice)).append("\n");
    sb.append("    tasksPerCore: ").append(toIndentedString(tasksPerCore)).append("\n");
    sb.append("    tasksPerSocket: ").append(toIndentedString(tasksPerSocket)).append("\n");
    sb.append("    tasksPerBoard: ").append(toIndentedString(tasksPerBoard)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    hetJobId: ").append(toIndentedString(hetJobId)).append("\n");
    sb.append("    hetJobIdSet: ").append(toIndentedString(hetJobIdSet)).append("\n");
    sb.append("    hetJobOffset: ").append(toIndentedString(hetJobOffset)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    memoryPerNode: ").append(toIndentedString(memoryPerNode)).append("\n");
    sb.append("    memoryPerCpu: ").append(toIndentedString(memoryPerCpu)).append("\n");
    sb.append("    minimumCpusPerNode: ").append(toIndentedString(minimumCpusPerNode)).append("\n");
    sb.append("    minimumTmpDiskPerNode: ").append(toIndentedString(minimumTmpDiskPerNode)).append("\n");
    sb.append("    preemptTime: ").append(toIndentedString(preemptTime)).append("\n");
    sb.append("    preSusTime: ").append(toIndentedString(preSusTime)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    qos: ").append(toIndentedString(qos)).append("\n");
    sb.append("    reboot: ").append(toIndentedString(reboot)).append("\n");
    sb.append("    requiredNodes: ").append(toIndentedString(requiredNodes)).append("\n");
    sb.append("    requeue: ").append(toIndentedString(requeue)).append("\n");
    sb.append("    resizeTime: ").append(toIndentedString(resizeTime)).append("\n");
    sb.append("    restartCnt: ").append(toIndentedString(restartCnt)).append("\n");
    sb.append("    resvName: ").append(toIndentedString(resvName)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    showFlags: ").append(toIndentedString(showFlags)).append("\n");
    sb.append("    socketsPerBoard: ").append(toIndentedString(socketsPerBoard)).append("\n");
    sb.append("    socketsPerNode: ").append(toIndentedString(socketsPerNode)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stateDescription: ").append(toIndentedString(stateDescription)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    standardError: ").append(toIndentedString(standardError)).append("\n");
    sb.append("    standardInput: ").append(toIndentedString(standardInput)).append("\n");
    sb.append("    standardOutput: ").append(toIndentedString(standardOutput)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("    suspendTime: ").append(toIndentedString(suspendTime)).append("\n");
    sb.append("    systemComment: ").append(toIndentedString(systemComment)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("    timeMinimum: ").append(toIndentedString(timeMinimum)).append("\n");
    sb.append("    threadsPerCore: ").append(toIndentedString(threadsPerCore)).append("\n");
    sb.append("    tresBind: ").append(toIndentedString(tresBind)).append("\n");
    sb.append("    tresFreq: ").append(toIndentedString(tresFreq)).append("\n");
    sb.append("    tresPerJob: ").append(toIndentedString(tresPerJob)).append("\n");
    sb.append("    tresPerNode: ").append(toIndentedString(tresPerNode)).append("\n");
    sb.append("    tresPerSocket: ").append(toIndentedString(tresPerSocket)).append("\n");
    sb.append("    tresPerTask: ").append(toIndentedString(tresPerTask)).append("\n");
    sb.append("    tresReqStr: ").append(toIndentedString(tresReqStr)).append("\n");
    sb.append("    tresAllocStr: ").append(toIndentedString(tresAllocStr)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    wckey: ").append(toIndentedString(wckey)).append("\n");
    sb.append("    currentWorkingDirectory: ").append(toIndentedString(currentWorkingDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("accrue_time");
    openapiFields.add("admin_comment");
    openapiFields.add("array_job_id");
    openapiFields.add("array_task_id");
    openapiFields.add("array_max_tasks");
    openapiFields.add("array_task_string");
    openapiFields.add("association_id");
    openapiFields.add("batch_features");
    openapiFields.add("batch_flag");
    openapiFields.add("batch_host");
    openapiFields.add("flags");
    openapiFields.add("burst_buffer");
    openapiFields.add("burst_buffer_state");
    openapiFields.add("cluster");
    openapiFields.add("cluster_features");
    openapiFields.add("command");
    openapiFields.add("comment");
    openapiFields.add("contiguous");
    openapiFields.add("core_spec");
    openapiFields.add("thread_spec");
    openapiFields.add("cores_per_socket");
    openapiFields.add("billable_tres");
    openapiFields.add("cpus_per_task");
    openapiFields.add("cpu_frequency_minimum");
    openapiFields.add("cpu_frequency_maximum");
    openapiFields.add("cpu_frequency_governor");
    openapiFields.add("cpus_per_tres");
    openapiFields.add("deadline");
    openapiFields.add("delay_boot");
    openapiFields.add("dependency");
    openapiFields.add("derived_exit_code");
    openapiFields.add("eligible_time");
    openapiFields.add("end_time");
    openapiFields.add("excluded_nodes");
    openapiFields.add("exit_code");
    openapiFields.add("features");
    openapiFields.add("federation_origin");
    openapiFields.add("federation_siblings_active");
    openapiFields.add("federation_siblings_viable");
    openapiFields.add("gres_detail");
    openapiFields.add("group_id");
    openapiFields.add("job_id");
    openapiFields.add("job_resources");
    openapiFields.add("job_state");
    openapiFields.add("last_sched_evaluation");
    openapiFields.add("licenses");
    openapiFields.add("max_cpus");
    openapiFields.add("max_nodes");
    openapiFields.add("mcs_label");
    openapiFields.add("memory_per_tres");
    openapiFields.add("name");
    openapiFields.add("nodes");
    openapiFields.add("nice");
    openapiFields.add("tasks_per_core");
    openapiFields.add("tasks_per_socket");
    openapiFields.add("tasks_per_board");
    openapiFields.add("cpus");
    openapiFields.add("node_count");
    openapiFields.add("tasks");
    openapiFields.add("het_job_id");
    openapiFields.add("het_job_id_set");
    openapiFields.add("het_job_offset");
    openapiFields.add("partition");
    openapiFields.add("memory_per_node");
    openapiFields.add("memory_per_cpu");
    openapiFields.add("minimum_cpus_per_node");
    openapiFields.add("minimum_tmp_disk_per_node");
    openapiFields.add("preempt_time");
    openapiFields.add("pre_sus_time");
    openapiFields.add("priority");
    openapiFields.add("profile");
    openapiFields.add("qos");
    openapiFields.add("reboot");
    openapiFields.add("required_nodes");
    openapiFields.add("requeue");
    openapiFields.add("resize_time");
    openapiFields.add("restart_cnt");
    openapiFields.add("resv_name");
    openapiFields.add("shared");
    openapiFields.add("show_flags");
    openapiFields.add("sockets_per_board");
    openapiFields.add("sockets_per_node");
    openapiFields.add("start_time");
    openapiFields.add("state_description");
    openapiFields.add("state_reason");
    openapiFields.add("standard_error");
    openapiFields.add("standard_input");
    openapiFields.add("standard_output");
    openapiFields.add("submit_time");
    openapiFields.add("suspend_time");
    openapiFields.add("system_comment");
    openapiFields.add("time_limit");
    openapiFields.add("time_minimum");
    openapiFields.add("threads_per_core");
    openapiFields.add("tres_bind");
    openapiFields.add("tres_freq");
    openapiFields.add("tres_per_job");
    openapiFields.add("tres_per_node");
    openapiFields.add("tres_per_socket");
    openapiFields.add("tres_per_task");
    openapiFields.add("tres_req_str");
    openapiFields.add("tres_alloc_str");
    openapiFields.add("user_id");
    openapiFields.add("user_name");
    openapiFields.add("wckey");
    openapiFields.add("current_working_directory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to V0037JobResponseProperties
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V0037JobResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V0037JobResponseProperties is not found in the empty JSON string", V0037JobResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V0037JobResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V0037JobResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("admin_comment") != null && !jsonObj.get("admin_comment").isJsonNull()) && !jsonObj.get("admin_comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_comment").toString()));
      }
      if ((jsonObj.get("array_job_id") != null && !jsonObj.get("array_job_id").isJsonNull()) && !jsonObj.get("array_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `array_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("array_job_id").toString()));
      }
      if ((jsonObj.get("array_task_id") != null && !jsonObj.get("array_task_id").isJsonNull()) && !jsonObj.get("array_task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `array_task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("array_task_id").toString()));
      }
      if ((jsonObj.get("array_max_tasks") != null && !jsonObj.get("array_max_tasks").isJsonNull()) && !jsonObj.get("array_max_tasks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `array_max_tasks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("array_max_tasks").toString()));
      }
      if ((jsonObj.get("array_task_string") != null && !jsonObj.get("array_task_string").isJsonNull()) && !jsonObj.get("array_task_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `array_task_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("array_task_string").toString()));
      }
      if ((jsonObj.get("association_id") != null && !jsonObj.get("association_id").isJsonNull()) && !jsonObj.get("association_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `association_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("association_id").toString()));
      }
      if ((jsonObj.get("batch_features") != null && !jsonObj.get("batch_features").isJsonNull()) && !jsonObj.get("batch_features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batch_features").toString()));
      }
      if ((jsonObj.get("batch_host") != null && !jsonObj.get("batch_host").isJsonNull()) && !jsonObj.get("batch_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batch_host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("burst_buffer") != null && !jsonObj.get("burst_buffer").isJsonNull()) && !jsonObj.get("burst_buffer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `burst_buffer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("burst_buffer").toString()));
      }
      if ((jsonObj.get("burst_buffer_state") != null && !jsonObj.get("burst_buffer_state").isJsonNull()) && !jsonObj.get("burst_buffer_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `burst_buffer_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("burst_buffer_state").toString()));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if ((jsonObj.get("cluster_features") != null && !jsonObj.get("cluster_features").isJsonNull()) && !jsonObj.get("cluster_features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_features").toString()));
      }
      if ((jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) && !jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("core_spec") != null && !jsonObj.get("core_spec").isJsonNull()) && !jsonObj.get("core_spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `core_spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("core_spec").toString()));
      }
      if ((jsonObj.get("thread_spec") != null && !jsonObj.get("thread_spec").isJsonNull()) && !jsonObj.get("thread_spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thread_spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thread_spec").toString()));
      }
      if ((jsonObj.get("cores_per_socket") != null && !jsonObj.get("cores_per_socket").isJsonNull()) && !jsonObj.get("cores_per_socket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cores_per_socket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cores_per_socket").toString()));
      }
      if ((jsonObj.get("billable_tres") != null && !jsonObj.get("billable_tres").isJsonNull()) && !jsonObj.get("billable_tres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billable_tres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billable_tres").toString()));
      }
      if ((jsonObj.get("cpus_per_task") != null && !jsonObj.get("cpus_per_task").isJsonNull()) && !jsonObj.get("cpus_per_task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpus_per_task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpus_per_task").toString()));
      }
      if ((jsonObj.get("cpu_frequency_minimum") != null && !jsonObj.get("cpu_frequency_minimum").isJsonNull()) && !jsonObj.get("cpu_frequency_minimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu_frequency_minimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpu_frequency_minimum").toString()));
      }
      if ((jsonObj.get("cpu_frequency_maximum") != null && !jsonObj.get("cpu_frequency_maximum").isJsonNull()) && !jsonObj.get("cpu_frequency_maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu_frequency_maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpu_frequency_maximum").toString()));
      }
      if ((jsonObj.get("cpu_frequency_governor") != null && !jsonObj.get("cpu_frequency_governor").isJsonNull()) && !jsonObj.get("cpu_frequency_governor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpu_frequency_governor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpu_frequency_governor").toString()));
      }
      if ((jsonObj.get("cpus_per_tres") != null && !jsonObj.get("cpus_per_tres").isJsonNull()) && !jsonObj.get("cpus_per_tres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpus_per_tres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpus_per_tres").toString()));
      }
      if ((jsonObj.get("deadline") != null && !jsonObj.get("deadline").isJsonNull()) && !jsonObj.get("deadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadline").toString()));
      }
      if ((jsonObj.get("delay_boot") != null && !jsonObj.get("delay_boot").isJsonNull()) && !jsonObj.get("delay_boot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay_boot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay_boot").toString()));
      }
      if ((jsonObj.get("dependency") != null && !jsonObj.get("dependency").isJsonNull()) && !jsonObj.get("dependency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependency").toString()));
      }
      if ((jsonObj.get("derived_exit_code") != null && !jsonObj.get("derived_exit_code").isJsonNull()) && !jsonObj.get("derived_exit_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `derived_exit_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("derived_exit_code").toString()));
      }
      if ((jsonObj.get("excluded_nodes") != null && !jsonObj.get("excluded_nodes").isJsonNull()) && !jsonObj.get("excluded_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excluded_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excluded_nodes").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("federation_origin") != null && !jsonObj.get("federation_origin").isJsonNull()) && !jsonObj.get("federation_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federation_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federation_origin").toString()));
      }
      if ((jsonObj.get("federation_siblings_active") != null && !jsonObj.get("federation_siblings_active").isJsonNull()) && !jsonObj.get("federation_siblings_active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federation_siblings_active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federation_siblings_active").toString()));
      }
      if ((jsonObj.get("federation_siblings_viable") != null && !jsonObj.get("federation_siblings_viable").isJsonNull()) && !jsonObj.get("federation_siblings_viable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federation_siblings_viable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federation_siblings_viable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gres_detail") != null && !jsonObj.get("gres_detail").isJsonNull() && !jsonObj.get("gres_detail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gres_detail` to be an array in the JSON string but got `%s`", jsonObj.get("gres_detail").toString()));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonNull()) && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      // validate the optional field `job_resources`
      if (jsonObj.get("job_resources") != null && !jsonObj.get("job_resources").isJsonNull()) {
        V0037JobResources.validateJsonElement(jsonObj.get("job_resources"));
      }
      if ((jsonObj.get("job_state") != null && !jsonObj.get("job_state").isJsonNull()) && !jsonObj.get("job_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_state").toString()));
      }
      if ((jsonObj.get("last_sched_evaluation") != null && !jsonObj.get("last_sched_evaluation").isJsonNull()) && !jsonObj.get("last_sched_evaluation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_sched_evaluation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_sched_evaluation").toString()));
      }
      if ((jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) && !jsonObj.get("licenses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
      }
      if ((jsonObj.get("max_cpus") != null && !jsonObj.get("max_cpus").isJsonNull()) && !jsonObj.get("max_cpus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_cpus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_cpus").toString()));
      }
      if ((jsonObj.get("max_nodes") != null && !jsonObj.get("max_nodes").isJsonNull()) && !jsonObj.get("max_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_nodes").toString()));
      }
      if ((jsonObj.get("mcs_label") != null && !jsonObj.get("mcs_label").isJsonNull()) && !jsonObj.get("mcs_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcs_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcs_label").toString()));
      }
      if ((jsonObj.get("memory_per_tres") != null && !jsonObj.get("memory_per_tres").isJsonNull()) && !jsonObj.get("memory_per_tres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memory_per_tres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memory_per_tres").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) && !jsonObj.get("nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if ((jsonObj.get("nice") != null && !jsonObj.get("nice").isJsonNull()) && !jsonObj.get("nice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nice").toString()));
      }
      if ((jsonObj.get("tasks_per_core") != null && !jsonObj.get("tasks_per_core").isJsonNull()) && !jsonObj.get("tasks_per_core").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks_per_core` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks_per_core").toString()));
      }
      if ((jsonObj.get("tasks_per_socket") != null && !jsonObj.get("tasks_per_socket").isJsonNull()) && !jsonObj.get("tasks_per_socket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks_per_socket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks_per_socket").toString()));
      }
      if ((jsonObj.get("tasks_per_board") != null && !jsonObj.get("tasks_per_board").isJsonNull()) && !jsonObj.get("tasks_per_board").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks_per_board` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks_per_board").toString()));
      }
      if ((jsonObj.get("cpus") != null && !jsonObj.get("cpus").isJsonNull()) && !jsonObj.get("cpus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpus").toString()));
      }
      if ((jsonObj.get("node_count") != null && !jsonObj.get("node_count").isJsonNull()) && !jsonObj.get("node_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_count").toString()));
      }
      if ((jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) && !jsonObj.get("tasks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
      }
      if ((jsonObj.get("het_job_id") != null && !jsonObj.get("het_job_id").isJsonNull()) && !jsonObj.get("het_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `het_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("het_job_id").toString()));
      }
      if ((jsonObj.get("het_job_id_set") != null && !jsonObj.get("het_job_id_set").isJsonNull()) && !jsonObj.get("het_job_id_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `het_job_id_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("het_job_id_set").toString()));
      }
      if ((jsonObj.get("het_job_offset") != null && !jsonObj.get("het_job_offset").isJsonNull()) && !jsonObj.get("het_job_offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `het_job_offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("het_job_offset").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      if ((jsonObj.get("memory_per_node") != null && !jsonObj.get("memory_per_node").isJsonNull()) && !jsonObj.get("memory_per_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memory_per_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memory_per_node").toString()));
      }
      if ((jsonObj.get("memory_per_cpu") != null && !jsonObj.get("memory_per_cpu").isJsonNull()) && !jsonObj.get("memory_per_cpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memory_per_cpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memory_per_cpu").toString()));
      }
      if ((jsonObj.get("minimum_cpus_per_node") != null && !jsonObj.get("minimum_cpus_per_node").isJsonNull()) && !jsonObj.get("minimum_cpus_per_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_cpus_per_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_cpus_per_node").toString()));
      }
      if ((jsonObj.get("minimum_tmp_disk_per_node") != null && !jsonObj.get("minimum_tmp_disk_per_node").isJsonNull()) && !jsonObj.get("minimum_tmp_disk_per_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_tmp_disk_per_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_tmp_disk_per_node").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull() && !jsonObj.get("profile").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be an array in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
      if ((jsonObj.get("qos") != null && !jsonObj.get("qos").isJsonNull()) && !jsonObj.get("qos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qos").toString()));
      }
      if ((jsonObj.get("required_nodes") != null && !jsonObj.get("required_nodes").isJsonNull()) && !jsonObj.get("required_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_nodes").toString()));
      }
      if ((jsonObj.get("restart_cnt") != null && !jsonObj.get("restart_cnt").isJsonNull()) && !jsonObj.get("restart_cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restart_cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restart_cnt").toString()));
      }
      if ((jsonObj.get("resv_name") != null && !jsonObj.get("resv_name").isJsonNull()) && !jsonObj.get("resv_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resv_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resv_name").toString()));
      }
      if ((jsonObj.get("shared") != null && !jsonObj.get("shared").isJsonNull()) && !jsonObj.get("shared").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("show_flags") != null && !jsonObj.get("show_flags").isJsonNull() && !jsonObj.get("show_flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `show_flags` to be an array in the JSON string but got `%s`", jsonObj.get("show_flags").toString()));
      }
      if ((jsonObj.get("sockets_per_board") != null && !jsonObj.get("sockets_per_board").isJsonNull()) && !jsonObj.get("sockets_per_board").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sockets_per_board` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sockets_per_board").toString()));
      }
      if ((jsonObj.get("sockets_per_node") != null && !jsonObj.get("sockets_per_node").isJsonNull()) && !jsonObj.get("sockets_per_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sockets_per_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sockets_per_node").toString()));
      }
      if ((jsonObj.get("state_description") != null && !jsonObj.get("state_description").isJsonNull()) && !jsonObj.get("state_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_description").toString()));
      }
      if ((jsonObj.get("state_reason") != null && !jsonObj.get("state_reason").isJsonNull()) && !jsonObj.get("state_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_reason").toString()));
      }
      if ((jsonObj.get("standard_error") != null && !jsonObj.get("standard_error").isJsonNull()) && !jsonObj.get("standard_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_error").toString()));
      }
      if ((jsonObj.get("standard_input") != null && !jsonObj.get("standard_input").isJsonNull()) && !jsonObj.get("standard_input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_input").toString()));
      }
      if ((jsonObj.get("standard_output") != null && !jsonObj.get("standard_output").isJsonNull()) && !jsonObj.get("standard_output").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_output` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_output").toString()));
      }
      if ((jsonObj.get("system_comment") != null && !jsonObj.get("system_comment").isJsonNull()) && !jsonObj.get("system_comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_comment").toString()));
      }
      if ((jsonObj.get("time_limit") != null && !jsonObj.get("time_limit").isJsonNull()) && !jsonObj.get("time_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_limit").toString()));
      }
      if ((jsonObj.get("time_minimum") != null && !jsonObj.get("time_minimum").isJsonNull()) && !jsonObj.get("time_minimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_minimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_minimum").toString()));
      }
      if ((jsonObj.get("threads_per_core") != null && !jsonObj.get("threads_per_core").isJsonNull()) && !jsonObj.get("threads_per_core").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threads_per_core` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threads_per_core").toString()));
      }
      if ((jsonObj.get("tres_bind") != null && !jsonObj.get("tres_bind").isJsonNull()) && !jsonObj.get("tres_bind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_bind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_bind").toString()));
      }
      if ((jsonObj.get("tres_freq") != null && !jsonObj.get("tres_freq").isJsonNull()) && !jsonObj.get("tres_freq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_freq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_freq").toString()));
      }
      if ((jsonObj.get("tres_per_job") != null && !jsonObj.get("tres_per_job").isJsonNull()) && !jsonObj.get("tres_per_job").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_per_job` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_per_job").toString()));
      }
      if ((jsonObj.get("tres_per_node") != null && !jsonObj.get("tres_per_node").isJsonNull()) && !jsonObj.get("tres_per_node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_per_node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_per_node").toString()));
      }
      if ((jsonObj.get("tres_per_socket") != null && !jsonObj.get("tres_per_socket").isJsonNull()) && !jsonObj.get("tres_per_socket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_per_socket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_per_socket").toString()));
      }
      if ((jsonObj.get("tres_per_task") != null && !jsonObj.get("tres_per_task").isJsonNull()) && !jsonObj.get("tres_per_task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_per_task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_per_task").toString()));
      }
      if ((jsonObj.get("tres_req_str") != null && !jsonObj.get("tres_req_str").isJsonNull()) && !jsonObj.get("tres_req_str").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_req_str` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_req_str").toString()));
      }
      if ((jsonObj.get("tres_alloc_str") != null && !jsonObj.get("tres_alloc_str").isJsonNull()) && !jsonObj.get("tres_alloc_str").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tres_alloc_str` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tres_alloc_str").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if ((jsonObj.get("wckey") != null && !jsonObj.get("wckey").isJsonNull()) && !jsonObj.get("wckey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wckey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wckey").toString()));
      }
      if ((jsonObj.get("current_working_directory") != null && !jsonObj.get("current_working_directory").isJsonNull()) && !jsonObj.get("current_working_directory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_working_directory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_working_directory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V0037JobResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V0037JobResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V0037JobResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V0037JobResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<V0037JobResponseProperties>() {
           @Override
           public void write(JsonWriter out, V0037JobResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V0037JobResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V0037JobResponseProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V0037JobResponseProperties
  * @throws IOException if the JSON string is invalid with respect to V0037JobResponseProperties
  */
  public static V0037JobResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V0037JobResponseProperties.class);
  }

 /**
  * Convert an instance of V0037JobResponseProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

