/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dbv0037AssociationDefault;
import org.openapitools.client.model.Dbv0037AssociationMax;
import org.openapitools.client.model.Dbv0037AssociationMin;
import org.openapitools.client.model.Dbv0037AssociationUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Association description
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dbv0037Association {
  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Integer isDefault;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Dbv0037AssociationDefault _default;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Dbv0037AssociationMax max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Dbv0037AssociationMin min;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT = "parent_account";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT)
  private String parentAccount;

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private String partition;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_QOS = "qos";
  @SerializedName(SERIALIZED_NAME_QOS)
  private List<String> qos;

  public static final String SERIALIZED_NAME_SHARES_RAW = "shares_raw";
  @SerializedName(SERIALIZED_NAME_SHARES_RAW)
  private Integer sharesRaw;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Dbv0037AssociationUsage usage;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public Dbv0037Association() {
  }

  public Dbv0037Association isDefault(Integer isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * is default association
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Integer getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(Integer isDefault) {
    this.isDefault = isDefault;
  }


  public Dbv0037Association account(String account) {
    
    this.account = account;
    return this;
  }

   /**
   * Assigned account
   * @return account
  **/
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    this.account = account;
  }


  public Dbv0037Association cluster(String cluster) {
    
    this.cluster = cluster;
    return this;
  }

   /**
   * Assigned cluster
   * @return cluster
  **/
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }


  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public Dbv0037Association _default(Dbv0037AssociationDefault _default) {
    
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @javax.annotation.Nullable
  public Dbv0037AssociationDefault getDefault() {
    return _default;
  }


  public void setDefault(Dbv0037AssociationDefault _default) {
    this._default = _default;
  }


  public Dbv0037Association flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public Dbv0037Association addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * List of properties of association
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public Dbv0037Association max(Dbv0037AssociationMax max) {
    
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable
  public Dbv0037AssociationMax getMax() {
    return max;
  }


  public void setMax(Dbv0037AssociationMax max) {
    this.max = max;
  }


  public Dbv0037Association min(Dbv0037AssociationMin min) {
    
    this.min = min;
    return this;
  }

   /**
   * Get min
   * @return min
  **/
  @javax.annotation.Nullable
  public Dbv0037AssociationMin getMin() {
    return min;
  }


  public void setMin(Dbv0037AssociationMin min) {
    this.min = min;
  }


  public Dbv0037Association parentAccount(String parentAccount) {
    
    this.parentAccount = parentAccount;
    return this;
  }

   /**
   * Parent account name
   * @return parentAccount
  **/
  @javax.annotation.Nullable
  public String getParentAccount() {
    return parentAccount;
  }


  public void setParentAccount(String parentAccount) {
    this.parentAccount = parentAccount;
  }


  public Dbv0037Association partition(String partition) {
    
    this.partition = partition;
    return this;
  }

   /**
   * Assigned partition
   * @return partition
  **/
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }


  public void setPartition(String partition) {
    this.partition = partition;
  }


  public Dbv0037Association priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Assigned priority
   * @return priority
  **/
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Dbv0037Association qos(List<String> qos) {
    
    this.qos = qos;
    return this;
  }

  public Dbv0037Association addQosItem(String qosItem) {
    if (this.qos == null) {
      this.qos = new ArrayList<>();
    }
    this.qos.add(qosItem);
    return this;
  }

   /**
   * Assigned QOS
   * @return qos
  **/
  @javax.annotation.Nullable
  public List<String> getQos() {
    return qos;
  }


  public void setQos(List<String> qos) {
    this.qos = qos;
  }


  public Dbv0037Association sharesRaw(Integer sharesRaw) {
    
    this.sharesRaw = sharesRaw;
    return this;
  }

   /**
   * Raw fairshare shares
   * @return sharesRaw
  **/
  @javax.annotation.Nullable
  public Integer getSharesRaw() {
    return sharesRaw;
  }


  public void setSharesRaw(Integer sharesRaw) {
    this.sharesRaw = sharesRaw;
  }


  public Dbv0037Association usage(Dbv0037AssociationUsage usage) {
    
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @javax.annotation.Nullable
  public Dbv0037AssociationUsage getUsage() {
    return usage;
  }


  public void setUsage(Dbv0037AssociationUsage usage) {
    this.usage = usage;
  }


  public Dbv0037Association user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Assigned user
   * @return user
  **/
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbv0037Association dbv0037Association = (Dbv0037Association) o;
    return Objects.equals(this.isDefault, dbv0037Association.isDefault) &&
        Objects.equals(this.account, dbv0037Association.account) &&
        Objects.equals(this.cluster, dbv0037Association.cluster) &&
        Objects.equals(this._default, dbv0037Association._default) &&
        Objects.equals(this.flags, dbv0037Association.flags) &&
        Objects.equals(this.max, dbv0037Association.max) &&
        Objects.equals(this.min, dbv0037Association.min) &&
        Objects.equals(this.parentAccount, dbv0037Association.parentAccount) &&
        Objects.equals(this.partition, dbv0037Association.partition) &&
        Objects.equals(this.priority, dbv0037Association.priority) &&
        Objects.equals(this.qos, dbv0037Association.qos) &&
        Objects.equals(this.sharesRaw, dbv0037Association.sharesRaw) &&
        Objects.equals(this.usage, dbv0037Association.usage) &&
        Objects.equals(this.user, dbv0037Association.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDefault, account, cluster, _default, flags, max, min, parentAccount, partition, priority, qos, sharesRaw, usage, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbv0037Association {\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    parentAccount: ").append(toIndentedString(parentAccount)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    qos: ").append(toIndentedString(qos)).append("\n");
    sb.append("    sharesRaw: ").append(toIndentedString(sharesRaw)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_default");
    openapiFields.add("account");
    openapiFields.add("cluster");
    openapiFields.add("default");
    openapiFields.add("flags");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("parent_account");
    openapiFields.add("partition");
    openapiFields.add("priority");
    openapiFields.add("qos");
    openapiFields.add("shares_raw");
    openapiFields.add("usage");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbv0037Association
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbv0037Association.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbv0037Association is not found in the empty JSON string", Dbv0037Association.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbv0037Association.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbv0037Association` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      // validate the optional field `default`
      if (jsonObj.get("default") != null && !jsonObj.get("default").isJsonNull()) {
        Dbv0037AssociationDefault.validateJsonElement(jsonObj.get("default"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      // validate the optional field `max`
      if (jsonObj.get("max") != null && !jsonObj.get("max").isJsonNull()) {
        Dbv0037AssociationMax.validateJsonElement(jsonObj.get("max"));
      }
      // validate the optional field `min`
      if (jsonObj.get("min") != null && !jsonObj.get("min").isJsonNull()) {
        Dbv0037AssociationMin.validateJsonElement(jsonObj.get("min"));
      }
      if ((jsonObj.get("parent_account") != null && !jsonObj.get("parent_account").isJsonNull()) && !jsonObj.get("parent_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_account").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("qos") != null && !jsonObj.get("qos").isJsonNull() && !jsonObj.get("qos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qos` to be an array in the JSON string but got `%s`", jsonObj.get("qos").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        Dbv0037AssociationUsage.validateJsonElement(jsonObj.get("usage"));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbv0037Association.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbv0037Association' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbv0037Association> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbv0037Association.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbv0037Association>() {
           @Override
           public void write(JsonWriter out, Dbv0037Association value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbv0037Association read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbv0037Association given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbv0037Association
  * @throws IOException if the JSON string is invalid with respect to Dbv0037Association
  */
  public static Dbv0037Association fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbv0037Association.class);
  }

 /**
  * Convert an instance of Dbv0037Association to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

