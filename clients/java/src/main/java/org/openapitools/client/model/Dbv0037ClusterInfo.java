/*
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dbv0037ClusterInfoAssociations;
import org.openapitools.client.model.Dbv0037ClusterInfoController;
import org.openapitools.client.model.Dbv0037ResponseTres;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dbv0037ClusterInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dbv0037ClusterInfo {
  public static final String SERIALIZED_NAME_CONTROLLER = "controller";
  @SerializedName(SERIALIZED_NAME_CONTROLLER)
  private Dbv0037ClusterInfoController controller;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private String nodes;

  public static final String SERIALIZED_NAME_SELECT_PLUGIN = "select_plugin";
  @SerializedName(SERIALIZED_NAME_SELECT_PLUGIN)
  private String selectPlugin;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private Dbv0037ClusterInfoAssociations associations;

  public static final String SERIALIZED_NAME_RPC_VERSION = "rpc_version";
  @SerializedName(SERIALIZED_NAME_RPC_VERSION)
  private Integer rpcVersion;

  public static final String SERIALIZED_NAME_TRES = "tres";
  @SerializedName(SERIALIZED_NAME_TRES)
  private List<Dbv0037ResponseTres> tres;

  public Dbv0037ClusterInfo() {
  }

  public Dbv0037ClusterInfo controller(Dbv0037ClusterInfoController controller) {
    
    this.controller = controller;
    return this;
  }

   /**
   * Get controller
   * @return controller
  **/
  @javax.annotation.Nullable
  public Dbv0037ClusterInfoController getController() {
    return controller;
  }


  public void setController(Dbv0037ClusterInfoController controller) {
    this.controller = controller;
  }


  public Dbv0037ClusterInfo flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public Dbv0037ClusterInfo addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * List of properties of cluster
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public Dbv0037ClusterInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Cluster name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Dbv0037ClusterInfo nodes(String nodes) {
    
    this.nodes = nodes;
    return this;
  }

   /**
   * Assigned nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  public String getNodes() {
    return nodes;
  }


  public void setNodes(String nodes) {
    this.nodes = nodes;
  }


  public Dbv0037ClusterInfo selectPlugin(String selectPlugin) {
    
    this.selectPlugin = selectPlugin;
    return this;
  }

   /**
   * Configured select plugin
   * @return selectPlugin
  **/
  @javax.annotation.Nullable
  public String getSelectPlugin() {
    return selectPlugin;
  }


  public void setSelectPlugin(String selectPlugin) {
    this.selectPlugin = selectPlugin;
  }


  public Dbv0037ClusterInfo associations(Dbv0037ClusterInfoAssociations associations) {
    
    this.associations = associations;
    return this;
  }

   /**
   * Get associations
   * @return associations
  **/
  @javax.annotation.Nullable
  public Dbv0037ClusterInfoAssociations getAssociations() {
    return associations;
  }


  public void setAssociations(Dbv0037ClusterInfoAssociations associations) {
    this.associations = associations;
  }


  public Dbv0037ClusterInfo rpcVersion(Integer rpcVersion) {
    
    this.rpcVersion = rpcVersion;
    return this;
  }

   /**
   * Number rpc version
   * @return rpcVersion
  **/
  @javax.annotation.Nullable
  public Integer getRpcVersion() {
    return rpcVersion;
  }


  public void setRpcVersion(Integer rpcVersion) {
    this.rpcVersion = rpcVersion;
  }


  public Dbv0037ClusterInfo tres(List<Dbv0037ResponseTres> tres) {
    
    this.tres = tres;
    return this;
  }

  public Dbv0037ClusterInfo addTresItem(Dbv0037ResponseTres tresItem) {
    if (this.tres == null) {
      this.tres = new ArrayList<>();
    }
    this.tres.add(tresItem);
    return this;
  }

   /**
   * List of TRES in cluster
   * @return tres
  **/
  @javax.annotation.Nullable
  public List<Dbv0037ResponseTres> getTres() {
    return tres;
  }


  public void setTres(List<Dbv0037ResponseTres> tres) {
    this.tres = tres;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbv0037ClusterInfo dbv0037ClusterInfo = (Dbv0037ClusterInfo) o;
    return Objects.equals(this.controller, dbv0037ClusterInfo.controller) &&
        Objects.equals(this.flags, dbv0037ClusterInfo.flags) &&
        Objects.equals(this.name, dbv0037ClusterInfo.name) &&
        Objects.equals(this.nodes, dbv0037ClusterInfo.nodes) &&
        Objects.equals(this.selectPlugin, dbv0037ClusterInfo.selectPlugin) &&
        Objects.equals(this.associations, dbv0037ClusterInfo.associations) &&
        Objects.equals(this.rpcVersion, dbv0037ClusterInfo.rpcVersion) &&
        Objects.equals(this.tres, dbv0037ClusterInfo.tres);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controller, flags, name, nodes, selectPlugin, associations, rpcVersion, tres);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbv0037ClusterInfo {\n");
    sb.append("    controller: ").append(toIndentedString(controller)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    selectPlugin: ").append(toIndentedString(selectPlugin)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    rpcVersion: ").append(toIndentedString(rpcVersion)).append("\n");
    sb.append("    tres: ").append(toIndentedString(tres)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controller");
    openapiFields.add("flags");
    openapiFields.add("name");
    openapiFields.add("nodes");
    openapiFields.add("select_plugin");
    openapiFields.add("associations");
    openapiFields.add("rpc_version");
    openapiFields.add("tres");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbv0037ClusterInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbv0037ClusterInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbv0037ClusterInfo is not found in the empty JSON string", Dbv0037ClusterInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbv0037ClusterInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbv0037ClusterInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `controller`
      if (jsonObj.get("controller") != null && !jsonObj.get("controller").isJsonNull()) {
        Dbv0037ClusterInfoController.validateJsonElement(jsonObj.get("controller"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) && !jsonObj.get("nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if ((jsonObj.get("select_plugin") != null && !jsonObj.get("select_plugin").isJsonNull()) && !jsonObj.get("select_plugin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `select_plugin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("select_plugin").toString()));
      }
      // validate the optional field `associations`
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        Dbv0037ClusterInfoAssociations.validateJsonElement(jsonObj.get("associations"));
      }
      if (jsonObj.get("tres") != null && !jsonObj.get("tres").isJsonNull()) {
        JsonArray jsonArraytres = jsonObj.getAsJsonArray("tres");
        if (jsonArraytres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tres` to be an array in the JSON string but got `%s`", jsonObj.get("tres").toString()));
          }

          // validate the optional field `tres` (array)
          for (int i = 0; i < jsonArraytres.size(); i++) {
            Dbv0037ResponseTres.validateJsonElement(jsonArraytres.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbv0037ClusterInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbv0037ClusterInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbv0037ClusterInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbv0037ClusterInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbv0037ClusterInfo>() {
           @Override
           public void write(JsonWriter out, Dbv0037ClusterInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbv0037ClusterInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbv0037ClusterInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbv0037ClusterInfo
  * @throws IOException if the JSON string is invalid with respect to Dbv0037ClusterInfo
  */
  public static Dbv0037ClusterInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbv0037ClusterInfo.class);
  }

 /**
  * Convert an instance of Dbv0037ClusterInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

