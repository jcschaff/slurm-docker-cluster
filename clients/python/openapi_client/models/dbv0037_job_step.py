# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.dbv0037_job_exit_code import Dbv0037JobExitCode
from openapi_client.models.dbv0037_job_step_cpu import Dbv0037JobStepCPU
from openapi_client.models.dbv0037_job_step_nodes import Dbv0037JobStepNodes
from openapi_client.models.dbv0037_job_step_statistics import Dbv0037JobStepStatistics
from openapi_client.models.dbv0037_job_step_step import Dbv0037JobStepStep
from openapi_client.models.dbv0037_job_step_task import Dbv0037JobStepTask
from openapi_client.models.dbv0037_job_step_tasks import Dbv0037JobStepTasks
from openapi_client.models.dbv0037_job_step_time import Dbv0037JobStepTime
from openapi_client.models.dbv0037_job_step_tres import Dbv0037JobStepTres

class Dbv0037JobStep(BaseModel):
    """
    Dbv0037JobStep
    """
    time: Optional[Dbv0037JobStepTime] = None
    exit_code: Optional[Dbv0037JobExitCode] = None
    nodes: Optional[Dbv0037JobStepNodes] = None
    tasks: Optional[Dbv0037JobStepTasks] = None
    pid: Optional[StrictStr] = Field(None, description="First process PID")
    cpu: Optional[Dbv0037JobStepCPU] = Field(None, alias="CPU")
    kill_request_user: Optional[StrictStr] = Field(None, description="User who requested job killed")
    state: Optional[StrictStr] = Field(None, description="State of job step")
    statistics: Optional[Dbv0037JobStepStatistics] = None
    step: Optional[Dbv0037JobStepStep] = None
    task: Optional[Dbv0037JobStepTask] = None
    tres: Optional[Dbv0037JobStepTres] = None
    __properties = ["time", "exit_code", "nodes", "tasks", "pid", "CPU", "kill_request_user", "state", "statistics", "step", "task", "tres"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dbv0037JobStep:
        """Create an instance of Dbv0037JobStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exit_code
        if self.exit_code:
            _dict['exit_code'] = self.exit_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nodes
        if self.nodes:
            _dict['nodes'] = self.nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tasks
        if self.tasks:
            _dict['tasks'] = self.tasks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['CPU'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step
        if self.step:
            _dict['step'] = self.step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task
        if self.task:
            _dict['task'] = self.task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tres
        if self.tres:
            _dict['tres'] = self.tres.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dbv0037JobStep:
        """Create an instance of Dbv0037JobStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dbv0037JobStep.parse_obj(obj)

        _obj = Dbv0037JobStep.parse_obj({
            "time": Dbv0037JobStepTime.from_dict(obj.get("time")) if obj.get("time") is not None else None,
            "exit_code": Dbv0037JobExitCode.from_dict(obj.get("exit_code")) if obj.get("exit_code") is not None else None,
            "nodes": Dbv0037JobStepNodes.from_dict(obj.get("nodes")) if obj.get("nodes") is not None else None,
            "tasks": Dbv0037JobStepTasks.from_dict(obj.get("tasks")) if obj.get("tasks") is not None else None,
            "pid": obj.get("pid"),
            "cpu": Dbv0037JobStepCPU.from_dict(obj.get("CPU")) if obj.get("CPU") is not None else None,
            "kill_request_user": obj.get("kill_request_user"),
            "state": obj.get("state"),
            "statistics": Dbv0037JobStepStatistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None,
            "step": Dbv0037JobStepStep.from_dict(obj.get("step")) if obj.get("step") is not None else None,
            "task": Dbv0037JobStepTask.from_dict(obj.get("task")) if obj.get("task") is not None else None,
            "tres": Dbv0037JobStepTres.from_dict(obj.get("tres")) if obj.get("tres") is not None else None
        })
        return _obj


