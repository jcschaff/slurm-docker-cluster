# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.v0037_reservation_purge_completed import V0037ReservationPurgeCompleted

class V0037Reservation(BaseModel):
    """
    V0037Reservation
    """
    accounts: Optional[StrictStr] = Field(None, description="Allowed accounts")
    burst_buffer: Optional[StrictStr] = Field(None, description="Reserved burst buffer")
    core_count: Optional[StrictInt] = Field(None, description="Number of reserved cores")
    core_spec_cnt: Optional[StrictInt] = Field(None, description="Number of reserved specialized cores")
    end_time: Optional[StrictInt] = Field(None, description="End time of the reservation")
    features: Optional[StrictStr] = Field(None, description="List of features")
    flags: Optional[conlist(StrictStr)] = Field(None, description="Reservation options")
    groups: Optional[StrictStr] = Field(None, description="List of groups permitted to use the reserved nodes")
    licenses: Optional[StrictStr] = Field(None, description="List of licenses")
    max_start_delay: Optional[StrictInt] = Field(None, description="Maximum delay in which jobs outside of the reservation will be permitted to overlap once any jobs are queued for the reservation")
    name: Optional[StrictStr] = Field(None, description="Reservationn name")
    node_count: Optional[StrictInt] = Field(None, description="Count of nodes reserved")
    node_list: Optional[StrictStr] = Field(None, description="List of reserved nodes")
    partition: Optional[StrictStr] = Field(None, description="Partition")
    purge_completed: Optional[V0037ReservationPurgeCompleted] = None
    start_time: Optional[StrictInt] = Field(None, description="Start time of reservation")
    watts: Optional[StrictInt] = Field(None, description="amount of power to reserve in watts")
    tres: Optional[StrictStr] = Field(None, description="List of TRES")
    users: Optional[StrictStr] = Field(None, description="List of users")
    __properties = ["accounts", "burst_buffer", "core_count", "core_spec_cnt", "end_time", "features", "flags", "groups", "licenses", "max_start_delay", "name", "node_count", "node_list", "partition", "purge_completed", "start_time", "watts", "tres", "users"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V0037Reservation:
        """Create an instance of V0037Reservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of purge_completed
        if self.purge_completed:
            _dict['purge_completed'] = self.purge_completed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V0037Reservation:
        """Create an instance of V0037Reservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V0037Reservation.parse_obj(obj)

        _obj = V0037Reservation.parse_obj({
            "accounts": obj.get("accounts"),
            "burst_buffer": obj.get("burst_buffer"),
            "core_count": obj.get("core_count"),
            "core_spec_cnt": obj.get("core_spec_cnt"),
            "end_time": obj.get("end_time"),
            "features": obj.get("features"),
            "flags": obj.get("flags"),
            "groups": obj.get("groups"),
            "licenses": obj.get("licenses"),
            "max_start_delay": obj.get("max_start_delay"),
            "name": obj.get("name"),
            "node_count": obj.get("node_count"),
            "node_list": obj.get("node_list"),
            "partition": obj.get("partition"),
            "purge_completed": V0037ReservationPurgeCompleted.from_dict(obj.get("purge_completed")) if obj.get("purge_completed") is not None else None,
            "start_time": obj.get("start_time"),
            "watts": obj.get("watts"),
            "tres": obj.get("tres"),
            "users": obj.get("users")
        })
        return _obj


