# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.dbv0037_association_default import Dbv0037AssociationDefault
from openapi_client.models.dbv0037_association_max import Dbv0037AssociationMax
from openapi_client.models.dbv0037_association_min import Dbv0037AssociationMin
from openapi_client.models.dbv0037_association_usage import Dbv0037AssociationUsage

class Dbv0037Association(BaseModel):
    """
    Association description  # noqa: E501
    """
    is_default: Optional[StrictInt] = Field(None, description="is default association")
    account: Optional[StrictStr] = Field(None, description="Assigned account")
    cluster: Optional[StrictStr] = Field(None, description="Assigned cluster")
    default: Optional[Dbv0037AssociationDefault] = None
    flags: Optional[conlist(StrictStr)] = Field(None, description="List of properties of association")
    max: Optional[Dbv0037AssociationMax] = None
    min: Optional[Dbv0037AssociationMin] = None
    parent_account: Optional[StrictStr] = Field(None, description="Parent account name")
    partition: Optional[StrictStr] = Field(None, description="Assigned partition")
    priority: Optional[StrictInt] = Field(None, description="Assigned priority")
    qos: Optional[conlist(StrictStr)] = Field(None, description="Assigned QOS")
    shares_raw: Optional[StrictInt] = Field(None, description="Raw fairshare shares")
    usage: Optional[Dbv0037AssociationUsage] = None
    user: Optional[StrictStr] = Field(None, description="Assigned user")
    __properties = ["is_default", "account", "cluster", "default", "flags", "max", "min", "parent_account", "partition", "priority", "qos", "shares_raw", "usage", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dbv0037Association:
        """Create an instance of Dbv0037Association from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max
        if self.max:
            _dict['max'] = self.max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min
        if self.min:
            _dict['min'] = self.min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dbv0037Association:
        """Create an instance of Dbv0037Association from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dbv0037Association.parse_obj(obj)

        _obj = Dbv0037Association.parse_obj({
            "is_default": obj.get("is_default"),
            "account": obj.get("account"),
            "cluster": obj.get("cluster"),
            "default": Dbv0037AssociationDefault.from_dict(obj.get("default")) if obj.get("default") is not None else None,
            "flags": obj.get("flags"),
            "max": Dbv0037AssociationMax.from_dict(obj.get("max")) if obj.get("max") is not None else None,
            "min": Dbv0037AssociationMin.from_dict(obj.get("min")) if obj.get("min") is not None else None,
            "parent_account": obj.get("parent_account"),
            "partition": obj.get("partition"),
            "priority": obj.get("priority"),
            "qos": obj.get("qos"),
            "shares_raw": obj.get("shares_raw"),
            "usage": Dbv0037AssociationUsage.from_dict(obj.get("usage")) if obj.get("usage") is not None else None,
            "user": obj.get("user")
        })
        return _obj


