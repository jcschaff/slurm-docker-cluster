# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.dbv0037_job_step_statistics_cpu import Dbv0037JobStepStatisticsCPU
from openapi_client.models.dbv0037_job_step_statistics_energy import Dbv0037JobStepStatisticsEnergy

class Dbv0037JobStepStatistics(BaseModel):
    """
    Statistics of job step  # noqa: E501
    """
    cpu: Optional[Dbv0037JobStepStatisticsCPU] = Field(None, alias="CPU")
    energy: Optional[Dbv0037JobStepStatisticsEnergy] = None
    __properties = ["CPU", "energy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dbv0037JobStepStatistics:
        """Create an instance of Dbv0037JobStepStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['CPU'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of energy
        if self.energy:
            _dict['energy'] = self.energy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dbv0037JobStepStatistics:
        """Create an instance of Dbv0037JobStepStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dbv0037JobStepStatistics.parse_obj(obj)

        _obj = Dbv0037JobStepStatistics.parse_obj({
            "cpu": Dbv0037JobStepStatisticsCPU.from_dict(obj.get("CPU")) if obj.get("CPU") is not None else None,
            "energy": Dbv0037JobStepStatisticsEnergy.from_dict(obj.get("energy")) if obj.get("energy") is not None else None
        })
        return _obj


