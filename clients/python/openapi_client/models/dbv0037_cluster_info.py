# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.dbv0037_cluster_info_associations import Dbv0037ClusterInfoAssociations
from openapi_client.models.dbv0037_cluster_info_controller import Dbv0037ClusterInfoController
from openapi_client.models.dbv0037_response_tres import Dbv0037ResponseTres

class Dbv0037ClusterInfo(BaseModel):
    """
    Dbv0037ClusterInfo
    """
    controller: Optional[Dbv0037ClusterInfoController] = None
    flags: Optional[conlist(StrictStr)] = Field(None, description="List of properties of cluster")
    name: Optional[StrictStr] = Field(None, description="Cluster name")
    nodes: Optional[StrictStr] = Field(None, description="Assigned nodes")
    select_plugin: Optional[StrictStr] = Field(None, description="Configured select plugin")
    associations: Optional[Dbv0037ClusterInfoAssociations] = None
    rpc_version: Optional[StrictInt] = Field(None, description="Number rpc version")
    tres: Optional[conlist(Dbv0037ResponseTres)] = Field(None, description="List of TRES in cluster")
    __properties = ["controller", "flags", "name", "nodes", "select_plugin", "associations", "rpc_version", "tres"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dbv0037ClusterInfo:
        """Create an instance of Dbv0037ClusterInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of controller
        if self.controller:
            _dict['controller'] = self.controller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of associations
        if self.associations:
            _dict['associations'] = self.associations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tres (list)
        _items = []
        if self.tres:
            for _item in self.tres:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tres'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dbv0037ClusterInfo:
        """Create an instance of Dbv0037ClusterInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dbv0037ClusterInfo.parse_obj(obj)

        _obj = Dbv0037ClusterInfo.parse_obj({
            "controller": Dbv0037ClusterInfoController.from_dict(obj.get("controller")) if obj.get("controller") is not None else None,
            "flags": obj.get("flags"),
            "name": obj.get("name"),
            "nodes": obj.get("nodes"),
            "select_plugin": obj.get("select_plugin"),
            "associations": Dbv0037ClusterInfoAssociations.from_dict(obj.get("associations")) if obj.get("associations") is not None else None,
            "rpc_version": obj.get("rpc_version"),
            "tres": [Dbv0037ResponseTres.from_dict(_item) for _item in obj.get("tres")] if obj.get("tres") is not None else None
        })
        return _obj


