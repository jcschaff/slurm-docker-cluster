# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.

    The version of the OpenAPI document: 0.0.37
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from openapi_client.models.dbv0037_diag_rollups_inner import Dbv0037DiagRollupsInner
from openapi_client.models.dbv0037_diag_rpcs_inner import Dbv0037DiagRPCsInner
from openapi_client.models.dbv0037_diag_users_inner import Dbv0037DiagUsersInner
from openapi_client.models.dbv0037_error import Dbv0037Error

class Dbv0037Diag(BaseModel):
    """
    Dbv0037Diag
    """
    errors: Optional[conlist(Dbv0037Error)] = Field(None, description="Slurm errors")
    time_start: Optional[StrictInt] = Field(None, description="Unix timestamp of start time")
    rollups: Optional[conlist(Dbv0037DiagRollupsInner)] = None
    rpcs: Optional[conlist(Dbv0037DiagRPCsInner)] = Field(None, alias="RPCs")
    users: Optional[conlist(Dbv0037DiagUsersInner)] = None
    __properties = ["errors", "time_start", "rollups", "RPCs", "users"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dbv0037Diag:
        """Create an instance of Dbv0037Diag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rollups (list)
        _items = []
        if self.rollups:
            for _item in self.rollups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rollups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rpcs (list)
        _items = []
        if self.rpcs:
            for _item in self.rpcs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RPCs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dbv0037Diag:
        """Create an instance of Dbv0037Diag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dbv0037Diag.parse_obj(obj)

        _obj = Dbv0037Diag.parse_obj({
            "errors": [Dbv0037Error.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None,
            "time_start": obj.get("time_start"),
            "rollups": [Dbv0037DiagRollupsInner.from_dict(_item) for _item in obj.get("rollups")] if obj.get("rollups") is not None else None,
            "rpcs": [Dbv0037DiagRPCsInner.from_dict(_item) for _item in obj.get("RPCs")] if obj.get("RPCs") is not None else None,
            "users": [Dbv0037DiagUsersInner.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None
        })
        return _obj


